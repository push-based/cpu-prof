[{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/direct-lint-stats.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":8.233167},"rules":{"@nx/dependency-checks":{"total":0.208}},"fix":{"total":0},"total":12.6725}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/docs/examples/cpu-prof.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":18.705208},"rules":{"for-direction":{"total":0.023417},"no-async-promise-executor":{"total":0.010042},"no-case-declarations":{"total":0.013542},"no-compare-neg-zero":{"total":0.032542},"no-cond-assign":{"total":0.041501},"no-constant-binary-expression":{"total":0.061249000000000005},"no-constant-condition":{"total":0.12533300000000003},"no-control-regex":{"total":0.5533369999999997},"no-debugger":{"total":0.011291},"no-delete-var":{"total":0.021543},"no-dupe-else-if":{"total":0.05520900000000001},"no-duplicate-case":{"total":0.008},"no-empty":{"total":0.031209},"no-empty-character-class":{"total":0.022456999999999998},"no-empty-pattern":{"total":0.030042},"no-empty-static-block":{"total":0.007375},"no-ex-assign":{"total":0.039583},"no-extra-boolean-cast":{"total":0.08041900000000002},"no-fallthrough":{"total":0.08896400000000003},"no-global-assign":{"total":0.168708},"no-invalid-regexp":{"total":0.066709},"no-irregular-whitespace":{"total":0.082124},"no-loss-of-precision":{"total":0.3555009999999998},"no-misleading-character-class":{"total":0.258499},"no-nonoctal-decimal-escape":{"total":0.07625300000000002},"no-octal":{"total":0.05474900000000001},"no-prototype-builtins":{"total":0.1508719999999999},"no-regex-spaces":{"total":0.2739139999999996},"no-self-assign":{"total":0.011834},"no-shadow-restricted-names":{"total":0.07095500000000002},"no-sparse-arrays":{"total":0.010459},"no-unsafe-finally":{"total":0.12071},"no-unsafe-optional-chaining":{"total":0.14149300000000006},"no-unused-labels":{"total":0.013834},"no-unused-private-class-members":{"total":0.015583},"no-useless-backreference":{"total":0.15283400000000003},"no-useless-catch":{"total":0.020583},"no-useless-escape":{"total":0.46428899999999984},"require-yield":{"total":0.030125000000000002},"use-isnan":{"total":0.09016600000000001},"valid-typeof":{"total":0.061417},"no-var":{"total":0.020125000000000004},"prefer-const":{"total":0.062041},"prefer-rest-params":{"total":0.034041},"prefer-spread":{"total":0.07358100000000002},"@typescript-eslint/ban-ts-comment":{"total":0.265999},"@typescript-eslint/no-array-constructor":{"total":0.04562300000000002},"@typescript-eslint/no-duplicate-enum-values":{"total":0.020042},"@typescript-eslint/no-empty-object-type":{"total":0.033375},"@typescript-eslint/no-explicit-any":{"total":0.027791},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.0145},"@typescript-eslint/no-misused-new":{"total":0.018334},"@typescript-eslint/no-namespace":{"total":0.022458},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.015875},"@typescript-eslint/no-this-alias":{"total":0.021209},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.061125},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.010667},"@typescript-eslint/no-unsafe-function-type":{"total":0.010959},"@typescript-eslint/no-unused-expressions":{"total":0.23045799999999986},"@typescript-eslint/no-unused-vars":{"total":2.357667},"@typescript-eslint/no-wrapper-object-types":{"total":0.01125},"@typescript-eslint/prefer-as-const":{"total":0.022460000000000004},"@typescript-eslint/prefer-namespace-keyword":{"total":0.007166},"@typescript-eslint/triple-slash-reference":{"total":0.270583},"@typescript-eslint/no-non-null-assertion":{"total":0.00675},"@typescript-eslint/adjacent-overload-signatures":{"total":0.3614569999999999},"@typescript-eslint/no-empty-function":{"total":0.338292},"@typescript-eslint/no-inferrable-types":{"total":0.144664},"@typescript-eslint/no-empty-interface":{"total":0.012209},"@nx/enforce-module-boundaries":{"total":5.947792}},"fix":{"total":0},"total":43.269375}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/docs/examples/minimal-cpu-profile-nodes-call-frame-source-location.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.702417},"rules":{"@nx/dependency-checks":{"total":0.029667}},"fix":{"total":0},"total":1.977709}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/docs/examples/minimal-cpu-profile-timing-data-samples.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.876625},"rules":{"@nx/dependency-checks":{"total":0.018416}},"fix":{"total":0},"total":2.156375}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/docs/examples/minimal-cpu-profile-timing-data-time-deltas.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.352542},"rules":{"@nx/dependency-checks":{"total":0.024459}},"fix":{"total":0},"total":3.149792}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/docs/examples/minimal-cpu-profile.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.532375},"rules":{"@nx/dependency-checks":{"total":0.084917}},"fix":{"total":0},"total":1.699833}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/docs/examples/minimal-trace-event-instant-event-complex-profile-chunks.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":1.026417},"rules":{"@nx/dependency-checks":{"total":0.02}},"fix":{"total":0},"total":2.38775}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/docs/examples/minimal-trace-event-instant-event-simple-profile-chunks.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.496833},"rules":{"@nx/dependency-checks":{"total":0.016875}},"fix":{"total":0},"total":1.587792}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/docs/examples/minimal-trace-event-instant-event-start-profiling.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.530417},"rules":{"@nx/dependency-checks":{"total":0.023125}},"fix":{"total":0},"total":1.939083}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/docs/examples/minimal-trace-event-instant-event-tracing-started-in-browser.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.472792},"rules":{"@nx/dependency-checks":{"total":0.016625}},"fix":{"total":0},"total":1.606208}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/docs/examples/minimal-trace-event-pid-tid-grouping.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.471333},"rules":{"@nx/dependency-checks":{"total":0.022291}},"fix":{"total":0},"total":1.38925}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/docs/test-1.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":8.993291},"rules":{"for-direction":{"total":0.041083},"no-async-promise-executor":{"total":0.001417},"no-case-declarations":{"total":0.001125},"no-compare-neg-zero":{"total":0.005000000000000001},"no-cond-assign":{"total":0.004915999999999999},"no-constant-binary-expression":{"total":0.121166},"no-constant-condition":{"total":0.054749000000000006},"no-control-regex":{"total":0.010206999999999999},"no-debugger":{"total":0.000958},"no-delete-var":{"total":0.001583},"no-dupe-else-if":{"total":0.004416},"no-duplicate-case":{"total":0.000875},"no-empty":{"total":0.008041},"no-empty-character-class":{"total":0.000875},"no-empty-pattern":{"total":0.002083},"no-empty-static-block":{"total":0.000834},"no-ex-assign":{"total":0.000834},"no-extra-boolean-cast":{"total":0.006459},"no-fallthrough":{"total":0.03866400000000002},"no-global-assign":{"total":0.064459},"no-invalid-regexp":{"total":0.006043},"no-irregular-whitespace":{"total":0.006791999999999999},"no-loss-of-precision":{"total":0.025582},"no-misleading-character-class":{"total":0.027626},"no-nonoctal-decimal-escape":{"total":0.0060420000000000005},"no-octal":{"total":0.015916000000000003},"no-prototype-builtins":{"total":0.0074990000000000005},"no-regex-spaces":{"total":0.028334000000000012},"no-self-assign":{"total":0.061291},"no-shadow-restricted-names":{"total":0.024123000000000006},"no-sparse-arrays":{"total":0.037374000000000004},"no-unsafe-finally":{"total":0.098125},"no-unsafe-optional-chaining":{"total":0.048959000000000016},"no-unused-labels":{"total":0.012541},"no-unused-private-class-members":{"total":0.001584},"no-useless-backreference":{"total":0.006292},"no-useless-catch":{"total":0.000792},"no-useless-escape":{"total":0.030333000000000002},"require-yield":{"total":0.002166},"use-isnan":{"total":0.010584000000000001},"valid-typeof":{"total":0.010667000000000001},"no-var":{"total":0.007209000000000002},"prefer-const":{"total":0.362584},"prefer-rest-params":{"total":0.002458},"prefer-spread":{"total":0.006583000000000001},"@typescript-eslint/ban-ts-comment":{"total":0.019667},"@typescript-eslint/no-array-constructor":{"total":0.008624999999999999},"@typescript-eslint/no-duplicate-enum-values":{"total":0.002041},"@typescript-eslint/no-empty-object-type":{"total":0.00525},"@typescript-eslint/no-explicit-any":{"total":0.003791},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001833},"@typescript-eslint/no-misused-new":{"total":0.001917},"@typescript-eslint/no-namespace":{"total":0.003042},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001958},"@typescript-eslint/no-this-alias":{"total":0.003583},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.009458},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.002083},"@typescript-eslint/no-unsafe-function-type":{"total":0.019875000000000004},"@typescript-eslint/no-unused-expressions":{"total":0.033542},"@typescript-eslint/no-unused-vars":{"total":2.3297499999999998},"@typescript-eslint/no-wrapper-object-types":{"total":0.030542},"@typescript-eslint/prefer-as-const":{"total":0.03774800000000001},"@typescript-eslint/prefer-namespace-keyword":{"total":0.001541},"@typescript-eslint/triple-slash-reference":{"total":0.014},"@typescript-eslint/no-non-null-assertion":{"total":0.004625},"@typescript-eslint/adjacent-overload-signatures":{"total":0.036167000000000005},"@typescript-eslint/no-empty-function":{"total":0.237792},"@typescript-eslint/no-inferrable-types":{"total":0.06179100000000001},"@typescript-eslint/no-empty-interface":{"total":0.002833},"@nx/enforce-module-boundaries":{"total":0.272709}},"fix":{"total":0},"total":16.297834}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/eslint.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":1.44375},"rules":{"for-direction":{"total":0.001916},"no-async-promise-executor":{"total":0.001042},"no-case-declarations":{"total":0.00075},"no-compare-neg-zero":{"total":0.002},"no-cond-assign":{"total":0.002209},"no-constant-binary-expression":{"total":0.001167},"no-constant-condition":{"total":0.004417},"no-control-regex":{"total":0.007956999999999999},"no-debugger":{"total":0.000625},"no-delete-var":{"total":0.00075},"no-dupe-else-if":{"total":0.001167},"no-duplicate-case":{"total":0.000542},"no-empty":{"total":0.001375},"no-empty-character-class":{"total":0.000541},"no-empty-pattern":{"total":0.001125},"no-empty-static-block":{"total":0.000667},"no-ex-assign":{"total":0.000667},"no-extra-boolean-cast":{"total":0.001833},"no-fallthrough":{"total":0.005874},"no-global-assign":{"total":0.028458},"no-invalid-regexp":{"total":0.001083},"no-irregular-whitespace":{"total":0.024709000000000002},"no-loss-of-precision":{"total":0.002791},"no-misleading-character-class":{"total":0.106167},"no-nonoctal-decimal-escape":{"total":0.019374000000000002},"no-octal":{"total":0.0018740000000000004},"no-prototype-builtins":{"total":0.001041},"no-regex-spaces":{"total":0.0024570000000000004},"no-self-assign":{"total":0.001084},"no-shadow-restricted-names":{"total":0.00225},"no-sparse-arrays":{"total":0.001958},"no-unsafe-finally":{"total":0.0015},"no-unsafe-optional-chaining":{"total":0.004293},"no-unused-labels":{"total":0.001292},"no-unused-private-class-members":{"total":0.001208},"no-useless-backreference":{"total":0.074792},"no-useless-catch":{"total":0.000917},"no-useless-escape":{"total":0.02375},"require-yield":{"total":0.001458},"use-isnan":{"total":0.001958},"valid-typeof":{"total":0.002376},"no-var":{"total":0.000708},"prefer-const":{"total":0.002251},"prefer-rest-params":{"total":0.000834},"prefer-spread":{"total":0.000584},"@typescript-eslint/ban-ts-comment":{"total":0.012957999999999999},"@typescript-eslint/no-array-constructor":{"total":0.002584},"@typescript-eslint/no-duplicate-enum-values":{"total":0.00225},"@typescript-eslint/no-empty-object-type":{"total":0.004375},"@typescript-eslint/no-explicit-any":{"total":0.002917},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001916},"@typescript-eslint/no-misused-new":{"total":0.002125},"@typescript-eslint/no-namespace":{"total":0.002417},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001959},"@typescript-eslint/no-this-alias":{"total":0.003959},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.007834},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.002042},"@typescript-eslint/no-unsafe-function-type":{"total":0.001792},"@typescript-eslint/no-unused-expressions":{"total":0.016625},"@typescript-eslint/no-unused-vars":{"total":0.694501},"@typescript-eslint/no-wrapper-object-types":{"total":0.002292},"@typescript-eslint/prefer-as-const":{"total":0.002667},"@typescript-eslint/prefer-namespace-keyword":{"total":0.002833},"@typescript-eslint/triple-slash-reference":{"total":0.036250000000000004},"@typescript-eslint/no-non-null-assertion":{"total":0.001334},"@typescript-eslint/adjacent-overload-signatures":{"total":0.009042},"@typescript-eslint/no-empty-function":{"total":0.006},"@typescript-eslint/no-inferrable-types":{"total":0.006042},"@typescript-eslint/no-empty-interface":{"total":0.002334}},"fix":{"total":0},"total":3.74325}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/mocks/fixtures/Trace-20250511T092530-sh.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.206542},"rules":{"@nx/dependency-checks":{"total":0.030709}},"fix":{"total":0},"total":1.099667}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/mocks/fixtures/Trace-20250523T183346.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":1583.495833},"rules":{"@nx/dependency-checks":{"total":0.074917}},"fix":{"total":0},"total":2321.487666}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/mocks/fixtures/Trace-20250523T185429-cleaned.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":1673.3009160000001},"rules":{"@nx/dependency-checks":{"total":0.064125}},"fix":{"total":0},"total":2201.905459}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/mocks/fixtures/minimal.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.521042},"rules":{"@nx/dependency-checks":{"total":0.016791}},"fix":{"total":0},"total":1.613}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/mocks/fixtures/minimal.reduced.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.377459},"rules":{"@nx/dependency-checks":{"total":0.02275}},"fix":{"total":0},"total":1.320917}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/mocks/fixtures/minimal.reduced.reduced.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.282875},"rules":{"@nx/dependency-checks":{"total":0.016209}},"fix":{"total":0},"total":1.216292}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/mocks/fixtures/short-trace.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":1672.912291},"rules":{"@nx/dependency-checks":{"total":0.073}},"fix":{"total":0},"total":2302.337875}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/mocks/fixtures/short-trace.reduced.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":161.102792},"rules":{"@nx/dependency-checks":{"total":0.068459}},"fix":{"total":0},"total":256.307417}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/mocks/program/child-process.mjs","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sum' is assigned a value but never used.","line":7,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":8}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"console.log(`PID ${process.pid}`);\n\n// Keep the process alive for a short duration to allow CPU profiling\n// Do some CPU work to ensure we get profile data\nlet sum = 0;\nfor (let i = 0; i < 1000000; i++) {\n    sum += Math.sqrt(i);\n}\nprocess.exit(0);","stats":{"times":{"passes":[{"parse":{"total":0.910167},"rules":{"for-direction":{"total":0.006959},"no-async-promise-executor":{"total":0.000833},"no-case-declarations":{"total":0.00075},"no-compare-neg-zero":{"total":0.05025},"no-cond-assign":{"total":0.002834},"no-constant-binary-expression":{"total":0.002458},"no-constant-condition":{"total":0.007251},"no-control-regex":{"total":0.001376},"no-debugger":{"total":0.000541},"no-delete-var":{"total":0.000542},"no-dupe-else-if":{"total":0.000875},"no-duplicate-case":{"total":0.000541},"no-empty":{"total":0.0015},"no-empty-character-class":{"total":0.0005},"no-empty-pattern":{"total":0.001},"no-empty-static-block":{"total":0.000542},"no-ex-assign":{"total":0.000584},"no-extra-boolean-cast":{"total":0.002333},"no-fallthrough":{"total":0.006916000000000002},"no-global-assign":{"total":0.019708},"no-invalid-regexp":{"total":0.001458},"no-irregular-whitespace":{"total":0.002626},"no-loss-of-precision":{"total":0.010624999999999999},"no-misleading-character-class":{"total":0.011332},"no-nonoctal-decimal-escape":{"total":0.001418},"no-octal":{"total":0.001624},"no-prototype-builtins":{"total":0.002542},"no-regex-spaces":{"total":0.007376},"no-self-assign":{"total":0.001458},"no-shadow-restricted-names":{"total":0.002082},"no-sparse-arrays":{"total":0.000541},"no-unsafe-finally":{"total":0.001125},"no-unsafe-optional-chaining":{"total":0.0063739999999999995},"no-unused-labels":{"total":0.001333},"no-unused-private-class-members":{"total":0.000958},"no-useless-backreference":{"total":0.003624},"no-useless-catch":{"total":0.000541},"no-useless-escape":{"total":0.0041670000000000006},"require-yield":{"total":0.001167},"use-isnan":{"total":0.007834},"valid-typeof":{"total":0.001958},"no-var":{"total":0.000917},"prefer-const":{"total":0.016083},"prefer-rest-params":{"total":0.000708},"prefer-spread":{"total":0.001874},"@typescript-eslint/ban-ts-comment":{"total":0.08570799999999999},"@typescript-eslint/no-array-constructor":{"total":0.003},"@typescript-eslint/no-duplicate-enum-values":{"total":0.00175},"@typescript-eslint/no-empty-object-type":{"total":0.003958},"@typescript-eslint/no-explicit-any":{"total":0.002375},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001625},"@typescript-eslint/no-misused-new":{"total":0.001583},"@typescript-eslint/no-namespace":{"total":0.002125},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001375},"@typescript-eslint/no-this-alias":{"total":0.002375},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.007208},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.0015},"@typescript-eslint/no-unsafe-function-type":{"total":0.0015},"@typescript-eslint/no-unused-expressions":{"total":0.019332},"@typescript-eslint/no-unused-vars":{"total":0.985375},"@typescript-eslint/no-wrapper-object-types":{"total":0.001917},"@typescript-eslint/prefer-as-const":{"total":0.0022500000000000003},"@typescript-eslint/prefer-namespace-keyword":{"total":0.001375},"@typescript-eslint/triple-slash-reference":{"total":0.008708},"@typescript-eslint/no-non-null-assertion":{"total":0.001125},"@typescript-eslint/adjacent-overload-signatures":{"total":0.005333},"@typescript-eslint/no-empty-function":{"total":0.005958},"@typescript-eslint/no-inferrable-types":{"total":0.006083},"@typescript-eslint/no-empty-interface":{"total":0.002167}},"fix":{"total":0},"total":4.470709}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/mocks/program/fork-children.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":2.579375},"rules":{"for-direction":{"total":0.004459},"no-async-promise-executor":{"total":0.000916},"no-case-declarations":{"total":0.001084},"no-compare-neg-zero":{"total":0.002624},"no-cond-assign":{"total":0.0033750000000000004},"no-constant-binary-expression":{"total":0.004041},"no-constant-condition":{"total":0.010042},"no-control-regex":{"total":0.006917},"no-debugger":{"total":0.000667},"no-delete-var":{"total":0.0009170000000000001},"no-dupe-else-if":{"total":0.003084},"no-duplicate-case":{"total":0.000667},"no-empty":{"total":0.002416},"no-empty-character-class":{"total":0.000583},"no-empty-pattern":{"total":0.001209},"no-empty-static-block":{"total":0.00075},"no-ex-assign":{"total":0.000625},"no-extra-boolean-cast":{"total":0.0047079999999999995},"no-fallthrough":{"total":0.013625000000000003},"no-global-assign":{"total":0.022124},"no-invalid-regexp":{"total":0.003833},"no-irregular-whitespace":{"total":0.005417},"no-loss-of-precision":{"total":0.018874000000000002},"no-misleading-character-class":{"total":0.016125},"no-nonoctal-decimal-escape":{"total":0.004126},"no-octal":{"total":0.0026260000000000003},"no-prototype-builtins":{"total":0.005626},"no-regex-spaces":{"total":0.015957000000000002},"no-self-assign":{"total":0.001042},"no-shadow-restricted-names":{"total":0.008166},"no-sparse-arrays":{"total":0.001417},"no-unsafe-finally":{"total":0.0015},"no-unsafe-optional-chaining":{"total":0.011787000000000004},"no-unused-labels":{"total":0.001167},"no-unused-private-class-members":{"total":0.001125},"no-useless-backreference":{"total":0.0085},"no-useless-catch":{"total":0.000542},"no-useless-escape":{"total":0.010289},"require-yield":{"total":0.00125},"use-isnan":{"total":0.005167},"valid-typeof":{"total":0.0027080000000000003},"no-var":{"total":0.002001},"prefer-const":{"total":0.00425},"prefer-rest-params":{"total":0.000834},"prefer-spread":{"total":0.004705000000000001},"@typescript-eslint/ban-ts-comment":{"total":0.075709},"@typescript-eslint/no-array-constructor":{"total":0.005792000000000001},"@typescript-eslint/no-duplicate-enum-values":{"total":0.002},"@typescript-eslint/no-empty-object-type":{"total":0.004458},"@typescript-eslint/no-explicit-any":{"total":0.00325},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001792},"@typescript-eslint/no-misused-new":{"total":0.001959},"@typescript-eslint/no-namespace":{"total":0.002667},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.0015},"@typescript-eslint/no-this-alias":{"total":0.003042},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.007583},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.002},"@typescript-eslint/no-unsafe-function-type":{"total":0.001709},"@typescript-eslint/no-unused-expressions":{"total":0.021709000000000006},"@typescript-eslint/no-unused-vars":{"total":0.713583},"@typescript-eslint/no-wrapper-object-types":{"total":0.002208},"@typescript-eslint/prefer-as-const":{"total":0.0035420000000000004},"@typescript-eslint/prefer-namespace-keyword":{"total":0.001625},"@typescript-eslint/triple-slash-reference":{"total":0.011750000000000002},"@typescript-eslint/no-non-null-assertion":{"total":0.001291},"@typescript-eslint/adjacent-overload-signatures":{"total":0.012000000000000002},"@typescript-eslint/no-empty-function":{"total":0.098876},"@typescript-eslint/no-inferrable-types":{"total":0.011876},"@typescript-eslint/no-empty-interface":{"total":0.002458}},"fix":{"total":0},"total":5.373584}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/mocks/program/simple-spawn-children.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.393083},"rules":{"for-direction":{"total":0.002333},"no-async-promise-executor":{"total":0.00125},"no-case-declarations":{"total":0.000708},"no-compare-neg-zero":{"total":0.001916},"no-cond-assign":{"total":0.002292},"no-constant-binary-expression":{"total":0.001334},"no-constant-condition":{"total":0.004667},"no-control-regex":{"total":0.000875},"no-debugger":{"total":0.000833},"no-delete-var":{"total":0.000584},"no-dupe-else-if":{"total":0.001208},"no-duplicate-case":{"total":0.000625},"no-empty":{"total":0.001584},"no-empty-character-class":{"total":0.000709},"no-empty-pattern":{"total":0.001125},"no-empty-static-block":{"total":0.000583},"no-ex-assign":{"total":0.00075},"no-extra-boolean-cast":{"total":0.001916},"no-fallthrough":{"total":0.006085},"no-global-assign":{"total":0.023417},"no-invalid-regexp":{"total":0.000916},"no-irregular-whitespace":{"total":0.002584},"no-loss-of-precision":{"total":0.000792},"no-misleading-character-class":{"total":0.10554300000000001},"no-nonoctal-decimal-escape":{"total":0.000667},"no-octal":{"total":0.000459},"no-prototype-builtins":{"total":0.001166},"no-regex-spaces":{"total":0.001},"no-self-assign":{"total":0.001166},"no-shadow-restricted-names":{"total":0.001167},"no-sparse-arrays":{"total":0.000833},"no-unsafe-finally":{"total":0.001375},"no-unsafe-optional-chaining":{"total":0.00375},"no-unused-labels":{"total":0.001416},"no-unused-private-class-members":{"total":0.001292},"no-useless-backreference":{"total":0.018542},"no-useless-catch":{"total":0.000625},"no-useless-escape":{"total":0.00225},"require-yield":{"total":0.001333},"use-isnan":{"total":0.001625},"valid-typeof":{"total":0.0022919999999999998},"no-var":{"total":0.00075},"prefer-const":{"total":0.002667},"prefer-rest-params":{"total":0.000792},"prefer-spread":{"total":0.0005},"@typescript-eslint/ban-ts-comment":{"total":0.011333000000000001},"@typescript-eslint/no-array-constructor":{"total":0.0025},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001833},"@typescript-eslint/no-empty-object-type":{"total":0.004375},"@typescript-eslint/no-explicit-any":{"total":0.00375},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001917},"@typescript-eslint/no-misused-new":{"total":0.002083},"@typescript-eslint/no-namespace":{"total":0.002666},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.00175},"@typescript-eslint/no-this-alias":{"total":0.002875},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.008833},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.002291},"@typescript-eslint/no-unsafe-function-type":{"total":0.001541},"@typescript-eslint/no-unused-expressions":{"total":0.014417},"@typescript-eslint/no-unused-vars":{"total":0.631875},"@typescript-eslint/no-wrapper-object-types":{"total":0.001917},"@typescript-eslint/prefer-as-const":{"total":0.002167},"@typescript-eslint/prefer-namespace-keyword":{"total":0.001541},"@typescript-eslint/triple-slash-reference":{"total":0.015042},"@typescript-eslint/no-non-null-assertion":{"total":0.00125},"@typescript-eslint/adjacent-overload-signatures":{"total":0.004416},"@typescript-eslint/no-empty-function":{"total":0.005875},"@typescript-eslint/no-inferrable-types":{"total":0.010667},"@typescript-eslint/no-empty-interface":{"total":0.002417}},"fix":{"total":0},"total":2.316417}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/mocks/program/spawn-children.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":3.519834},"rules":{"for-direction":{"total":0.0048330000000000005},"no-async-promise-executor":{"total":0.001041},"no-case-declarations":{"total":0.00075},"no-compare-neg-zero":{"total":0.0027080000000000003},"no-cond-assign":{"total":0.0036239999999999996},"no-constant-binary-expression":{"total":0.008792999999999999},"no-constant-condition":{"total":0.108458},"no-control-regex":{"total":0.007334},"no-debugger":{"total":0.00075},"no-delete-var":{"total":0.00075},"no-dupe-else-if":{"total":0.00125},"no-duplicate-case":{"total":0.000542},"no-empty":{"total":0.0027069999999999993},"no-empty-character-class":{"total":0.000625},"no-empty-pattern":{"total":0.001333},"no-empty-static-block":{"total":0.000834},"no-ex-assign":{"total":0.000667},"no-extra-boolean-cast":{"total":0.005790999999999999},"no-fallthrough":{"total":0.022419000000000012},"no-global-assign":{"total":0.084667},"no-invalid-regexp":{"total":0.008625999999999998},"no-irregular-whitespace":{"total":0.005999},"no-loss-of-precision":{"total":0.026376000000000004},"no-misleading-character-class":{"total":0.013458},"no-nonoctal-decimal-escape":{"total":0.006998999999999998},"no-octal":{"total":0.004956000000000002},"no-prototype-builtins":{"total":0.008124000000000001},"no-regex-spaces":{"total":0.02570900000000001},"no-self-assign":{"total":0.001208},"no-shadow-restricted-names":{"total":0.010918000000000004},"no-sparse-arrays":{"total":0.0023350000000000003},"no-unsafe-finally":{"total":0.001417},"no-unsafe-optional-chaining":{"total":0.019295000000000007},"no-unused-labels":{"total":0.001875},"no-unused-private-class-members":{"total":0.001375},"no-useless-backreference":{"total":0.0040409999999999995},"no-useless-catch":{"total":0.000542},"no-useless-escape":{"total":0.018584000000000003},"require-yield":{"total":0.001791},"use-isnan":{"total":0.004041},"valid-typeof":{"total":0.002083},"no-var":{"total":0.002082},"prefer-const":{"total":0.008418},"prefer-rest-params":{"total":0.002375},"prefer-spread":{"total":0.008251000000000001},"@typescript-eslint/ban-ts-comment":{"total":0.054458},"@typescript-eslint/no-array-constructor":{"total":0.006915},"@typescript-eslint/no-duplicate-enum-values":{"total":0.002291},"@typescript-eslint/no-empty-object-type":{"total":0.00475},"@typescript-eslint/no-explicit-any":{"total":0.002875},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001792},"@typescript-eslint/no-misused-new":{"total":0.00175},"@typescript-eslint/no-namespace":{"total":0.002292},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001417},"@typescript-eslint/no-this-alias":{"total":0.002583},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.006959},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001916},"@typescript-eslint/no-unsafe-function-type":{"total":0.00175},"@typescript-eslint/no-unused-expressions":{"total":0.024998000000000006},"@typescript-eslint/no-unused-vars":{"total":1.1657060000000001},"@typescript-eslint/no-wrapper-object-types":{"total":0.00225},"@typescript-eslint/prefer-as-const":{"total":0.003958},"@typescript-eslint/prefer-namespace-keyword":{"total":0.001667},"@typescript-eslint/triple-slash-reference":{"total":0.011794000000000002},"@typescript-eslint/no-non-null-assertion":{"total":0.001333},"@typescript-eslint/adjacent-overload-signatures":{"total":0.018002},"@typescript-eslint/no-empty-function":{"total":0.070913},"@typescript-eslint/no-inferrable-types":{"total":0.011877000000000002},"@typescript-eslint/no-empty-interface":{"total":0.0025}},"fix":{"total":0},"total":7.057792}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/mocks/program/worker-children.mjs","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'basename' is defined but never used.","line":2,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Worker } from \"worker_threads\";\nimport { join, dirname, basename } from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __dirname = dirname(fileURLToPath(import.meta.url));\nconst numWorkers = parseInt(process.argv[2], 10) || 2;\nconst workerScript = join(__dirname, 'child-process.mjs');\n\n// Get CPU profile directory from parent process\nconst cpuProfDir = process.execArgv.find(arg => arg.startsWith('--cpu-prof-dir=')).split('=')[1];\nconst cpuProfInterval = process.execArgv.find(arg => arg.startsWith('--cpu-prof-interval='))?.split('=')[1] || '100';\n\nconsole.log(`PID ${process.pid}; spawning ${numWorkers} workers, 3 times each at 100ms intervals`);\n\n/**\n * Creates a Worker Thread with V8 CPU profiling enabled.\n *\n * @param {Object} options\n * @param {number} [options.interval=10] - Sampling interval in microseconds\n * @param {string} [options.dir='.cpu-profiles'] - Output directory for .cpuprofile files\n */\nfunction createWorkerWithCPUProfile({\n  interval = 10,\n  dir = '.cpu-profiles'\n}) {\n  const execArgv = [\n    '--cpu-prof',\n    ...(dir ? [`--cpu-prof-dir=${dir}`] : []),\n    ...(interval ? [`--cpu-prof-interval=${interval}`] : [])\n  ];\n\n  const worker = new Worker(workerScript, {\n    execArgv,\n    stdout: true,\n    stderr: true\n  });\n\n  const workerId = worker.threadId;\n\n  worker.stdout.on('data', (data) => {\n    process.stdout.write(`Worker ${workerId}: ${data}`);\n  });\n\n  worker.stderr.on('data', (data) => {\n    process.stderr.write(`Worker ${workerId} error: ${data}`);\n  });\n\n  worker.on('exit', (code) => {\n    console.log(`Worker thread ${workerId} exited with code ${code}`);\n  });\n\n  worker.on('error', (err) => {\n    console.error(`Worker ${workerId} error:`, err);\n  });\n}\n\n// Start initial set of workers\nfor (let i = 0; i < numWorkers; i++) {\n    createWorkerWithCPUProfile({\n        ...(cpuProfDir ? { dir: cpuProfDir } : {}), \n        ...(cpuProfInterval ? { interval: cpuProfInterval } : {})\n    });\n}\n","stats":{"times":{"passes":[{"parse":{"total":3.512917},"rules":{"for-direction":{"total":0.005208000000000001},"no-async-promise-executor":{"total":0.001292},"no-case-declarations":{"total":0.001083},"no-compare-neg-zero":{"total":0.0029590000000000003},"no-cond-assign":{"total":0.003999},"no-constant-binary-expression":{"total":0.020002},"no-constant-condition":{"total":0.018167000000000003},"no-control-regex":{"total":0.007874},"no-debugger":{"total":0.000917},"no-delete-var":{"total":0.000791},"no-dupe-else-if":{"total":0.001708},"no-duplicate-case":{"total":0.00075},"no-empty":{"total":0.0031259999999999994},"no-empty-character-class":{"total":0.000875},"no-empty-pattern":{"total":0.003124},"no-empty-static-block":{"total":0.000834},"no-ex-assign":{"total":0.000667},"no-extra-boolean-cast":{"total":0.006792},"no-fallthrough":{"total":0.03020100000000001},"no-global-assign":{"total":0.027625},"no-invalid-regexp":{"total":0.005665000000000001},"no-irregular-whitespace":{"total":0.006500000000000001},"no-loss-of-precision":{"total":0.044958},"no-misleading-character-class":{"total":0.018126},"no-nonoctal-decimal-escape":{"total":0.008331000000000002},"no-octal":{"total":0.005750999999999999},"no-prototype-builtins":{"total":0.009500000000000001},"no-regex-spaces":{"total":0.03308500000000001},"no-self-assign":{"total":0.00325},"no-shadow-restricted-names":{"total":0.014626},"no-sparse-arrays":{"total":0.002251},"no-unsafe-finally":{"total":0.001375},"no-unsafe-optional-chaining":{"total":0.022044000000000008},"no-unused-labels":{"total":0.001708},"no-unused-private-class-members":{"total":0.001333},"no-useless-backreference":{"total":0.003875},"no-useless-catch":{"total":0.000625},"no-useless-escape":{"total":0.01829200000000001},"require-yield":{"total":0.001916},"use-isnan":{"total":0.0041670000000000006},"valid-typeof":{"total":0.0023339999999999997},"no-var":{"total":0.0027510000000000004},"prefer-const":{"total":0.006376},"prefer-rest-params":{"total":0.002916},"prefer-spread":{"total":0.008292},"@typescript-eslint/ban-ts-comment":{"total":0.074541},"@typescript-eslint/no-array-constructor":{"total":0.008499},"@typescript-eslint/no-duplicate-enum-values":{"total":0.002292},"@typescript-eslint/no-empty-object-type":{"total":0.005209},"@typescript-eslint/no-explicit-any":{"total":0.003667},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001959},"@typescript-eslint/no-misused-new":{"total":0.002083},"@typescript-eslint/no-namespace":{"total":0.002958},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001667},"@typescript-eslint/no-this-alias":{"total":0.004667},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.01075},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001916},"@typescript-eslint/no-unsafe-function-type":{"total":0.003417},"@typescript-eslint/no-unused-expressions":{"total":0.026919000000000005},"@typescript-eslint/no-unused-vars":{"total":0.906166},"@typescript-eslint/no-wrapper-object-types":{"total":0.002125},"@typescript-eslint/prefer-as-const":{"total":0.009084},"@typescript-eslint/prefer-namespace-keyword":{"total":0.001875},"@typescript-eslint/triple-slash-reference":{"total":0.090709},"@typescript-eslint/no-non-null-assertion":{"total":0.001375},"@typescript-eslint/adjacent-overload-signatures":{"total":0.01575},"@typescript-eslint/no-empty-function":{"total":0.14945799999999998},"@typescript-eslint/no-inferrable-types":{"total":0.045625000000000006},"@typescript-eslint/no-empty-interface":{"total":0.002583}},"fix":{"total":0},"total":7.115}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/package.json","messages":[{"ruleId":"@nx/dependency-checks","severity":2,"message":"The \"cpu-profiling\" project uses the following packages, but they are missing from \"dependencies\":\n    - yargs","line":27,"column":3,"nodeType":"JSONProperty","messageId":"missingDependency","endLine":27,"endColumn":21,"fix":{"range":[590,590],"text":"\n    \"yargs\": \"^17.7.2\"\n  "}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"{\n  \"name\": \"@push-based/cpu-profiling\",\n  \"version\": \"0.0.1\",\n  \"type\": \"module\",\n  \"main\": \"./dist/index.esm.js\",\n  \"module\": \"./dist/index.esm.js\",\n  \"types\": \"./dist/index.esm.d.ts\",\n  \"exports\": {\n    \"./package.json\": \"./package.json\",\n    \".\": {\n      \"development\": \"./src/index.ts\",\n      \"types\": \"./dist/index.esm.d.ts\",\n      \"import\": \"./dist/index.esm.js\",\n      \"default\": \"./dist/index.esm.js\"\n    }\n  },\n  \"bin\": {\n    \"@push-based/cpu-profiling\": \"./dist/profiling.esm.js\"\n  },\n  \"scripts\": {\n\n  },\n  \"files\": [\n    \"dist\",\n    \"!**/*.tsbuildinfo\"\n  ],\n  \"dependencies\": {},\n  \"nx\": {\n    \"name\": \"cpu-profiling\",\n    \"targets\": {\n      \"measure\": {\n        \"command\": \"node --cpu-prof --cpu-prof-dir profiles\"\n      },\n      \"merge\": {\n        \"dependsOn\": [\"build\"],\n        \"command\": \"node packages/cpu-profiling/dist/profiling.esm.js cpu-merge --cpu-profiles\"\n      },\n      \"cpu-prof-cli\": {\n        \"dependsOn\": [\"build\"],\n        \"executor\": \"nx:run-commands\",\n        \"options\": {\n          \"command\": \"node packages/cpu-profiling/dist/profiling.esm.js --help\"\n        },\n        \"configurations\": {\n          \"help\": {\n            \"command\": \"node packages/cpu-profiling/dist/profiling.esm.js --help\"\n          },\n          \"reduce\": {\n            \"command\": \"node packages/cpu-profiling/dist/profiling.esm.js trace-reduce\"\n          },\n          \"cpu-merg\": {\n            \"command\": \"node packages/cpu-profiling/dist/profiling.esm.js cpu-merge\"\n          }\n        }\n      }\n    }\n  }\n}\n","stats":{"times":{"passes":[{"parse":{"total":0.294334},"rules":{"@nx/dependency-checks":{"total":42.485249}},"fix":{"total":0},"total":44.063417}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/packages/cpu-profiling/lint-stats.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":44.566209},"rules":{"@nx/dependency-checks":{"total":0.049875}},"fix":{"total":0},"total":56.570625}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/rollup.config.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":1.116708},"rules":{"for-direction":{"total":0.003708},"no-async-promise-executor":{"total":0.001125},"no-case-declarations":{"total":0.000916},"no-compare-neg-zero":{"total":0.002416},"no-cond-assign":{"total":0.002417},"no-constant-binary-expression":{"total":0.002},"no-constant-condition":{"total":0.07625},"no-control-regex":{"total":0.004247},"no-debugger":{"total":0.000875},"no-delete-var":{"total":0.000875},"no-dupe-else-if":{"total":0.002},"no-duplicate-case":{"total":0.00125},"no-empty":{"total":0.001584},"no-empty-character-class":{"total":0.000791},"no-empty-pattern":{"total":0.001291},"no-empty-static-block":{"total":0.001125},"no-ex-assign":{"total":0.001041},"no-extra-boolean-cast":{"total":0.003084},"no-fallthrough":{"total":0.007416},"no-global-assign":{"total":0.021959},"no-invalid-regexp":{"total":0.00175},"no-irregular-whitespace":{"total":0.0037920000000000002},"no-loss-of-precision":{"total":0.003416000000000001},"no-misleading-character-class":{"total":0.013168},"no-nonoctal-decimal-escape":{"total":0.0045839999999999995},"no-octal":{"total":0.002583000000000001},"no-prototype-builtins":{"total":0.002124},"no-regex-spaces":{"total":0.006419},"no-self-assign":{"total":0.0037500000000000003},"no-shadow-restricted-names":{"total":0.00275},"no-sparse-arrays":{"total":0.001624},"no-unsafe-finally":{"total":0.001834},"no-unsafe-optional-chaining":{"total":0.078959},"no-unused-labels":{"total":0.002875},"no-unused-private-class-members":{"total":0.001583},"no-useless-backreference":{"total":0.004666},"no-useless-catch":{"total":0.000792},"no-useless-escape":{"total":0.006123999999999998},"require-yield":{"total":0.002042},"use-isnan":{"total":0.002458},"valid-typeof":{"total":0.00325},"no-var":{"total":0.001417},"prefer-const":{"total":0.061625},"prefer-rest-params":{"total":0.002042},"prefer-spread":{"total":0.001915},"@typescript-eslint/ban-ts-comment":{"total":0.014959},"@typescript-eslint/no-array-constructor":{"total":0.0035819999999999997},"@typescript-eslint/no-duplicate-enum-values":{"total":0.002292},"@typescript-eslint/no-empty-object-type":{"total":0.0045},"@typescript-eslint/no-explicit-any":{"total":0.003375},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.002459},"@typescript-eslint/no-misused-new":{"total":0.002583},"@typescript-eslint/no-namespace":{"total":0.00275},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001958},"@typescript-eslint/no-this-alias":{"total":0.00275},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.014042},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.002458},"@typescript-eslint/no-unsafe-function-type":{"total":0.002375},"@typescript-eslint/no-unused-expressions":{"total":0.022084},"@typescript-eslint/no-unused-vars":{"total":1.850417},"@typescript-eslint/no-wrapper-object-types":{"total":0.003},"@typescript-eslint/prefer-as-const":{"total":0.002875},"@typescript-eslint/prefer-namespace-keyword":{"total":0.00175},"@typescript-eslint/triple-slash-reference":{"total":0.082084},"@typescript-eslint/no-non-null-assertion":{"total":0.002625},"@typescript-eslint/adjacent-overload-signatures":{"total":0.005083},"@typescript-eslint/no-empty-function":{"total":0.006666},"@typescript-eslint/no-inferrable-types":{"total":0.010833},"@typescript-eslint/no-empty-interface":{"total":0.002291}},"fix":{"total":0},"total":4.644541}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/bin/profiling.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":1.099625},"rules":{"for-direction":{"total":0.003292},"no-async-promise-executor":{"total":0.000333},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.0017079999999999999},"no-cond-assign":{"total":0.004792},"no-constant-binary-expression":{"total":0.006291},"no-constant-condition":{"total":0.0034159999999999998},"no-control-regex":{"total":0.0018759999999999998},"no-debugger":{"total":0.000292},"no-delete-var":{"total":0.00025},"no-dupe-else-if":{"total":0.0028339999999999997},"no-duplicate-case":{"total":0.000875},"no-empty":{"total":0.0027069999999999998},"no-empty-character-class":{"total":0.000292},"no-empty-pattern":{"total":0.001542},"no-empty-static-block":{"total":0.001042},"no-ex-assign":{"total":0.000875},"no-extra-boolean-cast":{"total":0.0035830000000000002},"no-fallthrough":{"total":0.006791},"no-global-assign":{"total":0.022918},"no-invalid-regexp":{"total":0.0034579999999999997},"no-irregular-whitespace":{"total":0.008333},"no-loss-of-precision":{"total":0.013791000000000001},"no-misleading-character-class":{"total":0.012459},"no-nonoctal-decimal-escape":{"total":0.002167},"no-octal":{"total":0.0019160000000000002},"no-prototype-builtins":{"total":0.003},"no-regex-spaces":{"total":0.007626000000000001},"no-self-assign":{"total":0.002},"no-shadow-restricted-names":{"total":0.004333},"no-sparse-arrays":{"total":0.0005},"no-unsafe-finally":{"total":0.000375},"no-unsafe-optional-chaining":{"total":0.006081999999999999},"no-unused-labels":{"total":0.001125},"no-unused-private-class-members":{"total":0.0005},"no-useless-backreference":{"total":0.003791},"no-useless-catch":{"total":0.000292},"no-useless-escape":{"total":0.004124999999999999},"require-yield":{"total":0.000459},"use-isnan":{"total":0.006458},"valid-typeof":{"total":0.0024999999999999996},"no-var":{"total":0.001415},"prefer-const":{"total":0.0028340000000000006},"prefer-rest-params":{"total":0.000916},"prefer-spread":{"total":0.0029570000000000004},"@typescript-eslint/ban-ts-comment":{"total":0.013041},"@typescript-eslint/no-array-constructor":{"total":0.0037500000000000003},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001458},"@typescript-eslint/no-empty-object-type":{"total":0.004375},"@typescript-eslint/no-explicit-any":{"total":0.003084},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001},"@typescript-eslint/no-misused-new":{"total":0.001125},"@typescript-eslint/no-namespace":{"total":0.002709},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001084},"@typescript-eslint/no-this-alias":{"total":0.002667},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.00525},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001458},"@typescript-eslint/no-unsafe-function-type":{"total":0.0016250000000000001},"@typescript-eslint/no-unused-expressions":{"total":0.012416},"@typescript-eslint/no-unused-vars":{"total":0.6097090000000001},"@typescript-eslint/no-wrapper-object-types":{"total":0.0021669999999999997},"@typescript-eslint/prefer-as-const":{"total":0.002542},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000959},"@typescript-eslint/triple-slash-reference":{"total":0.012541},"@typescript-eslint/no-non-null-assertion":{"total":0.001125},"@typescript-eslint/adjacent-overload-signatures":{"total":0.00579},"@typescript-eslint/no-empty-function":{"total":0.013375999999999999},"@typescript-eslint/no-inferrable-types":{"total":0.005667},"@typescript-eslint/no-empty-interface":{"total":0.0025},"@nx/enforce-module-boundaries":{"total":0.05246}},"fix":{"total":0},"total":3.007667}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/cli/commands/cpu-merge/args-processor.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'inputDir' is never reassigned. Use 'const' instead.","line":9,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":9,"endColumn":17,"fix":{"range":[271,315],"text":"const { inputDir, outputDir, verbose } = argv;"}},{"ruleId":"prefer-const","severity":2,"message":"'outputDir' is never reassigned. Use 'const' instead.","line":9,"column":19,"nodeType":"Identifier","messageId":"useConst","endLine":9,"endColumn":28,"fix":{"range":[271,315],"text":"const { inputDir, outputDir, verbose } = argv;"}},{"ruleId":"prefer-const","severity":2,"message":"'verbose' is never reassigned. Use 'const' instead.","line":9,"column":30,"nodeType":"Identifier","messageId":"useConst","endLine":9,"endColumn":37,"fix":{"range":[271,315],"text":"const { inputDir, outputDir, verbose } = argv;"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import path from 'path';\nimport { isAbsolute, join } from 'node:path';\nimport type { MergeArgs, ProcessedMergeArgs } from './types';\n\n/**\n * Process and validate CLI arguments for the merge command\n */\nexport function processArgs(argv: MergeArgs): ProcessedMergeArgs {\n  let { inputDir, outputDir, verbose } = argv;\n\n  if (!inputDir) {\n    // Should be caught by yargs due to <inputDir> being required (demandOption)\n    // and builder.ts check\n    throw new Error('Input directory is required and was not provided.');\n  }\n\n  const resolvedInputDir = isAbsolute(inputDir)\n    ? inputDir\n    : join(process.cwd(), inputDir);\n\n  let resolvedOutputDir: string;\n  if (!outputDir) {\n    resolvedOutputDir = join(resolvedInputDir, 'merged-profile.json');\n  } else {\n    // If outputDir is provided, resolve it relative to cwd if it's not absolute\n    resolvedOutputDir = isAbsolute(outputDir)\n      ? outputDir\n      : join(process.cwd(), outputDir);\n  }\n\n  // outputDir is a file path, not a directory path for the output.\n  // The actual directory where the file will be saved is derived from it.\n  const actualOutputDirectoryPath = path.dirname(resolvedOutputDir);\n\n  if (verbose) {\n    console.log(`🔧 CPU Profile Merge Mode:`);\n    console.log(`  📁 Input directory: ${resolvedInputDir}`);\n    console.log(`  📁 Output file path: ${resolvedOutputDir}`);\n    console.log(`  mkdir -p for: ${actualOutputDirectoryPath}`);\n  }\n\n  return {\n    inputDir: resolvedInputDir,\n    outputDir: resolvedOutputDir,\n    verbose: verbose || false,\n  };\n}\n","stats":{"times":{"passes":[{"parse":{"total":2.622375},"rules":{"for-direction":{"total":0.002708},"no-async-promise-executor":{"total":0.00125},"no-case-declarations":{"total":0.001125},"no-compare-neg-zero":{"total":0.002375},"no-cond-assign":{"total":0.0037929999999999995},"no-constant-binary-expression":{"total":0.002626},"no-constant-condition":{"total":0.013917},"no-control-regex":{"total":0.004749000000000001},"no-debugger":{"total":0.001125},"no-delete-var":{"total":0.0015409999999999998},"no-dupe-else-if":{"total":0.076875},"no-duplicate-case":{"total":0.00125},"no-empty":{"total":0.0027069999999999998},"no-empty-character-class":{"total":0.000958},"no-empty-pattern":{"total":0.001418},"no-empty-static-block":{"total":0.001208},"no-ex-assign":{"total":0.000875},"no-extra-boolean-cast":{"total":0.005126},"no-fallthrough":{"total":0.012962000000000003},"no-global-assign":{"total":0.0235},"no-invalid-regexp":{"total":0.003333000000000001},"no-irregular-whitespace":{"total":0.004374},"no-loss-of-precision":{"total":0.002832},"no-misleading-character-class":{"total":0.016166},"no-nonoctal-decimal-escape":{"total":0.005709},"no-octal":{"total":0.001915},"no-prototype-builtins":{"total":0.005332},"no-regex-spaces":{"total":0.013959},"no-self-assign":{"total":0.003958000000000001},"no-shadow-restricted-names":{"total":0.077002},"no-sparse-arrays":{"total":0.001417},"no-unsafe-finally":{"total":0.011123999999999998},"no-unsafe-optional-chaining":{"total":0.010086000000000003},"no-unused-labels":{"total":0.001875},"no-unused-private-class-members":{"total":0.001666},"no-useless-backreference":{"total":0.004209},"no-useless-catch":{"total":0.000875},"no-useless-escape":{"total":0.009164},"require-yield":{"total":0.002125},"use-isnan":{"total":0.001791},"valid-typeof":{"total":0.003458},"no-var":{"total":0.001958},"prefer-const":{"total":0.316915},"prefer-rest-params":{"total":0.002959},"prefer-spread":{"total":0.004292000000000001},"@typescript-eslint/ban-ts-comment":{"total":0.028208},"@typescript-eslint/no-array-constructor":{"total":0.075959},"@typescript-eslint/no-duplicate-enum-values":{"total":0.003},"@typescript-eslint/no-empty-object-type":{"total":0.005292},"@typescript-eslint/no-explicit-any":{"total":0.003459},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.002417},"@typescript-eslint/no-misused-new":{"total":0.002459},"@typescript-eslint/no-namespace":{"total":0.002667},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.002125},"@typescript-eslint/no-this-alias":{"total":0.002917},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.008875},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.002041},"@typescript-eslint/no-unsafe-function-type":{"total":0.003791},"@typescript-eslint/no-unused-expressions":{"total":0.113832},"@typescript-eslint/no-unused-vars":{"total":0.76625},"@typescript-eslint/no-wrapper-object-types":{"total":0.004209},"@typescript-eslint/prefer-as-const":{"total":0.0031669999999999997},"@typescript-eslint/prefer-namespace-keyword":{"total":0.00175},"@typescript-eslint/triple-slash-reference":{"total":0.013709},"@typescript-eslint/no-non-null-assertion":{"total":0.001625},"@typescript-eslint/adjacent-overload-signatures":{"total":0.015625999999999998},"@typescript-eslint/no-empty-function":{"total":0.043958},"@typescript-eslint/no-inferrable-types":{"total":0.16258199999999998},"@typescript-eslint/no-empty-interface":{"total":0.003292},"@nx/enforce-module-boundaries":{"total":0.349625}},"fix":{"total":0},"total":6.291791}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/cli/commands/cpu-merge/builder.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fileExists' is defined but never used.","line":3,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isJsonFile' is defined but never used.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Argv } from 'yargs';\nimport {\n  fileExists,\n  isJsonFile,\n  directoryExists,\n} from '../../../lib/file-utils';\nimport type { MergeArgs } from './types';\n\n/**\n * Build the yargs command configuration for merge\n */\nexport function builder(yargs: Argv): Argv<MergeArgs> {\n  return yargs\n    .positional('inputDir', {\n      describe: 'Directory containing CPU profile files to merge',\n      type: 'string',\n      normalize: true,\n      demandOption: true,\n    })\n    .group(['help', 'verbose', 'output'], 'Basic Options:')\n    .option('outputDir', {\n      alias: 'o',\n      describe:\n        'Output file path for merged trace. Defaults to inputDir/merged-profile.json if not specified.',\n      type: 'string',\n      normalize: true,\n    })\n    .option('verbose', {\n      alias: 'v',\n      describe: 'Enable verbose logging',\n      type: 'boolean',\n      default: false,\n    })\n\n    .example(\n      '$0 cpu-merge ./path/to/profiles',\n      'Merge all profiles from a directory'\n    )\n    .epilog(``)\n\n    .check((argv) => {\n      const inputDirectory = argv.inputDir as string | undefined;\n\n      if (!inputDirectory) {\n        throw new Error('Input directory is required.');\n      }\n\n      if (inputDirectory && !directoryExists(inputDirectory)) {\n        throw new Error(`Input directory does not exist: ${inputDirectory}`);\n      }\n\n      return true;\n    });\n}\n","stats":{"times":{"passes":[{"parse":{"total":1.801292},"rules":{"for-direction":{"total":0.004166},"no-async-promise-executor":{"total":0.00075},"no-case-declarations":{"total":0.000625},"no-compare-neg-zero":{"total":0.001417},"no-cond-assign":{"total":0.0037489999999999997},"no-constant-binary-expression":{"total":0.0032500000000000003},"no-constant-condition":{"total":0.014541},"no-control-regex":{"total":0.0063719999999999975},"no-debugger":{"total":0.000625},"no-delete-var":{"total":0.0009989999999999999},"no-dupe-else-if":{"total":0.011334},"no-duplicate-case":{"total":0.001333},"no-empty":{"total":0.0032500000000000003},"no-empty-character-class":{"total":0.000541},"no-empty-pattern":{"total":0.067},"no-empty-static-block":{"total":0.001792},"no-ex-assign":{"total":0.001292},"no-extra-boolean-cast":{"total":0.007459999999999999},"no-fallthrough":{"total":0.016956000000000006},"no-global-assign":{"total":0.022958000000000003},"no-invalid-regexp":{"total":0.0031240000000000005},"no-irregular-whitespace":{"total":0.005332999999999999},"no-loss-of-precision":{"total":0.0047500000000000025},"no-misleading-character-class":{"total":0.012416},"no-nonoctal-decimal-escape":{"total":0.005999999999999999},"no-octal":{"total":0.0035410000000000016},"no-prototype-builtins":{"total":0.004043000000000001},"no-regex-spaces":{"total":0.016210000000000002},"no-self-assign":{"total":0.001334},"no-shadow-restricted-names":{"total":0.005293},"no-sparse-arrays":{"total":0.0012929999999999999},"no-unsafe-finally":{"total":0.077917},"no-unsafe-optional-chaining":{"total":0.012124000000000001},"no-unused-labels":{"total":0.001958},"no-unused-private-class-members":{"total":0.000875},"no-useless-backreference":{"total":0.004167},"no-useless-catch":{"total":0.000583},"no-useless-escape":{"total":0.011500000000000002},"require-yield":{"total":0.001583},"use-isnan":{"total":0.004834},"valid-typeof":{"total":0.00725},"no-var":{"total":0.0014169999999999999},"prefer-const":{"total":0.004416},"prefer-rest-params":{"total":0.002542},"prefer-spread":{"total":0.0039180000000000005},"@typescript-eslint/ban-ts-comment":{"total":0.011581999999999999},"@typescript-eslint/no-array-constructor":{"total":0.005043},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001833},"@typescript-eslint/no-empty-object-type":{"total":0.059458},"@typescript-eslint/no-explicit-any":{"total":0.005917},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001833},"@typescript-eslint/no-misused-new":{"total":0.001791},"@typescript-eslint/no-namespace":{"total":0.003167},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.0015},"@typescript-eslint/no-this-alias":{"total":0.003},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.00625},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001584},"@typescript-eslint/no-unsafe-function-type":{"total":0.0037080000000000004},"@typescript-eslint/no-unused-expressions":{"total":0.01475},"@typescript-eslint/no-unused-vars":{"total":0.730333},"@typescript-eslint/no-wrapper-object-types":{"total":0.003791},"@typescript-eslint/prefer-as-const":{"total":0.009626},"@typescript-eslint/prefer-namespace-keyword":{"total":0.00125},"@typescript-eslint/triple-slash-reference":{"total":0.013583000000000001},"@typescript-eslint/no-non-null-assertion":{"total":0.001417},"@typescript-eslint/adjacent-overload-signatures":{"total":0.011334},"@typescript-eslint/no-empty-function":{"total":0.055458},"@typescript-eslint/no-inferrable-types":{"total":0.007083000000000001},"@typescript-eslint/no-empty-interface":{"total":0.002917},"@nx/enforce-module-boundaries":{"total":0.6009990000000001}},"fix":{"total":0},"total":4.892084}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/cli/commands/cpu-merge/handler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":2.05025},"rules":{"for-direction":{"total":0.003625},"no-async-promise-executor":{"total":0.000292},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.0017079999999999999},"no-cond-assign":{"total":0.081666},"no-constant-binary-expression":{"total":0.007542},"no-constant-condition":{"total":0.023749000000000003},"no-control-regex":{"total":0.004582000000000001},"no-debugger":{"total":0.000292},"no-delete-var":{"total":0.000708},"no-dupe-else-if":{"total":0.030833},"no-duplicate-case":{"total":0.005333},"no-empty":{"total":0.015666},"no-empty-character-class":{"total":0.0005},"no-empty-pattern":{"total":0.004624},"no-empty-static-block":{"total":0.00125},"no-ex-assign":{"total":0.003708},"no-extra-boolean-cast":{"total":0.007873999999999999},"no-fallthrough":{"total":0.01687600000000001},"no-global-assign":{"total":0.03075},"no-invalid-regexp":{"total":0.006665000000000001},"no-irregular-whitespace":{"total":0.007875},"no-loss-of-precision":{"total":0.012083000000000002},"no-misleading-character-class":{"total":0.017417},"no-nonoctal-decimal-escape":{"total":0.004459},"no-octal":{"total":0.003166000000000001},"no-prototype-builtins":{"total":0.006331999999999999},"no-regex-spaces":{"total":0.018831},"no-self-assign":{"total":0.003709},"no-shadow-restricted-names":{"total":0.010000999999999998},"no-sparse-arrays":{"total":0.000333},"no-unsafe-finally":{"total":0.003333},"no-unsafe-optional-chaining":{"total":0.012082000000000002},"no-unused-labels":{"total":0.001083},"no-unused-private-class-members":{"total":0.000375},"no-useless-backreference":{"total":0.004168},"no-useless-catch":{"total":0.001},"no-useless-escape":{"total":0.011625000000000002},"require-yield":{"total":0.001126},"use-isnan":{"total":0.005457999999999999},"valid-typeof":{"total":0.003751},"no-var":{"total":0.002043},"prefer-const":{"total":0.004707},"prefer-rest-params":{"total":0.007666},"prefer-spread":{"total":0.005376000000000001},"@typescript-eslint/ban-ts-comment":{"total":0.026833000000000003},"@typescript-eslint/no-array-constructor":{"total":0.005665},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001459},"@typescript-eslint/no-empty-object-type":{"total":0.009834},"@typescript-eslint/no-explicit-any":{"total":0.004709},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001292},"@typescript-eslint/no-misused-new":{"total":0.001167},"@typescript-eslint/no-namespace":{"total":0.005167},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001375},"@typescript-eslint/no-this-alias":{"total":0.005334},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.009},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001542},"@typescript-eslint/no-unsafe-function-type":{"total":0.0036260000000000003},"@typescript-eslint/no-unused-expressions":{"total":0.020626000000000005},"@typescript-eslint/no-unused-vars":{"total":3.015292},"@typescript-eslint/no-wrapper-object-types":{"total":0.003583},"@typescript-eslint/prefer-as-const":{"total":0.0029170000000000003},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000916},"@typescript-eslint/triple-slash-reference":{"total":0.014831},"@typescript-eslint/no-non-null-assertion":{"total":0.001083},"@typescript-eslint/adjacent-overload-signatures":{"total":0.017209},"@typescript-eslint/no-empty-function":{"total":0.050667000000000004},"@typescript-eslint/no-inferrable-types":{"total":0.007292},"@typescript-eslint/no-empty-interface":{"total":0.004458},"@nx/enforce-module-boundaries":{"total":0.20758500000000002}},"fix":{"total":0},"total":7.254667}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/cli/commands/cpu-merge/index.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":9,"column":42,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":9,"endColumn":44,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[244,246],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[244,246],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { CommandModule } from 'yargs';\nimport type { MergeArgs } from './types';\nimport { builder } from './builder';\nimport { handler } from './handler';\n\n/**\n * Merge command module for yargs\n */\nexport const mergeCommand: CommandModule<{}, MergeArgs> = {\n  command: 'cpu-merge <inputDir>',\n  describe:\n    'Merge multiple Chrome DevTools trace files or CPU profile files into a single file',\n  builder,\n  handler,\n};\n\nexport default mergeCommand;\n\n// Re-export types and utilities for external use\nexport type { MergeArgs, ProcessedMergeArgs } from './types';\nexport { processArgs } from './args-processor';\n","stats":{"times":{"passes":[{"parse":{"total":1.073208},"rules":{"for-direction":{"total":0.0035},"no-async-promise-executor":{"total":0.000292},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.001042},"no-cond-assign":{"total":0.002333},"no-constant-binary-expression":{"total":0.001708},"no-constant-condition":{"total":0.002542},"no-control-regex":{"total":0.0022479999999999996},"no-debugger":{"total":0.000208},"no-delete-var":{"total":0.000208},"no-dupe-else-if":{"total":0.001375},"no-duplicate-case":{"total":0.001625},"no-empty":{"total":0.001708},"no-empty-character-class":{"total":0.000208},"no-empty-pattern":{"total":0.001166},"no-empty-static-block":{"total":0.001084},"no-ex-assign":{"total":0.001083},"no-extra-boolean-cast":{"total":0.0025},"no-fallthrough":{"total":0.0038319999999999995},"no-global-assign":{"total":0.019917},"no-invalid-regexp":{"total":0.0025},"no-irregular-whitespace":{"total":0.003625},"no-loss-of-precision":{"total":0.0017930000000000008},"no-misleading-character-class":{"total":0.011042},"no-nonoctal-decimal-escape":{"total":0.002625},"no-octal":{"total":0.001291},"no-prototype-builtins":{"total":0.000458},"no-regex-spaces":{"total":0.0025830000000000007},"no-self-assign":{"total":0.001625},"no-shadow-restricted-names":{"total":0.0037080000000000004},"no-sparse-arrays":{"total":0.00025},"no-unsafe-finally":{"total":0.000292},"no-unsafe-optional-chaining":{"total":0.002209},"no-unused-labels":{"total":0.00125},"no-unused-private-class-members":{"total":0.000375},"no-useless-backreference":{"total":0.004},"no-useless-catch":{"total":0.000208},"no-useless-escape":{"total":0.0047480000000000005},"require-yield":{"total":0.000333},"use-isnan":{"total":0.002125},"valid-typeof":{"total":0.0026260000000000003},"no-var":{"total":0.001292},"prefer-const":{"total":0.0025009999999999998},"prefer-rest-params":{"total":0.001166},"prefer-spread":{"total":0.001084},"@typescript-eslint/ban-ts-comment":{"total":0.010792},"@typescript-eslint/no-array-constructor":{"total":0.002625},"@typescript-eslint/no-duplicate-enum-values":{"total":0.00125},"@typescript-eslint/no-empty-object-type":{"total":0.150917},"@typescript-eslint/no-explicit-any":{"total":0.002625},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001083},"@typescript-eslint/no-misused-new":{"total":0.002125},"@typescript-eslint/no-namespace":{"total":0.002167},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001083},"@typescript-eslint/no-this-alias":{"total":0.002167},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.005459},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001375},"@typescript-eslint/no-unsafe-function-type":{"total":0.002},"@typescript-eslint/no-unused-expressions":{"total":0.008875},"@typescript-eslint/no-unused-vars":{"total":0.645291},"@typescript-eslint/no-wrapper-object-types":{"total":0.0032909999999999997},"@typescript-eslint/prefer-as-const":{"total":0.0018759999999999998},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000959},"@typescript-eslint/triple-slash-reference":{"total":0.008877000000000003},"@typescript-eslint/no-non-null-assertion":{"total":0.000875},"@typescript-eslint/adjacent-overload-signatures":{"total":0.008001000000000001},"@typescript-eslint/no-empty-function":{"total":0.005834},"@typescript-eslint/no-inferrable-types":{"total":0.0067090000000000006},"@typescript-eslint/no-empty-interface":{"total":0.001791},"@nx/enforce-module-boundaries":{"total":0.09420899999999999}},"fix":{"total":0},"total":3.10725}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/cli/commands/cpu-merge/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.758083},"rules":{"for-direction":{"total":0.001875},"no-async-promise-executor":{"total":0.000292},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.000833},"no-cond-assign":{"total":0.0025},"no-constant-binary-expression":{"total":0.000333},"no-constant-condition":{"total":0.002917},"no-control-regex":{"total":0.00025},"no-debugger":{"total":0.000292},"no-delete-var":{"total":0.000208},"no-dupe-else-if":{"total":0.000375},"no-duplicate-case":{"total":0.00025},"no-empty":{"total":0.001583},"no-empty-character-class":{"total":0.00025},"no-empty-pattern":{"total":0.001},"no-empty-static-block":{"total":0.000334},"no-ex-assign":{"total":0.000291},"no-extra-boolean-cast":{"total":0.002708},"no-fallthrough":{"total":0.004084},"no-global-assign":{"total":0.019834},"no-invalid-regexp":{"total":0.003708},"no-irregular-whitespace":{"total":0.003084},"no-loss-of-precision":{"total":0.000625},"no-misleading-character-class":{"total":0.008791},"no-nonoctal-decimal-escape":{"total":0.00025},"no-octal":{"total":0.000208},"no-prototype-builtins":{"total":0.000417},"no-regex-spaces":{"total":0.000333},"no-self-assign":{"total":0.001625},"no-shadow-restricted-names":{"total":0.000584},"no-sparse-arrays":{"total":0.00025},"no-unsafe-finally":{"total":0.000291},"no-unsafe-optional-chaining":{"total":0.001709},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.000375},"no-useless-backreference":{"total":0.003167},"no-useless-catch":{"total":0.000333},"no-useless-escape":{"total":0.000958},"require-yield":{"total":0.000291},"use-isnan":{"total":0.002625},"valid-typeof":{"total":0.002834},"no-var":{"total":0.000375},"prefer-const":{"total":0.002417},"prefer-rest-params":{"total":0.000292},"prefer-spread":{"total":0.00025},"@typescript-eslint/ban-ts-comment":{"total":0.005625},"@typescript-eslint/no-array-constructor":{"total":0.00125},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000958},"@typescript-eslint/no-empty-object-type":{"total":0.044000000000000004},"@typescript-eslint/no-explicit-any":{"total":0.002291},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000917},"@typescript-eslint/no-misused-new":{"total":0.001083},"@typescript-eslint/no-namespace":{"total":0.001958},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000917},"@typescript-eslint/no-this-alias":{"total":0.001833},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.00375},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.023332000000000002},"@typescript-eslint/no-unsafe-function-type":{"total":0.001},"@typescript-eslint/no-unused-expressions":{"total":0.007},"@typescript-eslint/no-unused-vars":{"total":0.5465829999999999},"@typescript-eslint/no-wrapper-object-types":{"total":0.001333},"@typescript-eslint/prefer-as-const":{"total":0.001},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000875},"@typescript-eslint/triple-slash-reference":{"total":0.006667000000000001},"@typescript-eslint/no-non-null-assertion":{"total":0.000833},"@typescript-eslint/adjacent-overload-signatures":{"total":0.006959},"@typescript-eslint/no-empty-function":{"total":0.005792},"@typescript-eslint/no-inferrable-types":{"total":0.003791},"@typescript-eslint/no-empty-interface":{"total":0.037459},"@nx/enforce-module-boundaries":{"total":0.020209}},"fix":{"total":0},"total":2.39625}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/cli/commands/trace-reduce/args-processor.ts","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":12,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":12,"endColumn":36},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":13,"column":22,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":13,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { ReduceTraceArgs, ProcessedArgs } from './types';\n\n/**\n * Process and validate CLI arguments for the reduce-trace command\n * Note: Default input/output file handling is now done by yargs middleware\n */\nexport function processArgs(\n  argv: ReduceTraceArgs,\n  logger = console\n): ProcessedArgs {\n  // Input and output files are now handled by middleware\n  const inputFile = argv.inputFile!; // Safe to assert since middleware ensures it's set\n  const outputFile = argv.output!; // Safe to assert since middleware ensures it's set\n\n  if (argv.verbose) {\n    // Verbose logging is handled elsewhere - this just indicates middleware was used\n    logger.log(`📁 Using input file: ${inputFile}`);\n    logger.log(`📁 Using output file: ${outputFile}`);\n  }\n\n  return {\n    inputFile,\n    outputFile,\n    verbose: argv.verbose || false,\n    filterOptions: {\n      filterNetwork: argv.network ?? true,\n      filterAnimation: argv.animation ?? true,\n      filterGPU: argv.gpu ?? true,\n      filterThreadPool: argv.threadpool ?? true,\n      filterStreamingCompile: argv.streamingcompile ?? true,\n      durMin: argv['dur-min'],\n      durMax: argv['dur-max'],\n      tsMin: argv['ts-min'],\n      tsMax: argv['ts-max'],\n      includePhases: argv['include-phases'],\n      excludePhases: argv['exclude-phases'],\n      includePids: argv['include-pids'],\n      excludePids: argv['exclude-pids'],\n      includeTids: argv['include-tids'],\n      excludeTids: argv['exclude-tids'],\n      includeNames: argv['include-names'],\n      excludeNames: argv['exclude-names'],\n      includeCats: argv['include-cats'],\n      excludeCats: argv['exclude-cats'],\n    },\n  };\n}\n","stats":{"times":{"passes":[{"parse":{"total":3.59675},"rules":{"for-direction":{"total":0.003625},"no-async-promise-executor":{"total":0.000375},"no-case-declarations":{"total":0.000334},"no-compare-neg-zero":{"total":0.001375},"no-cond-assign":{"total":0.012249999999999999},"no-constant-binary-expression":{"total":0.007875},"no-constant-condition":{"total":0.055083},"no-control-regex":{"total":0.004083},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.000292},"no-dupe-else-if":{"total":0.003833},"no-duplicate-case":{"total":0.000458},"no-empty":{"total":0.0035009999999999998},"no-empty-character-class":{"total":0.00025},"no-empty-pattern":{"total":0.00175},"no-empty-static-block":{"total":0.000333},"no-ex-assign":{"total":0.000292},"no-extra-boolean-cast":{"total":0.002001},"no-fallthrough":{"total":0.010036000000000002},"no-global-assign":{"total":0.021792},"no-invalid-regexp":{"total":0.003708},"no-irregular-whitespace":{"total":0.005582},"no-loss-of-precision":{"total":0.0036670000000000014},"no-misleading-character-class":{"total":0.013917},"no-nonoctal-decimal-escape":{"total":0.0037520000000000006},"no-octal":{"total":0.002960000000000001},"no-prototype-builtins":{"total":0.00175},"no-regex-spaces":{"total":0.005707},"no-self-assign":{"total":0.002709},"no-shadow-restricted-names":{"total":0.00375},"no-sparse-arrays":{"total":0.000375},"no-unsafe-finally":{"total":0.0025},"no-unsafe-optional-chaining":{"total":0.007790000000000001},"no-unused-labels":{"total":0.000458},"no-unused-private-class-members":{"total":0.000375},"no-useless-backreference":{"total":0.0035},"no-useless-catch":{"total":0.00025},"no-useless-escape":{"total":0.009210000000000001},"require-yield":{"total":0.001},"use-isnan":{"total":0.001291},"valid-typeof":{"total":0.00175},"no-var":{"total":0.000708},"prefer-const":{"total":0.002209},"prefer-rest-params":{"total":0.0041659999999999996},"prefer-spread":{"total":0.002},"@typescript-eslint/ban-ts-comment":{"total":0.017833},"@typescript-eslint/no-array-constructor":{"total":0.002125},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001375},"@typescript-eslint/no-empty-object-type":{"total":0.004792},"@typescript-eslint/no-explicit-any":{"total":0.003416},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001},"@typescript-eslint/no-misused-new":{"total":0.001166},"@typescript-eslint/no-namespace":{"total":0.002916},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001208},"@typescript-eslint/no-this-alias":{"total":0.002708},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.007458},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001375},"@typescript-eslint/no-unsafe-function-type":{"total":0.002125},"@typescript-eslint/no-unused-expressions":{"total":0.012499},"@typescript-eslint/no-unused-vars":{"total":0.468625},"@typescript-eslint/no-wrapper-object-types":{"total":0.002791},"@typescript-eslint/prefer-as-const":{"total":0.001584},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000833},"@typescript-eslint/triple-slash-reference":{"total":0.008666},"@typescript-eslint/no-non-null-assertion":{"total":0.151375},"@typescript-eslint/adjacent-overload-signatures":{"total":0.008082},"@typescript-eslint/no-empty-function":{"total":0.031542},"@typescript-eslint/no-inferrable-types":{"total":0.007833000000000001},"@typescript-eslint/no-empty-interface":{"total":0.002583},"@nx/enforce-module-boundaries":{"total":0.054917}},"fix":{"total":0},"total":5.922792}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/cli/commands/trace-reduce/builder.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DEFAULT_EXCLUDE_CATS' is assigned a value but never used.","line":16,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Argv } from 'yargs';\nimport { DEFAULT_FILTER_OPTIONS } from '../../../lib/reduce-trace';\nimport type { ReduceTraceArgs } from './types';\nimport {\n  coerceStringArray,\n  coerceNumberArray,\n  coerceStringArrayWithDefaults,\n} from '../../../lib/utils';\nimport { validateTraceReduceArgs } from './helpers';\nimport { findNewestTraceFile, generateOutputFilename } from '../../utils';\n\n// Constants for default values to reduce duplication\nconst DEFAULT_DUR_MIN = DEFAULT_FILTER_OPTIONS.durMin;\nconst DEFAULT_EXCLUDE_NAMES =\n  DEFAULT_FILTER_OPTIONS.excludeNames?.join(', ') ?? '';\nconst DEFAULT_EXCLUDE_CATS =\n  DEFAULT_FILTER_OPTIONS.excludeCats?.join(', ') ?? '';\nconst DEFAULT_EXCLUDE_NAMES_COMMA =\n  DEFAULT_FILTER_OPTIONS.excludeNames?.join(',') ?? '';\nconst DEFAULT_EXCLUDE_CATS_COMMA =\n  DEFAULT_FILTER_OPTIONS.excludeCats?.join(',') ?? '';\n\n/**\n * Add basic options (output, verbose)\n */\nfunction addBasicOptions(yargs: Argv<ReduceTraceArgs>): Argv<ReduceTraceArgs> {\n  return yargs\n    .group(['help', 'version', 'verbose', 'output'], 'Basic Options:')\n    .options({\n      output: {\n        alias: 'o',\n        describe: 'Output file path',\n        type: 'string',\n        normalize: true,\n      },\n      verbose: {\n        alias: 'v',\n        describe: 'Enable verbose logging',\n        type: 'boolean',\n        default: false,\n      },\n    });\n}\n\n/**\n * Add event type filtering options\n */\nfunction addEventTypeFilters(\n  yargs: Argv<ReduceTraceArgs>\n): Argv<ReduceTraceArgs> {\n  return yargs\n    .group(\n      ['network', 'animation', 'gpu', 'threadpool', 'streamingcompile'],\n      'Event Type Filtering:'\n    )\n    .options({\n      network: {\n        describe: 'Enable network event filtering',\n        type: 'boolean',\n        default: true,\n      },\n      animation: {\n        describe: 'Enable animation event filtering',\n        type: 'boolean',\n        default: true,\n      },\n      gpu: {\n        describe: 'Enable GPU event filtering',\n        type: 'boolean',\n        default: true,\n      },\n      threadpool: {\n        describe: 'Enable ThreadPool event filtering',\n        type: 'boolean',\n        default: true,\n      },\n      streamingcompile: {\n        describe: 'Enable StreamingCompile event filtering',\n        type: 'boolean',\n        default: true,\n      },\n    });\n}\n\n/**\n * Add advanced filtering options (phases, PIDs, TIDs)\n */\nfunction addAdvancedFiltering(\n  yargs: Argv<ReduceTraceArgs>\n): Argv<ReduceTraceArgs> {\n  return yargs\n    .group(\n      [\n        'include-phases',\n        'exclude-phases',\n        'include-pids',\n        'exclude-pids',\n        'include-tids',\n        'exclude-tids',\n      ],\n      'Advanced Filtering:'\n    )\n    .options({\n      'include-phases': {\n        describe:\n          'Comma-separated list of event phases to include (e.g., B,E,X)',\n        type: 'array',\n        coerce: coerceStringArray,\n      },\n      'exclude-phases': {\n        describe: 'Comma-separated list of event phases to exclude (e.g., M,I)',\n        type: 'array',\n        coerce: coerceStringArray,\n      },\n      'include-pids': {\n        describe: 'Comma-separated list of Process IDs to include',\n        type: 'array',\n        coerce: (arg) => coerceNumberArray(arg, 'PID'),\n      },\n      'exclude-pids': {\n        describe: 'Comma-separated list of Process IDs to exclude',\n        type: 'array',\n        coerce: (arg) => coerceNumberArray(arg, 'PID'),\n      },\n      'include-tids': {\n        describe: 'Comma-separated list of Thread IDs to include',\n        type: 'array',\n        coerce: (arg) => coerceNumberArray(arg, 'TID'),\n      },\n      'exclude-tids': {\n        describe: 'Comma-separated list of Thread IDs to exclude',\n        type: 'array',\n        coerce: (arg) => coerceNumberArray(arg, 'TID'),\n      },\n    });\n}\n\n/**\n * Add name and category filtering options\n */\nfunction addNameCatFiltering(\n  yargs: Argv<ReduceTraceArgs>\n): Argv<ReduceTraceArgs> {\n  return yargs\n    .group(\n      ['include-names', 'exclude-names', 'include-cats', 'exclude-cats'],\n      'Name & Category Filtering:'\n    )\n    .options({\n      'include-names': {\n        describe: 'Comma-separated list of event names to include',\n        type: 'array',\n        coerce: coerceStringArray,\n      },\n      'exclude-names': {\n        describe: `Comma-separated list of event names to exclude (default: ${DEFAULT_EXCLUDE_NAMES_COMMA})`,\n        type: 'array',\n        default: DEFAULT_FILTER_OPTIONS.excludeNames,\n        coerce: (arg) =>\n          coerceStringArrayWithDefaults(\n            arg,\n            DEFAULT_FILTER_OPTIONS.excludeNames\n          ),\n      },\n      'include-cats': {\n        describe: 'Comma-separated list of event categories to include',\n        type: 'array',\n        coerce: coerceStringArray,\n      },\n      'exclude-cats': {\n        describe: `Comma-separated list of event categories to exclude (default: ${DEFAULT_EXCLUDE_CATS_COMMA})`,\n        type: 'array',\n        default: DEFAULT_FILTER_OPTIONS.excludeCats,\n        coerce: (arg) =>\n          coerceStringArrayWithDefaults(\n            arg,\n            DEFAULT_FILTER_OPTIONS.excludeCats\n          ),\n      },\n    });\n}\n\n/**\n * Add duration and timestamp filtering options\n */\nfunction addDurationTimestampFiltering(\n  yargs: Argv<ReduceTraceArgs>\n): Argv<ReduceTraceArgs> {\n  return yargs\n    .group(\n      ['dur-min', 'dur-max', 'ts-min', 'ts-max'],\n      'Duration & Timestamp Filtering:'\n    )\n    .options({\n      'dur-min': {\n        describe: `Filter out events shorter than specified duration in microseconds (default: ${DEFAULT_DUR_MIN}μs)`,\n        type: 'number',\n        default: DEFAULT_FILTER_OPTIONS.durMin,\n      },\n      'dur-max': {\n        describe:\n          'Filter out events longer than specified duration in microseconds',\n        type: 'number',\n      },\n      'ts-min': {\n        describe:\n          'Filter out events with timestamp earlier than specified in microseconds',\n        type: 'number',\n      },\n      'ts-max': {\n        describe:\n          'Filter out events with timestamp later than specified in microseconds',\n        type: 'number',\n      },\n    });\n}\n\n/**\n * Build the yargs command configuration for reduce-trace\n */\nexport function builder(yargs: Argv): Argv<ReduceTraceArgs> {\n  return [\n    addBasicOptions,\n    addEventTypeFilters,\n    addAdvancedFiltering,\n    addNameCatFiltering,\n    addDurationTimestampFiltering,\n  ]\n    .reduce((acc, fn) => fn(acc), yargs)\n    .positional('inputFile', {\n      describe: 'Path to the input trace file (JSON format)',\n      type: 'string',\n      normalize: true,\n    })\n    .example(\n      '$0 trace-reduce trace.json',\n      'Reduce trace.json with default filters'\n    )\n    .example(\n      '$0 trace-reduce trace.json -o cleaned.json -v',\n      'Reduce with custom output and verbose logging'\n    )\n    .example(\n      '$0 trace-reduce --no-network --no-gpu trace.json',\n      'Reduce keeping network and GPU events'\n    )\n    .example(\n      '$0 trace-reduce --include-cats blink,v8 trace.json',\n      'Include only blink and v8 categories'\n    )\n    .example(\n      '$0 trace-reduce --dur-min 1000 --dur-max 50000 trace.json',\n      'Filter by duration range'\n    )\n    .epilog(\n      `\nDefault Behavior:\n  • Network, animation, GPU, ThreadPool, StreamingCompile filtering: enabled\n  • v8.compile category filtering: enabled  \n  • Minimum duration filtering: ${DEFAULT_DUR_MIN}μs\n  • Default excluded names: ${DEFAULT_EXCLUDE_NAMES}\n  • If no input file provided, uses newest .json file from ./packages/cpu-profiling/mocks/fixtures/\n  • If no output file specified, adds .reduced.json to the input filename\n  • Use --no-<option> to disable any boolean filter (e.g., --no-network, --no-animation)\n  • Use --no-dur-min to disable minimum duration filtering\n    `\n    )\n    .conflicts('include-phases', 'exclude-phases')\n    .conflicts('include-pids', 'exclude-pids')\n    .conflicts('include-tids', 'exclude-tids')\n    .conflicts('include-names', 'exclude-names')\n    .conflicts('include-cats', 'exclude-cats')\n    .middleware((argv) => {\n      // Handle input file (auto-select if not provided)\n      if (!argv.inputFile) {\n        argv.inputFile = findNewestTraceFile();\n      }\n\n      // Handle output file (auto-generate if not provided)\n      if (!argv.output) {\n        argv.output = generateOutputFilename(argv.inputFile);\n      }\n    })\n    .check(validateTraceReduceArgs);\n}\n","stats":{"times":{"passes":[{"parse":{"total":4.17675},"rules":{"for-direction":{"total":0.002708},"no-async-promise-executor":{"total":0.000334},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.001333},"no-cond-assign":{"total":0.0013340000000000001},"no-constant-binary-expression":{"total":0.0063750000000000005},"no-constant-condition":{"total":0.005542000000000001},"no-control-regex":{"total":0.023498000000000012},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.0007070000000000001},"no-dupe-else-if":{"total":0.002292},"no-duplicate-case":{"total":0.000375},"no-empty":{"total":0.0019990000000000003},"no-empty-character-class":{"total":0.00025},"no-empty-pattern":{"total":0.000542},"no-empty-static-block":{"total":0.00025},"no-ex-assign":{"total":0.00025},"no-extra-boolean-cast":{"total":0.007458000000000001},"no-fallthrough":{"total":0.02325100000000001},"no-global-assign":{"total":0.019084},"no-invalid-regexp":{"total":0.0066250000000000015},"no-irregular-whitespace":{"total":0.009625},"no-loss-of-precision":{"total":0.016961000000000014},"no-misleading-character-class":{"total":0.013042},"no-nonoctal-decimal-escape":{"total":0.02095800000000002},"no-octal":{"total":0.015202000000000002},"no-prototype-builtins":{"total":0.010625},"no-regex-spaces":{"total":0.04834100000000004},"no-self-assign":{"total":0.003333},"no-shadow-restricted-names":{"total":0.012874},"no-sparse-arrays":{"total":0.002125},"no-unsafe-finally":{"total":0.004707999999999999},"no-unsafe-optional-chaining":{"total":0.021000000000000008},"no-unused-labels":{"total":0.000416},"no-unused-private-class-members":{"total":0.000375},"no-useless-backreference":{"total":0.003458},"no-useless-catch":{"total":0.00025},"no-useless-escape":{"total":0.034290000000000015},"require-yield":{"total":0.002542},"use-isnan":{"total":0.001166},"valid-typeof":{"total":0.002251},"no-var":{"total":0.001166},"prefer-const":{"total":0.002334},"prefer-rest-params":{"total":0.004581},"prefer-spread":{"total":0.010248000000000002},"@typescript-eslint/ban-ts-comment":{"total":0.017083},"@typescript-eslint/no-array-constructor":{"total":0.008001},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001042},"@typescript-eslint/no-empty-object-type":{"total":0.003916},"@typescript-eslint/no-explicit-any":{"total":0.0025},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000916},"@typescript-eslint/no-misused-new":{"total":0.000917},"@typescript-eslint/no-namespace":{"total":0.002208},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000875},"@typescript-eslint/no-this-alias":{"total":0.002417},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.005916},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001125},"@typescript-eslint/no-unsafe-function-type":{"total":0.004749},"@typescript-eslint/no-unused-expressions":{"total":0.011666},"@typescript-eslint/no-unused-vars":{"total":0.573418},"@typescript-eslint/no-wrapper-object-types":{"total":0.005748999999999997},"@typescript-eslint/prefer-as-const":{"total":0.002084},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000792},"@typescript-eslint/triple-slash-reference":{"total":0.008291},"@typescript-eslint/no-non-null-assertion":{"total":0.000916},"@typescript-eslint/adjacent-overload-signatures":{"total":0.017165000000000003},"@typescript-eslint/no-empty-function":{"total":0.06179200000000001},"@typescript-eslint/no-inferrable-types":{"total":0.009751000000000001},"@typescript-eslint/no-empty-interface":{"total":0.002083},"@nx/enforce-module-boundaries":{"total":0.17791499999999996}},"fix":{"total":0},"total":9.205375}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/cli/commands/trace-reduce/handler.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fs' is defined but never used.","line":1,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'reduceTrace' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'fs';\nimport { reduceTrace, reduceTraceFile } from '../../../lib/reduce-trace';\nimport type { ReduceTraceArgs } from './types';\nimport { processArgs } from './args-processor';\nimport { logVerboseOptions, getStats, logStats } from './helpers';\n/**\n * Handle the reduce-trace command execution\n */\nexport async function handler(argv: ReduceTraceArgs): Promise<void> {\n  try {\n    const processedArgs = processArgs(argv);\n\n    if (processedArgs.verbose) {\n      logVerboseOptions(processedArgs);\n    }\n\n    // Use helper function to process the trace file\n    const result = reduceTraceFile(\n      processedArgs.inputFile,\n      processedArgs.outputFile,\n      processedArgs.filterOptions\n    );\n\n    // Display statistics using helper functions\n    const stats = getStats(result);\n    logStats(stats);\n  } catch (error) {\n    console.error('❌ Error:', (error as Error).message);\n    process.exit(1);\n  }\n}\n","stats":{"times":{"passes":[{"parse":{"total":1.12825},"rules":{"for-direction":{"total":0.0035},"no-async-promise-executor":{"total":0.000542},"no-case-declarations":{"total":0.000541},"no-compare-neg-zero":{"total":0.001667},"no-cond-assign":{"total":0.001875},"no-constant-binary-expression":{"total":0.000791},"no-constant-condition":{"total":0.0031669999999999997},"no-control-regex":{"total":0.0025420000000000004},"no-debugger":{"total":0.000416},"no-delete-var":{"total":0.00025},"no-dupe-else-if":{"total":0.0025},"no-duplicate-case":{"total":0.0005},"no-empty":{"total":0.0020829999999999998},"no-empty-character-class":{"total":0.007459},"no-empty-pattern":{"total":0.000708},"no-empty-static-block":{"total":0.0005},"no-ex-assign":{"total":0.002875},"no-extra-boolean-cast":{"total":0.0029990000000000004},"no-fallthrough":{"total":0.0062099999999999985},"no-global-assign":{"total":0.020958},"no-invalid-regexp":{"total":0.004249},"no-irregular-whitespace":{"total":0.005917},"no-loss-of-precision":{"total":0.010168},"no-misleading-character-class":{"total":0.012584000000000001},"no-nonoctal-decimal-escape":{"total":0.002334},"no-octal":{"total":0.0017929999999999999},"no-prototype-builtins":{"total":0.0031249999999999997},"no-regex-spaces":{"total":0.008207},"no-self-assign":{"total":0.000875},"no-shadow-restricted-names":{"total":0.005833000000000001},"no-sparse-arrays":{"total":0.000542},"no-unsafe-finally":{"total":0.0005},"no-unsafe-optional-chaining":{"total":0.005334999999999999},"no-unused-labels":{"total":0.000542},"no-unused-private-class-members":{"total":0.000458},"no-useless-backreference":{"total":0.003375},"no-useless-catch":{"total":0.001},"no-useless-escape":{"total":0.004542000000000001},"require-yield":{"total":0.001042},"use-isnan":{"total":0.001334},"valid-typeof":{"total":0.042083},"no-var":{"total":0.0016660000000000002},"prefer-const":{"total":0.002374},"prefer-rest-params":{"total":0.001542},"prefer-spread":{"total":0.0027099999999999997},"@typescript-eslint/ban-ts-comment":{"total":0.016208},"@typescript-eslint/no-array-constructor":{"total":0.0033770000000000007},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001291},"@typescript-eslint/no-empty-object-type":{"total":0.004667},"@typescript-eslint/no-explicit-any":{"total":0.002791},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001875},"@typescript-eslint/no-misused-new":{"total":0.005375},"@typescript-eslint/no-namespace":{"total":0.002166},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000875},"@typescript-eslint/no-this-alias":{"total":0.002584},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.00675},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001625},"@typescript-eslint/no-unsafe-function-type":{"total":0.005417},"@typescript-eslint/no-unused-expressions":{"total":0.015124},"@typescript-eslint/no-unused-vars":{"total":0.498833},"@typescript-eslint/no-wrapper-object-types":{"total":0.0055},"@typescript-eslint/prefer-as-const":{"total":0.002375},"@typescript-eslint/prefer-namespace-keyword":{"total":0.001083},"@typescript-eslint/triple-slash-reference":{"total":0.009250000000000001},"@typescript-eslint/no-non-null-assertion":{"total":0.000833},"@typescript-eslint/adjacent-overload-signatures":{"total":0.008874},"@typescript-eslint/no-empty-function":{"total":0.018125},"@typescript-eslint/no-inferrable-types":{"total":0.005834},"@typescript-eslint/no-empty-interface":{"total":0.001959},"@nx/enforce-module-boundaries":{"total":0.164459}},"fix":{"total":0},"total":3.28125}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/cli/commands/trace-reduce/helpers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3061,3064],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3061,3064],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { ProcessedArgs } from './types';\nimport type { TraceReductionStats } from '../../../lib/reduce-trace';\nimport path from 'path';\nimport {\n  fileExists,\n  isJsonFile,\n  directoryExists,\n} from '../../../lib/file-utils';\n\n/**\n * Log verbose options when verbose mode is enabled\n */\nexport function logVerboseOptions(args: ProcessedArgs, logger = console): void {\n  logger.log('🔧 Filter Options:');\n  logger.log(\n    `  Network filtering: ${\n      args.filterOptions.filterNetwork ? 'enabled' : 'disabled'\n    }`\n  );\n  logger.log(\n    `  Animation filtering: ${\n      args.filterOptions.filterAnimation ? 'enabled' : 'disabled'\n    }`\n  );\n  logger.log(\n    `  GPU filtering: ${args.filterOptions.filterGPU ? 'enabled' : 'disabled'}`\n  );\n  logger.log(\n    `  ThreadPool filtering: ${\n      args.filterOptions.filterThreadPool ? 'enabled' : 'disabled'\n    }`\n  );\n  logger.log(\n    `  StreamingCompile filtering: ${\n      args.filterOptions.filterStreamingCompile ? 'enabled' : 'disabled'\n    }`\n  );\n\n  if (args.filterOptions.durMin !== undefined) {\n    logger.log(`  Minimum duration: ${args.filterOptions.durMin}μs`);\n  }\n  if (args.filterOptions.durMax !== undefined) {\n    logger.log(`  Maximum duration: ${args.filterOptions.durMax}μs`);\n  }\n  if (args.filterOptions.tsMin !== undefined) {\n    logger.log(`  Minimum timestamp: ${args.filterOptions.tsMin}`);\n  }\n  if (args.filterOptions.tsMax !== undefined) {\n    logger.log(`  Maximum timestamp: ${args.filterOptions.tsMax}`);\n  }\n  if (args.filterOptions.includePhases) {\n    logger.log(\n      `  Include phases: ${args.filterOptions.includePhases.join(', ')}`\n    );\n  }\n  if (args.filterOptions.excludePhases) {\n    logger.log(\n      `  Exclude phases: ${args.filterOptions.excludePhases.join(', ')}`\n    );\n  }\n  if (args.filterOptions.includePids) {\n    logger.log(`  Include PIDs: ${args.filterOptions.includePids.join(', ')}`);\n  }\n  if (args.filterOptions.excludePids) {\n    logger.log(`  Exclude PIDs: ${args.filterOptions.excludePids.join(', ')}`);\n  }\n  if (args.filterOptions.includeTids) {\n    logger.log(`  Include TIDs: ${args.filterOptions.includeTids.join(', ')}`);\n  }\n  if (args.filterOptions.excludeTids) {\n    logger.log(`  Exclude TIDs: ${args.filterOptions.excludeTids.join(', ')}`);\n  }\n  if (args.filterOptions.includeNames) {\n    logger.log(\n      `  Include names: ${args.filterOptions.includeNames.join(', ')}`\n    );\n  }\n  if (args.filterOptions.excludeNames) {\n    logger.log(\n      `  Exclude names: ${args.filterOptions.excludeNames.join(', ')}`\n    );\n  }\n  if (args.filterOptions.includeCats) {\n    logger.log(\n      `  Include categories: ${args.filterOptions.includeCats.join(', ')}`\n    );\n  }\n  if (args.filterOptions.excludeCats) {\n    logger.log(\n      `  Exclude categories: ${args.filterOptions.excludeCats.join(', ')}`\n    );\n  }\n\n  logger.log(`📁 Input file: ${args.inputFile}`);\n  logger.log(`📁 Output file: ${args.outputFile}`);\n}\n\n/**\n * Validate command line arguments for trace-reduce command\n */\nexport function validateTraceReduceArgs(argv: any): boolean {\n  // File validation\n  const inputFile = argv.inputFile;\n  if (inputFile) {\n    if (!fileExists(inputFile as string)) {\n      throw new Error(`Input file does not exist: ${inputFile}`);\n    }\n    if (!isJsonFile(inputFile as string)) {\n      throw new Error(`Input file must be a JSON file: ${inputFile}`);\n    }\n  }\n\n  // Output directory validation\n  if (argv.output) {\n    const outputDir = path.dirname(argv.output as string);\n    if (outputDir !== '.' && !directoryExists(outputDir)) {\n      throw new Error(`Output directory does not exist: ${outputDir}`);\n    }\n  }\n\n  // Duration min/max relationship validation\n  if (\n    argv['dur-min'] !== undefined &&\n    argv['dur-max'] !== undefined &&\n    argv['dur-min'] > argv['dur-max']\n  ) {\n    throw new Error('--dur-min cannot be greater than --dur-max');\n  }\n\n  // Timestamp min/max relationship validation\n  if (\n    argv['ts-min'] !== undefined &&\n    argv['ts-max'] !== undefined &&\n    argv['ts-min'] > argv['ts-max']\n  ) {\n    throw new Error('--ts-min cannot be greater than --ts-max');\n  }\n\n  return true;\n}\n\n/**\n * Format trace reduction statistics for display\n */\nexport interface FormattedStats {\n  originalFileMB: string;\n  originalEventCount: number;\n  cleanedFileMB: string;\n  filteredEventCount: number;\n  removedEventCount: number;\n  reductionRatio: string;\n  inputFile: string;\n  outputFile: string;\n}\n\nexport function getStats(result: TraceReductionStats): FormattedStats {\n  return {\n    originalFileMB: (result.originalSize / (1024 * 1024)).toFixed(2),\n    originalEventCount: result.originalEventCount,\n    cleanedFileMB: (result.cleanedSize / (1024 * 1024)).toFixed(2),\n    filteredEventCount: result.filteredEventCount,\n    removedEventCount: result.removedEventCount,\n    reductionRatio: (\n      (result.removedEventCount / result.originalEventCount) *\n      100\n    ).toFixed(1),\n    inputFile: result.inputFile,\n    outputFile: result.outputFile,\n  };\n}\n\n/**\n * Log trace reduction statistics to console\n */\nexport function logStats(stats: FormattedStats, logger = console): void {\n  logger.log(\n    `📊 Original file: ${stats.originalFileMB} MB, ${stats.originalEventCount} events`\n  );\n  logger.log(\n    `📊 Cleaned file: ${stats.cleanedFileMB} MB, ${stats.filteredEventCount} events`\n  );\n  logger.log(`📊 Events removed: ${stats.removedEventCount}`);\n  logger.log(`📊 Reduction ratio: ${stats.reductionRatio}%`);\n  logger.log(`✅ Reduced trace file created: ${stats.outputFile}`);\n  logger.log(`✅ Original file preserved: ${stats.inputFile}`);\n}\n","stats":{"times":{"passes":[{"parse":{"total":4.429833},"rules":{"for-direction":{"total":0.002958},"no-async-promise-executor":{"total":0.000334},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.020835000000000003},"no-cond-assign":{"total":0.009832},"no-constant-binary-expression":{"total":0.13891599999999993},"no-constant-condition":{"total":0.028170000000000004},"no-control-regex":{"total":0.009041999999999996},"no-debugger":{"total":0.000209},"no-delete-var":{"total":0.000916},"no-dupe-else-if":{"total":0.040457},"no-duplicate-case":{"total":0.000334},"no-empty":{"total":0.004663},"no-empty-character-class":{"total":0.001375},"no-empty-pattern":{"total":0.001167},"no-empty-static-block":{"total":0.000375},"no-ex-assign":{"total":0.000333},"no-extra-boolean-cast":{"total":0.009418000000000003},"no-fallthrough":{"total":0.03249100000000001},"no-global-assign":{"total":0.019917},"no-invalid-regexp":{"total":0.010083000000000003},"no-irregular-whitespace":{"total":0.019541},"no-loss-of-precision":{"total":0.033461000000000005},"no-misleading-character-class":{"total":0.013000000000000001},"no-nonoctal-decimal-escape":{"total":0.008499999999999997},"no-octal":{"total":0.014500000000000004},"no-prototype-builtins":{"total":0.012665000000000004},"no-regex-spaces":{"total":0.04408100000000002},"no-self-assign":{"total":0.000708},"no-shadow-restricted-names":{"total":0.007167},"no-sparse-arrays":{"total":0.000375},"no-unsafe-finally":{"total":0.0069169999999999995},"no-unsafe-optional-chaining":{"total":0.05466400000000003},"no-unused-labels":{"total":0.0005},"no-unused-private-class-members":{"total":0.000417},"no-useless-backreference":{"total":0.0034590000000000003},"no-useless-catch":{"total":0.000292},"no-useless-escape":{"total":0.03983400000000002},"require-yield":{"total":0.001956},"use-isnan":{"total":0.012707000000000003},"valid-typeof":{"total":0.002626},"no-var":{"total":0.000625},"prefer-const":{"total":0.001876},"prefer-rest-params":{"total":0.018499},"prefer-spread":{"total":0.011961000000000003},"@typescript-eslint/ban-ts-comment":{"total":0.017166},"@typescript-eslint/no-array-constructor":{"total":0.008957000000000003},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001541},"@typescript-eslint/no-empty-object-type":{"total":0.005833},"@typescript-eslint/no-explicit-any":{"total":0.120792},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001042},"@typescript-eslint/no-misused-new":{"total":0.001333},"@typescript-eslint/no-namespace":{"total":0.002125},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001083},"@typescript-eslint/no-this-alias":{"total":0.002625},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.006083},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.0035000000000000005},"@typescript-eslint/no-unsafe-function-type":{"total":0.00225},"@typescript-eslint/no-unused-expressions":{"total":0.033625},"@typescript-eslint/no-unused-vars":{"total":0.517207},"@typescript-eslint/no-wrapper-object-types":{"total":0.003249},"@typescript-eslint/prefer-as-const":{"total":0.003251},"@typescript-eslint/prefer-namespace-keyword":{"total":0.001083},"@typescript-eslint/triple-slash-reference":{"total":0.009418000000000001},"@typescript-eslint/no-non-null-assertion":{"total":0.001},"@typescript-eslint/adjacent-overload-signatures":{"total":0.03521100000000002},"@typescript-eslint/no-empty-function":{"total":0.068459},"@typescript-eslint/no-inferrable-types":{"total":0.007418},"@typescript-eslint/no-empty-interface":{"total":0.002458},"@nx/enforce-module-boundaries":{"total":0.08899999999999998}},"fix":{"total":0},"total":11.144875}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/cli/commands/trace-reduce/index.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":6,"column":48,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":6,"endColumn":50,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[214,216],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[214,216],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { CommandModule } from 'yargs';\nimport type { ReduceTraceArgs } from './types';\nimport { builder } from './builder';\nimport { handler } from './handler';\n\nexport const reduceTraceCommand: CommandModule<{}, ReduceTraceArgs> = {\n  command: 'trace-reduce [inputFile]',\n  describe: 'Reduce Chrome DevTools trace files by filtering unwanted events',\n  builder,\n  handler,\n};\n\nexport default reduceTraceCommand;\n\nexport type { ReduceTraceArgs, ProcessedArgs, ValidatedArgs } from './types';\nexport { processArgs } from './args-processor';\nexport { logVerboseOptions } from './helpers';\n","stats":{"times":{"passes":[{"parse":{"total":0.773542},"rules":{"for-direction":{"total":0.002416},"no-async-promise-executor":{"total":0.000334},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.000875},"no-cond-assign":{"total":0.001},"no-constant-binary-expression":{"total":0.000375},"no-constant-condition":{"total":0.001125},"no-control-regex":{"total":0.002332},"no-debugger":{"total":0.000208},"no-delete-var":{"total":0.000208},"no-dupe-else-if":{"total":0.000458},"no-duplicate-case":{"total":0.000292},"no-empty":{"total":0.000541},"no-empty-character-class":{"total":0.000208},"no-empty-pattern":{"total":0.000458},"no-empty-static-block":{"total":0.000291},"no-ex-assign":{"total":0.00025},"no-extra-boolean-cast":{"total":0.001166},"no-fallthrough":{"total":0.002165},"no-global-assign":{"total":0.019833},"no-invalid-regexp":{"total":0.002375},"no-irregular-whitespace":{"total":0.002667},"no-loss-of-precision":{"total":0.00196},"no-misleading-character-class":{"total":0.009375},"no-nonoctal-decimal-escape":{"total":0.002334},"no-octal":{"total":0.0015000000000000005},"no-prototype-builtins":{"total":0.000416},"no-regex-spaces":{"total":0.0016250000000000006},"no-self-assign":{"total":0.000542},"no-shadow-restricted-names":{"total":0.002794},"no-sparse-arrays":{"total":0.00025},"no-unsafe-finally":{"total":0.000292},"no-unsafe-optional-chaining":{"total":0.00125},"no-unused-labels":{"total":0.000333},"no-unused-private-class-members":{"total":0.000417},"no-useless-backreference":{"total":0.003167},"no-useless-catch":{"total":0.000292},"no-useless-escape":{"total":0.004084},"require-yield":{"total":0.000292},"use-isnan":{"total":0.001041},"valid-typeof":{"total":0.001458},"no-var":{"total":0.000459},"prefer-const":{"total":0.00125},"prefer-rest-params":{"total":0.000292},"prefer-spread":{"total":0.000292},"@typescript-eslint/ban-ts-comment":{"total":0.007417},"@typescript-eslint/no-array-constructor":{"total":0.001375},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001125},"@typescript-eslint/no-empty-object-type":{"total":0.059125000000000004},"@typescript-eslint/no-explicit-any":{"total":0.00225},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000917},"@typescript-eslint/no-misused-new":{"total":0.001},"@typescript-eslint/no-namespace":{"total":0.001792},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001042},"@typescript-eslint/no-this-alias":{"total":0.002125},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.004042},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001167},"@typescript-eslint/no-unsafe-function-type":{"total":0.0015840000000000001},"@typescript-eslint/no-unused-expressions":{"total":0.007625},"@typescript-eslint/no-unused-vars":{"total":0.29325100000000004},"@typescript-eslint/no-wrapper-object-types":{"total":0.002042},"@typescript-eslint/prefer-as-const":{"total":0.001667},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000875},"@typescript-eslint/triple-slash-reference":{"total":0.006334},"@typescript-eslint/no-non-null-assertion":{"total":0.000875},"@typescript-eslint/adjacent-overload-signatures":{"total":0.004958},"@typescript-eslint/no-empty-function":{"total":0.003833},"@typescript-eslint/no-inferrable-types":{"total":0.005792},"@typescript-eslint/no-empty-interface":{"total":0.001625},"@nx/enforce-module-boundaries":{"total":0.34629200000000004}},"fix":{"total":0},"total":2.498834}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/cli/commands/trace-reduce/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":1.284458},"rules":{"for-direction":{"total":0.003042},"no-async-promise-executor":{"total":0.0005},"no-case-declarations":{"total":0.000375},"no-compare-neg-zero":{"total":0.001125},"no-cond-assign":{"total":0.001375},"no-constant-binary-expression":{"total":0.000333},"no-constant-condition":{"total":0.00125},"no-control-regex":{"total":0.0036249999999999998},"no-debugger":{"total":0.000375},"no-delete-var":{"total":0.00025},"no-dupe-else-if":{"total":0.0005},"no-duplicate-case":{"total":0.000459},"no-empty":{"total":0.000791},"no-empty-character-class":{"total":0.00025},"no-empty-pattern":{"total":0.000875},"no-empty-static-block":{"total":0.000375},"no-ex-assign":{"total":0.000292},"no-extra-boolean-cast":{"total":0.001375},"no-fallthrough":{"total":0.0034999999999999996},"no-global-assign":{"total":0.020749},"no-invalid-regexp":{"total":0.000875},"no-irregular-whitespace":{"total":0.005333},"no-loss-of-precision":{"total":0.0025840000000000012},"no-misleading-character-class":{"total":0.015},"no-nonoctal-decimal-escape":{"total":0.002960000000000001},"no-octal":{"total":0.0022090000000000005},"no-prototype-builtins":{"total":0.0005},"no-regex-spaces":{"total":0.0023740000000000007},"no-self-assign":{"total":0.000708},"no-shadow-restricted-names":{"total":0.000625},"no-sparse-arrays":{"total":0.000333},"no-unsafe-finally":{"total":0.000375},"no-unsafe-optional-chaining":{"total":0.001334},"no-unused-labels":{"total":0.000459},"no-unused-private-class-members":{"total":0.000417},"no-useless-backreference":{"total":0.003541},"no-useless-catch":{"total":0.00025},"no-useless-escape":{"total":0.004876999999999999},"require-yield":{"total":0.000417},"use-isnan":{"total":0.001333},"valid-typeof":{"total":0.001458},"no-var":{"total":0.000542},"prefer-const":{"total":0.001459},"prefer-rest-params":{"total":0.000333},"prefer-spread":{"total":0.000291},"@typescript-eslint/ban-ts-comment":{"total":0.020125},"@typescript-eslint/no-array-constructor":{"total":0.002042},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001541},"@typescript-eslint/no-empty-object-type":{"total":0.0068330000000000005},"@typescript-eslint/no-explicit-any":{"total":0.003625},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001209},"@typescript-eslint/no-misused-new":{"total":0.00125},"@typescript-eslint/no-namespace":{"total":0.002875},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001167},"@typescript-eslint/no-this-alias":{"total":0.003208},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.00825},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.0067090000000000006},"@typescript-eslint/no-unsafe-function-type":{"total":0.001083},"@typescript-eslint/no-unused-expressions":{"total":0.010334},"@typescript-eslint/no-unused-vars":{"total":0.343167},"@typescript-eslint/no-wrapper-object-types":{"total":0.001667},"@typescript-eslint/prefer-as-const":{"total":0.001375},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000917},"@typescript-eslint/triple-slash-reference":{"total":0.008167},"@typescript-eslint/no-non-null-assertion":{"total":0.001},"@typescript-eslint/adjacent-overload-signatures":{"total":0.0195},"@typescript-eslint/no-empty-function":{"total":0.004875},"@typescript-eslint/no-inferrable-types":{"total":0.004459},"@typescript-eslint/no-empty-interface":{"total":0.0033339999999999997},"@nx/enforce-module-boundaries":{"total":0.022334000000000003}},"fix":{"total":0},"total":3.005458}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/cli/core/commands.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.509708},"rules":{"for-direction":{"total":0.001666},"no-async-promise-executor":{"total":0.000333},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.000791},"no-cond-assign":{"total":0.000792},"no-constant-binary-expression":{"total":0.000291},"no-constant-condition":{"total":0.000875},"no-control-regex":{"total":0.001416},"no-debugger":{"total":0.000208},"no-delete-var":{"total":0.000209},"no-dupe-else-if":{"total":0.000375},"no-duplicate-case":{"total":0.000291},"no-empty":{"total":0.000542},"no-empty-character-class":{"total":0.000208},"no-empty-pattern":{"total":0.000458},"no-empty-static-block":{"total":0.00025},"no-ex-assign":{"total":0.00025},"no-extra-boolean-cast":{"total":0.000958},"no-fallthrough":{"total":0.002},"no-global-assign":{"total":0.020208},"no-invalid-regexp":{"total":0.0005},"no-irregular-whitespace":{"total":0.001792},"no-loss-of-precision":{"total":0.001292},"no-misleading-character-class":{"total":0.008333},"no-nonoctal-decimal-escape":{"total":0.001332},"no-octal":{"total":0.000874},"no-prototype-builtins":{"total":0.000417},"no-regex-spaces":{"total":0.001042},"no-self-assign":{"total":0.000458},"no-shadow-restricted-names":{"total":0.002251},"no-sparse-arrays":{"total":0.000584},"no-unsafe-finally":{"total":0.00025},"no-unsafe-optional-chaining":{"total":0.001208},"no-unused-labels":{"total":0.000333},"no-unused-private-class-members":{"total":0.000292},"no-useless-backreference":{"total":0.003125},"no-useless-catch":{"total":0.000208},"no-useless-escape":{"total":0.002624},"require-yield":{"total":0.000333},"use-isnan":{"total":0.000917},"valid-typeof":{"total":0.0014160000000000002},"no-var":{"total":0.000458},"prefer-const":{"total":0.001582},"prefer-rest-params":{"total":0.00025},"prefer-spread":{"total":0.00025},"@typescript-eslint/ban-ts-comment":{"total":0.008167},"@typescript-eslint/no-array-constructor":{"total":0.001208},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000875},"@typescript-eslint/no-empty-object-type":{"total":0.002833},"@typescript-eslint/no-explicit-any":{"total":0.002},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000833},"@typescript-eslint/no-misused-new":{"total":0.000917},"@typescript-eslint/no-namespace":{"total":0.001625},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000875},"@typescript-eslint/no-this-alias":{"total":0.002167},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.003584},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001208},"@typescript-eslint/no-unsafe-function-type":{"total":0.001209},"@typescript-eslint/no-unused-expressions":{"total":0.007167},"@typescript-eslint/no-unused-vars":{"total":0.268375},"@typescript-eslint/no-wrapper-object-types":{"total":0.001666},"@typescript-eslint/prefer-as-const":{"total":0.001709},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000792},"@typescript-eslint/triple-slash-reference":{"total":0.005209},"@typescript-eslint/no-non-null-assertion":{"total":0.000792},"@typescript-eslint/adjacent-overload-signatures":{"total":0.003125},"@typescript-eslint/no-empty-function":{"total":0.003625},"@typescript-eslint/no-inferrable-types":{"total":0.0052910000000000006},"@typescript-eslint/no-empty-interface":{"total":0.001916},"@nx/enforce-module-boundaries":{"total":0.065543}},"fix":{"total":0},"total":1.787125}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/cli/core/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.350208},"rules":{"for-direction":{"total":0.00225},"no-async-promise-executor":{"total":0.000417},"no-case-declarations":{"total":0.000209},"no-compare-neg-zero":{"total":0.000959},"no-cond-assign":{"total":0.000958},"no-constant-binary-expression":{"total":0.000292},"no-constant-condition":{"total":0.001},"no-control-regex":{"total":0.000959},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.000209},"no-dupe-else-if":{"total":0.000375},"no-duplicate-case":{"total":0.00025},"no-empty":{"total":0.000625},"no-empty-character-class":{"total":0.000208},"no-empty-pattern":{"total":0.000625},"no-empty-static-block":{"total":0.000292},"no-ex-assign":{"total":0.000292},"no-extra-boolean-cast":{"total":0.000958},"no-fallthrough":{"total":0.002376},"no-global-assign":{"total":0.022792},"no-invalid-regexp":{"total":0.000708},"no-irregular-whitespace":{"total":0.001999},"no-loss-of-precision":{"total":0.000958},"no-misleading-character-class":{"total":0.009708},"no-nonoctal-decimal-escape":{"total":0.000876},"no-octal":{"total":0.000624},"no-prototype-builtins":{"total":0.000416},"no-regex-spaces":{"total":0.000625},"no-self-assign":{"total":0.000458},"no-shadow-restricted-names":{"total":0.000583},"no-sparse-arrays":{"total":0.000333},"no-unsafe-finally":{"total":0.00025},"no-unsafe-optional-chaining":{"total":0.001},"no-unused-labels":{"total":0.000416},"no-unused-private-class-members":{"total":0.000416},"no-useless-backreference":{"total":0.003209},"no-useless-catch":{"total":0.00025},"no-useless-escape":{"total":0.002291},"require-yield":{"total":0.000417},"use-isnan":{"total":0.000958},"valid-typeof":{"total":0.001376},"no-var":{"total":0.000291},"prefer-const":{"total":0.001083},"prefer-rest-params":{"total":0.000375},"prefer-spread":{"total":0.000209},"@typescript-eslint/ban-ts-comment":{"total":0.008043},"@typescript-eslint/no-array-constructor":{"total":0.001709},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001167},"@typescript-eslint/no-empty-object-type":{"total":0.003875},"@typescript-eslint/no-explicit-any":{"total":0.002708},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001208},"@typescript-eslint/no-misused-new":{"total":0.001167},"@typescript-eslint/no-namespace":{"total":0.002209},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001083},"@typescript-eslint/no-this-alias":{"total":0.002333},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.005125},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001333},"@typescript-eslint/no-unsafe-function-type":{"total":0.000833},"@typescript-eslint/no-unused-expressions":{"total":0.00725},"@typescript-eslint/no-unused-vars":{"total":0.255876},"@typescript-eslint/no-wrapper-object-types":{"total":0.001167},"@typescript-eslint/prefer-as-const":{"total":0.000834},"@typescript-eslint/prefer-namespace-keyword":{"total":0.00075},"@typescript-eslint/triple-slash-reference":{"total":0.005417},"@typescript-eslint/no-non-null-assertion":{"total":0.000875},"@typescript-eslint/adjacent-overload-signatures":{"total":0.002125},"@typescript-eslint/no-empty-function":{"total":0.003667},"@typescript-eslint/no-inferrable-types":{"total":0.003791},"@typescript-eslint/no-empty-interface":{"total":0.001667},"@nx/enforce-module-boundaries":{"total":0.037584}},"fix":{"total":0},"total":1.691959}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/cli/core/main.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.860417},"rules":{"for-direction":{"total":0.00175},"no-async-promise-executor":{"total":0.000291},"no-case-declarations":{"total":0.000208},"no-compare-neg-zero":{"total":0.000833},"no-cond-assign":{"total":0.000792},"no-constant-binary-expression":{"total":0.00025},"no-constant-condition":{"total":0.001542},"no-control-regex":{"total":0.003085},"no-debugger":{"total":0.000208},"no-delete-var":{"total":0.000209},"no-dupe-else-if":{"total":0.000333},"no-duplicate-case":{"total":0.000291},"no-empty":{"total":0.000833},"no-empty-character-class":{"total":0.000208},"no-empty-pattern":{"total":0.000583},"no-empty-static-block":{"total":0.00025},"no-ex-assign":{"total":0.000292},"no-extra-boolean-cast":{"total":0.003375000000000001},"no-fallthrough":{"total":0.004331},"no-global-assign":{"total":0.019833},"no-invalid-regexp":{"total":0.002751000000000001},"no-irregular-whitespace":{"total":0.002667},"no-loss-of-precision":{"total":0.014251000000000002},"no-misleading-character-class":{"total":0.008291},"no-nonoctal-decimal-escape":{"total":0.0027920000000000006},"no-octal":{"total":0.0026650000000000007},"no-prototype-builtins":{"total":0.005084000000000001},"no-regex-spaces":{"total":0.017459000000000002},"no-self-assign":{"total":0.0005},"no-shadow-restricted-names":{"total":0.003499},"no-sparse-arrays":{"total":0.000334},"no-unsafe-finally":{"total":0.00025},"no-unsafe-optional-chaining":{"total":0.006373},"no-unused-labels":{"total":0.000333},"no-unused-private-class-members":{"total":0.000292},"no-useless-backreference":{"total":0.0032080000000000003},"no-useless-catch":{"total":0.000208},"no-useless-escape":{"total":0.006413999999999999},"require-yield":{"total":0.0007070000000000001},"use-isnan":{"total":0.001},"valid-typeof":{"total":0.0013750000000000001},"no-var":{"total":0.000542},"prefer-const":{"total":0.0012079999999999999},"prefer-rest-params":{"total":0.001001},"prefer-spread":{"total":0.004457},"@typescript-eslint/ban-ts-comment":{"total":0.008542},"@typescript-eslint/no-array-constructor":{"total":0.003834000000000001},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001042},"@typescript-eslint/no-empty-object-type":{"total":0.002917},"@typescript-eslint/no-explicit-any":{"total":0.001916},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000833},"@typescript-eslint/no-misused-new":{"total":0.000917},"@typescript-eslint/no-namespace":{"total":0.001708},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000875},"@typescript-eslint/no-this-alias":{"total":0.001917},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.003709},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001042},"@typescript-eslint/no-unsafe-function-type":{"total":0.0015},"@typescript-eslint/no-unused-expressions":{"total":0.009625},"@typescript-eslint/no-unused-vars":{"total":1.513625},"@typescript-eslint/no-wrapper-object-types":{"total":0.001625},"@typescript-eslint/prefer-as-const":{"total":0.0011250000000000001},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000791},"@typescript-eslint/triple-slash-reference":{"total":0.011836000000000003},"@typescript-eslint/no-non-null-assertion":{"total":0.000792},"@typescript-eslint/adjacent-overload-signatures":{"total":0.006667},"@typescript-eslint/no-empty-function":{"total":0.016624999999999997},"@typescript-eslint/no-inferrable-types":{"total":0.004626000000000001},"@typescript-eslint/no-empty-interface":{"total":0.001625},"@nx/enforce-module-boundaries":{"total":0.227334}},"fix":{"total":0},"total":3.822542}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/cli/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fileURLToPath' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'main' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\nimport { fileURLToPath } from 'url';\nimport { main } from './core/main';\n\nexport { main } from './core/main';\nexport { commands, reduceTraceCommand } from './core/commands';\nexport * from './utils';\n","stats":{"times":{"passes":[{"parse":{"total":0.357875},"rules":{"for-direction":{"total":0.002083},"no-async-promise-executor":{"total":0.000333},"no-case-declarations":{"total":0.000292},"no-compare-neg-zero":{"total":0.000958},"no-cond-assign":{"total":0.001208},"no-constant-binary-expression":{"total":0.000333},"no-constant-condition":{"total":0.001125},"no-control-regex":{"total":0.001708},"no-debugger":{"total":0.000209},"no-delete-var":{"total":0.00025},"no-dupe-else-if":{"total":0.000458},"no-duplicate-case":{"total":0.000417},"no-empty":{"total":0.000625},"no-empty-character-class":{"total":0.000292},"no-empty-pattern":{"total":0.000625},"no-empty-static-block":{"total":0.000417},"no-ex-assign":{"total":0.00025},"no-extra-boolean-cast":{"total":0.001083},"no-fallthrough":{"total":0.002917},"no-global-assign":{"total":0.019417},"no-invalid-regexp":{"total":0.000625},"no-irregular-whitespace":{"total":0.002041},"no-loss-of-precision":{"total":0.0014590000000000002},"no-misleading-character-class":{"total":0.010625},"no-nonoctal-decimal-escape":{"total":0.001749},"no-octal":{"total":0.000875},"no-prototype-builtins":{"total":0.000541},"no-regex-spaces":{"total":0.001123},"no-self-assign":{"total":0.000625},"no-shadow-restricted-names":{"total":0.002626},"no-sparse-arrays":{"total":0.000334},"no-unsafe-finally":{"total":0.000292},"no-unsafe-optional-chaining":{"total":0.001084},"no-unused-labels":{"total":0.000417},"no-unused-private-class-members":{"total":0.000417},"no-useless-backreference":{"total":0.029417000000000002},"no-useless-catch":{"total":0.000292},"no-useless-escape":{"total":0.0031259999999999994},"require-yield":{"total":0.000417},"use-isnan":{"total":0.001209},"valid-typeof":{"total":0.0024999999999999996},"no-var":{"total":0.000291},"prefer-const":{"total":0.001501},"prefer-rest-params":{"total":0.000333},"prefer-spread":{"total":0.00025},"@typescript-eslint/ban-ts-comment":{"total":0.010667},"@typescript-eslint/no-array-constructor":{"total":0.001333},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001083},"@typescript-eslint/no-empty-object-type":{"total":0.003125},"@typescript-eslint/no-explicit-any":{"total":0.002375},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000958},"@typescript-eslint/no-misused-new":{"total":0.000958},"@typescript-eslint/no-namespace":{"total":0.001875},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000917},"@typescript-eslint/no-this-alias":{"total":0.002041},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.004791},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001125},"@typescript-eslint/no-unsafe-function-type":{"total":0.000958},"@typescript-eslint/no-unused-expressions":{"total":0.007708},"@typescript-eslint/no-unused-vars":{"total":0.326833},"@typescript-eslint/no-wrapper-object-types":{"total":0.001125},"@typescript-eslint/prefer-as-const":{"total":0.000917},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000833},"@typescript-eslint/triple-slash-reference":{"total":0.014957999999999999},"@typescript-eslint/no-non-null-assertion":{"total":0.000833},"@typescript-eslint/adjacent-overload-signatures":{"total":0.004375},"@typescript-eslint/no-empty-function":{"total":0.003875},"@typescript-eslint/no-inferrable-types":{"total":0.003709},"@typescript-eslint/no-empty-interface":{"total":0.001791},"@nx/enforce-module-boundaries":{"total":0.273416}},"fix":{"total":0},"total":1.95825}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/cli/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type string trivially inferred from a string literal, remove type annotation.","line":9,"column":3,"nodeType":"AssignmentPattern","messageId":"noInferrableType","endLine":9,"endColumn":65,"fix":{"range":[220,228],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type string trivially inferred from a string literal, remove type annotation.","line":41,"column":3,"nodeType":"AssignmentPattern","messageId":"noInferrableType","endLine":41,"endColumn":30,"fix":{"range":[1090,1098],"text":""}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import fs from 'fs';\nimport path from 'path';\nimport type { FileInfo } from '../lib/file-utils';\n\n/**\n * Find the newest trace file in a directory (CLI-specific logic)\n */\nexport function findNewestTraceFile(\n  directory: string = './packages/cpu-profiling/mocks/fixtures/'\n): string {\n  try {\n    const files: FileInfo[] = fs\n      .readdirSync(directory)\n      .filter((file: string) => file.endsWith('.json'))\n      .map((file: string) => ({\n        name: file,\n        path: path.join(directory, file),\n        mtime: fs.statSync(path.join(directory, file)).mtime,\n      }))\n      .sort(\n        (a: FileInfo, b: FileInfo) => b.mtime.getTime() - a.mtime.getTime()\n      ); // Newest first\n\n    if (files.length === 0) {\n      throw new Error(`No .json files found in ${directory}`);\n    }\n\n    return files[0].path;\n  } catch (error) {\n    throw new Error(\n      `Error reading directory ${directory}: ${(error as Error).message}`\n    );\n  }\n}\n\n/**\n * Generate output filename with suffix (CLI naming convention)\n */\nexport function generateOutputFilename(\n  inputFile: string,\n  suffix: string = '.reduced'\n): string {\n  return inputFile.replace('.json', `${suffix}.json`);\n}\n","stats":{"times":{"passes":[{"parse":{"total":1.639083},"rules":{"for-direction":{"total":0.002083},"no-async-promise-executor":{"total":0.000417},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.003293},"no-cond-assign":{"total":0.00125},"no-constant-binary-expression":{"total":0.006332},"no-constant-condition":{"total":0.003751},"no-control-regex":{"total":0.002665},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.00025},"no-dupe-else-if":{"total":0.001792},"no-duplicate-case":{"total":0.000333},"no-empty":{"total":0.0015010000000000002},"no-empty-character-class":{"total":0.00025},"no-empty-pattern":{"total":0.000542},"no-empty-static-block":{"total":0.00025},"no-ex-assign":{"total":0.0027089999999999996},"no-extra-boolean-cast":{"total":0.0026660000000000004},"no-fallthrough":{"total":0.012915000000000003},"no-global-assign":{"total":0.019792},"no-invalid-regexp":{"total":0.0025830000000000002},"no-irregular-whitespace":{"total":0.0036249999999999998},"no-loss-of-precision":{"total":0.002165},"no-misleading-character-class":{"total":0.009875},"no-nonoctal-decimal-escape":{"total":0.0022930000000000003},"no-octal":{"total":0.002},"no-prototype-builtins":{"total":0.004207},"no-regex-spaces":{"total":0.013794},"no-self-assign":{"total":0.000584},"no-shadow-restricted-names":{"total":0.005626},"no-sparse-arrays":{"total":0.000208},"no-unsafe-finally":{"total":0.011582},"no-unsafe-optional-chaining":{"total":0.00891},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.000333},"no-useless-backreference":{"total":0.00325},"no-useless-catch":{"total":0.000958},"no-useless-escape":{"total":0.008456},"require-yield":{"total":0.0010409999999999998},"use-isnan":{"total":0.0036249999999999998},"valid-typeof":{"total":0.001458},"no-var":{"total":0.000583},"prefer-const":{"total":0.001584},"prefer-rest-params":{"total":0.001876},"prefer-spread":{"total":0.003957},"@typescript-eslint/ban-ts-comment":{"total":0.01025},"@typescript-eslint/no-array-constructor":{"total":0.0036680000000000003},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001041},"@typescript-eslint/no-empty-object-type":{"total":0.00325},"@typescript-eslint/no-explicit-any":{"total":0.00225},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001},"@typescript-eslint/no-misused-new":{"total":0.001083},"@typescript-eslint/no-namespace":{"total":0.002},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001},"@typescript-eslint/no-this-alias":{"total":0.002167},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.004375},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001125},"@typescript-eslint/no-unsafe-function-type":{"total":0.002},"@typescript-eslint/no-unused-expressions":{"total":0.007792},"@typescript-eslint/no-unused-vars":{"total":1.2524160000000002},"@typescript-eslint/no-wrapper-object-types":{"total":0.002457},"@typescript-eslint/prefer-as-const":{"total":0.0023339999999999997},"@typescript-eslint/prefer-namespace-keyword":{"total":0.001},"@typescript-eslint/triple-slash-reference":{"total":0.006500000000000001},"@typescript-eslint/no-non-null-assertion":{"total":0.000875},"@typescript-eslint/adjacent-overload-signatures":{"total":0.01},"@typescript-eslint/no-empty-function":{"total":0.026666},"@typescript-eslint/no-inferrable-types":{"total":0.17091599999999996},"@typescript-eslint/no-empty-interface":{"total":0.00175},"@nx/enforce-module-boundaries":{"total":0.049417}},"fix":{"total":0},"total":4.424}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.375375},"rules":{"for-direction":{"total":0.002416},"no-async-promise-executor":{"total":0.000333},"no-case-declarations":{"total":0.000292},"no-compare-neg-zero":{"total":0.000916},"no-cond-assign":{"total":0.000916},"no-constant-binary-expression":{"total":0.000291},"no-constant-condition":{"total":0.001167},"no-control-regex":{"total":0.0020399999999999997},"no-debugger":{"total":0.000333},"no-delete-var":{"total":0.000333},"no-dupe-else-if":{"total":0.000417},"no-duplicate-case":{"total":0.000333},"no-empty":{"total":0.000583},"no-empty-character-class":{"total":0.000291},"no-empty-pattern":{"total":0.00075},"no-empty-static-block":{"total":0.000375},"no-ex-assign":{"total":0.000292},"no-extra-boolean-cast":{"total":0.001042},"no-fallthrough":{"total":0.002375},"no-global-assign":{"total":0.0205},"no-invalid-regexp":{"total":0.00075},"no-irregular-whitespace":{"total":0.002167},"no-loss-of-precision":{"total":0.0015010000000000002},"no-misleading-character-class":{"total":0.011208},"no-nonoctal-decimal-escape":{"total":0.0013350000000000002},"no-octal":{"total":0.0011260000000000003},"no-prototype-builtins":{"total":0.000459},"no-regex-spaces":{"total":0.0013340000000000001},"no-self-assign":{"total":0.000583},"no-shadow-restricted-names":{"total":0.000584},"no-sparse-arrays":{"total":0.000291},"no-unsafe-finally":{"total":0.000291},"no-unsafe-optional-chaining":{"total":0.000958},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.000417},"no-useless-backreference":{"total":0.071167},"no-useless-catch":{"total":0.000333},"no-useless-escape":{"total":0.00296},"require-yield":{"total":0.000458},"use-isnan":{"total":0.000958},"valid-typeof":{"total":0.001833},"no-var":{"total":0.000416},"prefer-const":{"total":0.0012490000000000001},"prefer-rest-params":{"total":0.000375},"prefer-spread":{"total":0.00025},"@typescript-eslint/ban-ts-comment":{"total":0.008208},"@typescript-eslint/no-array-constructor":{"total":0.001334},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001083},"@typescript-eslint/no-empty-object-type":{"total":0.003666},"@typescript-eslint/no-explicit-any":{"total":0.0025},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001},"@typescript-eslint/no-misused-new":{"total":0.001},"@typescript-eslint/no-namespace":{"total":0.001792},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001},"@typescript-eslint/no-this-alias":{"total":0.002},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.00525},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001209},"@typescript-eslint/no-unsafe-function-type":{"total":0.001},"@typescript-eslint/no-unused-expressions":{"total":0.00775},"@typescript-eslint/no-unused-vars":{"total":0.261125},"@typescript-eslint/no-wrapper-object-types":{"total":0.001583},"@typescript-eslint/prefer-as-const":{"total":0.001084},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000833},"@typescript-eslint/triple-slash-reference":{"total":0.005999},"@typescript-eslint/no-non-null-assertion":{"total":0.001},"@typescript-eslint/adjacent-overload-signatures":{"total":0.003625},"@typescript-eslint/no-empty-function":{"total":0.004083},"@typescript-eslint/no-inferrable-types":{"total":0.00375},"@typescript-eslint/no-empty-interface":{"total":0.001667},"@nx/enforce-module-boundaries":{"total":0.06762599999999999}},"fix":{"total":0},"total":1.712083}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/lib/__snapshots__/1-simple-cup-trace.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.33075},"rules":{"@nx/dependency-checks":{"total":0.073542}},"fix":{"total":0},"total":1.173958}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/lib/__snapshots__/merged-files-trace.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":1337.579542},"rules":{"@nx/dependency-checks":{"total":0.138541}},"fix":{"total":0},"total":2216.448875}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/lib/__snapshots__/multiple-cup-tids-trace.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.313417},"rules":{"@nx/dependency-checks":{"total":0.02025}},"fix":{"total":0},"total":1.114667}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/lib/cpu-to-trace-events.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[960,963],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[960,963],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, expect, it, vi } from 'vitest';\nimport { cpuProfilesToTraceFile } from './cpu-to-trace-events';\nimport * as profileSelection from './profile-selection';\nimport { mkdir, readFile } from 'fs/promises';\nimport { join } from 'path';\nimport { fileURLToPath } from 'url';\nimport { CPUProfile } from './cpuprofile.types';\n\nconst __dirname = fileURLToPath(new URL('.', import.meta.url));\nconst minimalCpuProfile: CPUProfile = JSON.parse(\n  (\n    await readFile(\n      join(__dirname, '../../mocks/fixtures/minimal.cpuprofile'),\n      'utf8'\n    )\n  ).toString()\n);\n\n// Create a shared test fixture\nconst createTestProfileInfo = (overrides = {}) => ({\n  cpuProfile: minimalCpuProfile,\n  startDate: new Date('2025-05-17T20:56:31.714Z'),\n  pid: 10001,\n  tid: 20001,\n  sequence: 1,\n  sourceFilePath: 'main.mjs',\n  execArgs: ['node', '--cpu-prof', 'main.mjs'],\n  ...overrides,\n});\n\ndescribe('cpuProfilesToTraceFile', () => {\n  let getMainProfileInfoSpy: any;\n\n  beforeAll(async () => {\n    await mkdir(join(__dirname, '__snapshots__'), { recursive: true });\n  });\n\n  beforeEach(() => {\n    getMainProfileInfoSpy = vi.spyOn(profileSelection, 'getMainProfileInfo');\n  });\n\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  it('should convert a single CPU profile into a trace file with correct metadata and events', async () => {\n    const profiles = [createTestProfileInfo()];\n\n    const result = cpuProfilesToTraceFile(profiles);\n\n    expect(getMainProfileInfoSpy).toHaveBeenCalledWith(profiles);\n    await expect(JSON.stringify(result, null, 2)).toMatchFileSnapshot(\n      join(__dirname, '__snapshots__', '1-simple-cup-trace.json')\n    );\n  });\n\n  it('should convert multiple CPU profiles with different thread IDs into a trace file format', async () => {\n    const profiles = [\n      createTestProfileInfo(),\n      createTestProfileInfo({ tid: 20002 }),\n      createTestProfileInfo({\n        tid: 20003,\n        startDate: new Date('2025-05-17T20:56:30.714Z'),\n        sourceFilePath: 'build.mjs',\n        execArgs: ['node', '--cpu-prof', 'build.mjs'],\n      }),\n    ];\n\n    const output = cpuProfilesToTraceFile(profiles);\n\n    expect(getMainProfileInfoSpy).toHaveBeenCalledWith(profiles);\n    await expect(JSON.stringify(output, null, 2)).toMatchFileSnapshot(\n      join(__dirname, '__snapshots__', 'multiple-cup-tids-trace.json')\n    );\n  });\n\n  it('should throw error when no CPU profiles are provided', () => {\n    expect(() => cpuProfilesToTraceFile([])).toThrow(\n      'No CPU profiles provided'\n    );\n  });\n});\n","stats":{"times":{"passes":[{"parse":{"total":2.117875},"rules":{"for-direction":{"total":0.00325},"no-async-promise-executor":{"total":0.000375},"no-case-declarations":{"total":0.000292},"no-compare-neg-zero":{"total":0.000916},"no-cond-assign":{"total":0.001125},"no-constant-binary-expression":{"total":0.000292},"no-constant-condition":{"total":0.001167},"no-control-regex":{"total":0.008834},"no-debugger":{"total":0.000292},"no-delete-var":{"total":0.000208},"no-dupe-else-if":{"total":0.000458},"no-duplicate-case":{"total":0.000333},"no-empty":{"total":0.0019160000000000002},"no-empty-character-class":{"total":0.00025},"no-empty-pattern":{"total":0.000709},"no-empty-static-block":{"total":0.000333},"no-ex-assign":{"total":0.00025},"no-extra-boolean-cast":{"total":0.0070420000000000005},"no-fallthrough":{"total":0.011419000000000007},"no-global-assign":{"total":0.021083},"no-invalid-regexp":{"total":0.007043},"no-irregular-whitespace":{"total":0.005875},"no-loss-of-precision":{"total":0.030542},"no-misleading-character-class":{"total":0.010124},"no-nonoctal-decimal-escape":{"total":0.007204},"no-octal":{"total":0.006375000000000001},"no-prototype-builtins":{"total":0.009208000000000001},"no-regex-spaces":{"total":0.03725200000000002},"no-self-assign":{"total":0.002542},"no-shadow-restricted-names":{"total":0.010082000000000002},"no-sparse-arrays":{"total":0.001791},"no-unsafe-finally":{"total":0.000334},"no-unsafe-optional-chaining":{"total":0.015960000000000005},"no-unused-labels":{"total":0.000458},"no-unused-private-class-members":{"total":0.000416},"no-useless-backreference":{"total":0.003875},"no-useless-catch":{"total":0.000292},"no-useless-escape":{"total":0.010955000000000001},"require-yield":{"total":0.000417},"use-isnan":{"total":0.001125},"valid-typeof":{"total":0.0015},"no-var":{"total":0.001666},"prefer-const":{"total":0.016207},"prefer-rest-params":{"total":0.000375},"prefer-spread":{"total":0.008793},"@typescript-eslint/ban-ts-comment":{"total":0.030625},"@typescript-eslint/no-array-constructor":{"total":0.008707000000000001},"@typescript-eslint/no-duplicate-enum-values":{"total":0.00125},"@typescript-eslint/no-empty-object-type":{"total":0.003708},"@typescript-eslint/no-explicit-any":{"total":0.050666},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001083},"@typescript-eslint/no-misused-new":{"total":0.001083},"@typescript-eslint/no-namespace":{"total":0.002125},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001291},"@typescript-eslint/no-this-alias":{"total":0.002625},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.005375},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001166},"@typescript-eslint/no-unsafe-function-type":{"total":0.001582},"@typescript-eslint/no-unused-expressions":{"total":0.018793000000000004},"@typescript-eslint/no-unused-vars":{"total":1.4218330000000001},"@typescript-eslint/no-wrapper-object-types":{"total":0.001959},"@typescript-eslint/prefer-as-const":{"total":0.0032500000000000003},"@typescript-eslint/prefer-namespace-keyword":{"total":0.001},"@typescript-eslint/triple-slash-reference":{"total":0.007208999999999998},"@typescript-eslint/no-non-null-assertion":{"total":0.000959},"@typescript-eslint/adjacent-overload-signatures":{"total":0.011541999999999998},"@typescript-eslint/no-empty-function":{"total":0.030625999999999997},"@typescript-eslint/no-inferrable-types":{"total":0.016166},"@typescript-eslint/no-empty-interface":{"total":0.002208},"@nx/enforce-module-boundaries":{"total":0.46095900000000006}},"fix":{"total":0},"total":5.739959}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/lib/cpu-to-trace-events.ts","messages":[{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type string trivially inferred from a string literal, remove type annotation.","line":116,"column":3,"nodeType":"AssignmentPattern","messageId":"noInferrableType","endLine":116,"endColumn":34,"fix":{"range":[2696,2704],"text":""}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sequence' is assigned a value but never used.","line":230,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":230,"endColumn":47}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { CPUProfile } from './cpuprofile.types';\nimport {\n  TraceMetadata,\n  TraceEvent,\n  TraceFile,\n  ThreadNameEvent,\n  ProcessNameEvent,\n  ProfileEvent,\n  ProfileChunkEvent,\n  TracingStartedInBrowserEvent,\n  CpuProfilerStartProfilingEvent,\n  CpuProfilerStopProfilingEvent,\n} from './traceprofile.types';\nimport { basename } from 'node:path';\nimport { getMainProfileInfo } from './profile-selection';\nimport { CpuProfileInfo } from './types';\n\n/**\n * Converts a V8 CPU profile into Trace Event-Format JSON.\n * This is used to visualize the CPU profile in the DevTools timeline.\n *\n * @param cpuProfile - The V8 CPU profile to convert.\n * @param opt - Options for the conversion.\n * @returns An array of Trace Event objects representing the CPU profile.\n */\nexport function cpuProfileToTraceProfileEvents(\n  cpuProfile: CPUProfile,\n  opt: {\n    pid: number;\n    tid: number;\n    sequence?: number;\n  }\n): [\n  CpuProfilerStartProfilingEvent,\n  ProfileEvent,\n  ProfileChunkEvent,\n  CpuProfilerStopProfilingEvent\n] {\n  const { pid, tid, sequence = 0 } = opt;\n  const { startTime = 1, endTime, nodes, timeDeltas, samples } = cpuProfile;\n  // we need a unique id to connect profile chunks\n  const id = `${pid}${tid}${sequence}`;\n\n  return [\n    // CpuProfiler::StartProfiling event is needed to make it visible in the panel\n    {\n      cat: 'disabled-by-default-v8',\n      name: 'CpuProfiler::StartProfiling',\n      dur: 0,\n      ph: 'i',\n      pid,\n      tid,\n      ts: startTime,\n      args: {\n        data: {\n          startTime,\n        },\n      },\n    },\n    // 1 Profile event is needed to make the panel aware of the profile\n    {\n      cat: 'disabled-by-default-v8.cpu_profiler',\n      id: `0x${id}`,\n      name: 'Profile',\n      ph: 'P',\n      pid,\n      tid,\n      // can't be 0 as the minimap needs the event timing\n      ts: startTime,\n      args: {\n        data: {\n          startTime,\n        },\n      },\n    },\n    // 1 ProfileChunk event is needed to including the full profile\n    {\n      cat: 'disabled-by-default-v8.cpu_profiler',\n      name: 'ProfileChunk',\n      id: `0x${id}`,\n      ph: 'P',\n      pid,\n      tid,\n      ts: 0,\n      args: {\n        data: {\n          cpuProfile: {\n            nodes,\n            samples,\n          },\n          timeDeltas,\n        },\n      },\n    },\n    // CpuProfiler::StopProfiling event is optional but here for completeness\n    {\n      cat: 'disabled-by-default-v8',\n      name: 'CpuProfiler::StopProfiling',\n      dur: 0,\n      ph: 'i',\n      pid,\n      tid,\n      ts: endTime,\n      args: {\n        data: {\n          endTime,\n        },\n      },\n    },\n  ];\n}\n\nexport function getThreadNameTraceEvent(\n  pid: number,\n  tid: number,\n  name: string = 'CrRendererMain'\n): ThreadNameEvent {\n  return {\n    cat: '__metadata',\n    name: 'thread_name',\n    ph: 'M',\n    pid,\n    tid,\n    ts: 0,\n    args: {\n      name,\n    },\n  };\n}\n\nexport function getProcessNameTraceEvent(\n  pid: number,\n  tid: number,\n  name: string\n): ProcessNameEvent {\n  return {\n    cat: '__metadata',\n    name: 'process_name',\n    ph: 'M',\n    pid,\n    tid,\n    ts: 0,\n    args: {\n      name,\n    },\n  };\n}\n\nexport function getRunTaskTraceEvent(\n  pid: number,\n  tid: number,\n  opt: {\n    ts: number;\n    dur: number;\n  }\n): TraceEvent {\n  const { ts, dur } = opt;\n  return {\n    args: {},\n    cat: 'disabled-by-default-devtools.timeline',\n    dur,\n    name: 'RunTask',\n    ph: 'X',\n    pid,\n    tid,\n    ts,\n  };\n}\n\nexport function getStartTracing(\n  pid: number,\n  tid: number,\n  opt: {\n    traceStartTs: number;\n    frameTreeNodeId?: number;\n    url: string;\n  }\n): TracingStartedInBrowserEvent {\n  const { traceStartTs, frameTreeNodeId = 1, url } = opt;\n  return {\n    cat: 'disabled-by-default-devtools.timeline',\n    name: 'TracingStartedInBrowser',\n    ph: 'i',\n    pid,\n    tid,\n    ts: traceStartTs,\n    s: 't',\n    args: {\n      data: {\n        frameTreeNodeId,\n        frames: [\n          {\n            frame: `frame-${frameTreeNodeId}`,\n            isInPrimaryMainFrame: true,\n            isOutermostMainFrame: true,\n            name: '',\n            processId: pid,\n            url,\n          },\n        ],\n        persistentIds: true,\n      },\n    },\n  };\n}\n\nexport function getThreadName(info: CpuProfileInfo): string {\n  const { sourceFilePath, execArgs } = info;\n  return `${basename(sourceFilePath ?? '')} ${execArgs?.join(' ')}`;\n}\n\nexport function getTraceMetadata(info?: CpuProfileInfo): TraceMetadata {\n  const { startDate } = info ?? {};\n  return {\n    source: 'DevTools',\n    startTime: startDate?.toISOString() ?? new Date().toISOString(),\n    hardwareConcurrency: 1,\n    dataOrigin: 'TraceEvents',\n  };\n}\n\n/**\n * Wraps a V8 CPU profile into a Trace Event-Format JSON,\n * and injects minimal timeline events for DevTools\n **/\nexport function cpuProfilesToTraceFile(\n  cpuProfileInfos: CpuProfileInfo[]\n): TraceFile {\n  const mainProfileInfo = getMainProfileInfo(cpuProfileInfos);\n  const { pid: mainPid, tid: mainTid, sequence = 0 } = mainProfileInfo;\n\n  const traceFile: TraceFile = {\n    metadata: getTraceMetadata(mainProfileInfo),\n    traceEvents: [\n      /* getStartTracing(mainPid, mainTid, {\n                traceStartTs: mainProfileInfo.cpuProfile.startTime ?? 0,\n                // has to be valid URL @TODO\n                url: `file://${getThreadName({...mainProfileInfo, sourceFilePath: ''})}`,\n                frameTreeNodeId: sequence\n            }),*/\n      ...cpuProfileInfos.flatMap((info) => {\n        const { cpuProfile, pid, tid, sourceFilePath } = info;\n        const { startTime, timeDeltas = [] } = cpuProfile;\n        return [\n          // @TODO handle naming more intuitively\n          ...(sourceFilePath\n            ? [getProcessNameTraceEvent(pid, tid, sourceFilePath)]\n            : []),\n          getThreadNameTraceEvent(\n            pid,\n            tid,\n            pid !== mainPid || tid !== mainTid ? getThreadName(info) : undefined\n          ),\n          ...cpuProfileToTraceProfileEvents(cpuProfile, {\n            pid,\n            tid,\n          }),\n          // have a random event at the end to hackfix broken view @Todo find real problem\n          getRunTaskTraceEvent(pid, tid, {\n            ts: (startTime ?? 0) + timeDeltas.reduce((ts, d) => ts + d) + 100,\n            dur: 10,\n          }),\n        ];\n      }),\n    ],\n  };\n\n  return traceFile;\n}\n","stats":{"times":{"passes":[{"parse":{"total":3.898084},"rules":{"for-direction":{"total":0.0025},"no-async-promise-executor":{"total":0.000292},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.0029159999999999998},"no-cond-assign":{"total":0.0014990000000000001},"no-constant-binary-expression":{"total":0.085957},"no-constant-condition":{"total":0.00808},"no-control-regex":{"total":0.010334000000000001},"no-debugger":{"total":0.000292},"no-delete-var":{"total":0.000291},"no-dupe-else-if":{"total":0.000416},"no-duplicate-case":{"total":0.000334},"no-empty":{"total":0.0021250000000000006},"no-empty-character-class":{"total":0.00025},"no-empty-pattern":{"total":0.002665},"no-empty-static-block":{"total":0.00025},"no-ex-assign":{"total":0.000375},"no-extra-boolean-cast":{"total":0.0037080000000000004},"no-fallthrough":{"total":0.023875000000000014},"no-global-assign":{"total":0.021084000000000002},"no-invalid-regexp":{"total":0.0031260000000000007},"no-irregular-whitespace":{"total":0.013748999999999999},"no-loss-of-precision":{"total":0.027163},"no-misleading-character-class":{"total":0.011875},"no-nonoctal-decimal-escape":{"total":0.008334000000000001},"no-octal":{"total":0.007876000000000001},"no-prototype-builtins":{"total":0.004334},"no-regex-spaces":{"total":0.020039000000000005},"no-self-assign":{"total":0.000625},"no-shadow-restricted-names":{"total":0.013289},"no-sparse-arrays":{"total":0.0023750000000000004},"no-unsafe-finally":{"total":0.007083000000000001},"no-unsafe-optional-chaining":{"total":0.015585000000000003},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.000375},"no-useless-backreference":{"total":0.003542},"no-useless-catch":{"total":0.000209},"no-useless-escape":{"total":0.018377000000000008},"require-yield":{"total":0.006458},"use-isnan":{"total":0.004667},"valid-typeof":{"total":0.0015},"no-var":{"total":0.002166000000000001},"prefer-const":{"total":0.0031680000000000007},"prefer-rest-params":{"total":0.005376},"prefer-spread":{"total":0.003624},"@typescript-eslint/ban-ts-comment":{"total":0.0165},"@typescript-eslint/no-array-constructor":{"total":0.004208000000000001},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001125},"@typescript-eslint/no-empty-object-type":{"total":0.0045839999999999995},"@typescript-eslint/no-explicit-any":{"total":0.002917},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000958},"@typescript-eslint/no-misused-new":{"total":0.001125},"@typescript-eslint/no-namespace":{"total":0.002208},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000917},"@typescript-eslint/no-this-alias":{"total":0.002458},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.005375},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.00125},"@typescript-eslint/no-unsafe-function-type":{"total":0.003918},"@typescript-eslint/no-unused-expressions":{"total":0.008667},"@typescript-eslint/no-unused-vars":{"total":0.8743340000000001},"@typescript-eslint/no-wrapper-object-types":{"total":0.004832999999999998},"@typescript-eslint/prefer-as-const":{"total":0.0037490000000000006},"@typescript-eslint/prefer-namespace-keyword":{"total":0.001042},"@typescript-eslint/triple-slash-reference":{"total":0.008206999999999999},"@typescript-eslint/no-non-null-assertion":{"total":0.000833},"@typescript-eslint/adjacent-overload-signatures":{"total":0.018917000000000003},"@typescript-eslint/no-empty-function":{"total":0.042915999999999996},"@typescript-eslint/no-inferrable-types":{"total":0.04670900000000001},"@typescript-eslint/no-empty-interface":{"total":0.002},"@nx/enforce-module-boundaries":{"total":0.060501}},"fix":{"total":0},"total":7.052833}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/lib/cpuprofile.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.655083},"rules":{"for-direction":{"total":0.002083},"no-async-promise-executor":{"total":0.000292},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.000875},"no-cond-assign":{"total":0.001042},"no-constant-binary-expression":{"total":0.000375},"no-constant-condition":{"total":0.001166},"no-control-regex":{"total":0.00025},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.000167},"no-dupe-else-if":{"total":0.000375},"no-duplicate-case":{"total":0.000458},"no-empty":{"total":0.0005},"no-empty-character-class":{"total":0.000209},"no-empty-pattern":{"total":0.000541},"no-empty-static-block":{"total":0.000292},"no-ex-assign":{"total":0.00025},"no-extra-boolean-cast":{"total":0.001166},"no-fallthrough":{"total":0.005083},"no-global-assign":{"total":0.02125},"no-invalid-regexp":{"total":0.000583},"no-irregular-whitespace":{"total":0.004875},"no-loss-of-precision":{"total":0.000542},"no-misleading-character-class":{"total":0.009833},"no-nonoctal-decimal-escape":{"total":0.00025},"no-octal":{"total":0.000208},"no-prototype-builtins":{"total":0.000542},"no-regex-spaces":{"total":0.000292},"no-self-assign":{"total":0.000542},"no-shadow-restricted-names":{"total":0.000709},"no-sparse-arrays":{"total":0.000209},"no-unsafe-finally":{"total":0.000333},"no-unsafe-optional-chaining":{"total":0.001},"no-unused-labels":{"total":0.000417},"no-unused-private-class-members":{"total":0.000375},"no-useless-backreference":{"total":0.003332},"no-useless-catch":{"total":0.000208},"no-useless-escape":{"total":0.001041},"require-yield":{"total":0.000375},"use-isnan":{"total":0.001125},"valid-typeof":{"total":0.001334},"no-var":{"total":0.000291},"prefer-const":{"total":0.001},"prefer-rest-params":{"total":0.000292},"prefer-spread":{"total":0.00025},"@typescript-eslint/ban-ts-comment":{"total":0.013874999999999998},"@typescript-eslint/no-array-constructor":{"total":0.001333},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001083},"@typescript-eslint/no-empty-object-type":{"total":0.004333},"@typescript-eslint/no-explicit-any":{"total":0.00225},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001},"@typescript-eslint/no-misused-new":{"total":0.000917},"@typescript-eslint/no-namespace":{"total":0.001917},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000917},"@typescript-eslint/no-this-alias":{"total":0.001959},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.004334},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.07291600000000001},"@typescript-eslint/no-unsafe-function-type":{"total":0.001834},"@typescript-eslint/no-unused-expressions":{"total":0.007166},"@typescript-eslint/no-unused-vars":{"total":1.880375},"@typescript-eslint/no-wrapper-object-types":{"total":0.002124},"@typescript-eslint/prefer-as-const":{"total":0.000875},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000833},"@typescript-eslint/triple-slash-reference":{"total":0.005625},"@typescript-eslint/no-non-null-assertion":{"total":0.000792},"@typescript-eslint/adjacent-overload-signatures":{"total":0.009418},"@typescript-eslint/no-empty-function":{"total":0.003875},"@typescript-eslint/no-inferrable-types":{"total":0.003541},"@typescript-eslint/no-empty-interface":{"total":0.0027500000000000003},"@nx/enforce-module-boundaries":{"total":0.015166}},"fix":{"total":0},"total":3.627458}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/lib/file-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.760625},"rules":{"for-direction":{"total":0.002917},"no-async-promise-executor":{"total":0.000375},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.001},"no-cond-assign":{"total":0.001166},"no-constant-binary-expression":{"total":0.0005},"no-constant-condition":{"total":0.0027500000000000003},"no-control-regex":{"total":0.0015409999999999998},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.00025},"no-dupe-else-if":{"total":0.0005},"no-duplicate-case":{"total":0.000459},"no-empty":{"total":0.001333},"no-empty-character-class":{"total":0.000209},"no-empty-pattern":{"total":0.000708},"no-empty-static-block":{"total":0.000334},"no-ex-assign":{"total":0.000292},"no-extra-boolean-cast":{"total":0.0020840000000000003},"no-fallthrough":{"total":0.006918999999999999},"no-global-assign":{"total":0.022708},"no-invalid-regexp":{"total":0.002458},"no-irregular-whitespace":{"total":0.003041},"no-loss-of-precision":{"total":0.001374},"no-misleading-character-class":{"total":0.07062500000000001},"no-nonoctal-decimal-escape":{"total":0.0012079999999999999},"no-octal":{"total":0.000792},"no-prototype-builtins":{"total":0.002458},"no-regex-spaces":{"total":0.00375},"no-self-assign":{"total":0.000583},"no-shadow-restricted-names":{"total":0.003626},"no-sparse-arrays":{"total":0.000334},"no-unsafe-finally":{"total":0.004418},"no-unsafe-optional-chaining":{"total":0.0027509999999999995},"no-unused-labels":{"total":0.000417},"no-unused-private-class-members":{"total":0.000458},"no-useless-backreference":{"total":0.004542},"no-useless-catch":{"total":0.000208},"no-useless-escape":{"total":0.002459},"require-yield":{"total":0.0017500000000000003},"use-isnan":{"total":0.001208},"valid-typeof":{"total":0.0016669999999999999},"no-var":{"total":0.000375},"prefer-const":{"total":0.001583},"prefer-rest-params":{"total":0.002666},"prefer-spread":{"total":0.002},"@typescript-eslint/ban-ts-comment":{"total":0.015334},"@typescript-eslint/no-array-constructor":{"total":0.002209},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001083},"@typescript-eslint/no-empty-object-type":{"total":0.005125},"@typescript-eslint/no-explicit-any":{"total":0.003542},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001042},"@typescript-eslint/no-misused-new":{"total":0.001167},"@typescript-eslint/no-namespace":{"total":0.002709},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001042},"@typescript-eslint/no-this-alias":{"total":0.003041},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.006083},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.005708},"@typescript-eslint/no-unsafe-function-type":{"total":0.001792},"@typescript-eslint/no-unused-expressions":{"total":0.010083},"@typescript-eslint/no-unused-vars":{"total":0.488499},"@typescript-eslint/no-wrapper-object-types":{"total":0.0022500000000000003},"@typescript-eslint/prefer-as-const":{"total":0.001041},"@typescript-eslint/prefer-namespace-keyword":{"total":0.001083},"@typescript-eslint/triple-slash-reference":{"total":0.009042999999999999},"@typescript-eslint/no-non-null-assertion":{"total":0.000833},"@typescript-eslint/adjacent-overload-signatures":{"total":0.010544},"@typescript-eslint/no-empty-function":{"total":0.017375},"@typescript-eslint/no-inferrable-types":{"total":0.006790999999999999},"@typescript-eslint/no-empty-interface":{"total":0.002708},"@nx/enforce-module-boundaries":{"total":0.034334}},"fix":{"total":0},"total":2.606375}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/lib/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.20125},"rules":{"for-direction":{"total":0.001709},"no-async-promise-executor":{"total":0.000291},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.000833},"no-cond-assign":{"total":0.000917},"no-constant-binary-expression":{"total":0.000375},"no-constant-condition":{"total":0.001},"no-control-regex":{"total":0.0008749999999999999},"no-debugger":{"total":0.000208},"no-delete-var":{"total":0.000291},"no-dupe-else-if":{"total":0.000458},"no-duplicate-case":{"total":0.00025},"no-empty":{"total":0.000709},"no-empty-character-class":{"total":0.000208},"no-empty-pattern":{"total":0.000584},"no-empty-static-block":{"total":0.00025},"no-ex-assign":{"total":0.000292},"no-extra-boolean-cast":{"total":0.001083},"no-fallthrough":{"total":0.0039169999999999995},"no-global-assign":{"total":0.020208},"no-invalid-regexp":{"total":0.000625},"no-irregular-whitespace":{"total":0.0017920000000000002},"no-loss-of-precision":{"total":0.000959},"no-misleading-character-class":{"total":0.014209},"no-nonoctal-decimal-escape":{"total":0.0009170000000000001},"no-octal":{"total":0.0005009999999999999},"no-prototype-builtins":{"total":0.000416},"no-regex-spaces":{"total":0.000791},"no-self-assign":{"total":0.0005},"no-shadow-restricted-names":{"total":0.000541},"no-sparse-arrays":{"total":0.000417},"no-unsafe-finally":{"total":0.000291},"no-unsafe-optional-chaining":{"total":0.001084},"no-unused-labels":{"total":0.000583},"no-unused-private-class-members":{"total":0.000459},"no-useless-backreference":{"total":0.004125},"no-useless-catch":{"total":0.00025},"no-useless-escape":{"total":0.002209},"require-yield":{"total":0.000542},"use-isnan":{"total":0.001083},"valid-typeof":{"total":0.001792},"no-var":{"total":0.00025},"prefer-const":{"total":0.0011259999999999998},"prefer-rest-params":{"total":0.000333},"prefer-spread":{"total":0.000291},"@typescript-eslint/ban-ts-comment":{"total":0.010542},"@typescript-eslint/no-array-constructor":{"total":0.001458},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000917},"@typescript-eslint/no-empty-object-type":{"total":0.003875},"@typescript-eslint/no-explicit-any":{"total":0.003291},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001083},"@typescript-eslint/no-misused-new":{"total":0.001042},"@typescript-eslint/no-namespace":{"total":0.001958},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.006375},"@typescript-eslint/no-this-alias":{"total":0.006875},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.005666},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.0015},"@typescript-eslint/no-unsafe-function-type":{"total":0.001084},"@typescript-eslint/no-unused-expressions":{"total":0.022959},"@typescript-eslint/no-unused-vars":{"total":0.473084},"@typescript-eslint/no-wrapper-object-types":{"total":0.001709},"@typescript-eslint/prefer-as-const":{"total":0.001},"@typescript-eslint/prefer-namespace-keyword":{"total":0.001209},"@typescript-eslint/triple-slash-reference":{"total":0.06125},"@typescript-eslint/no-non-null-assertion":{"total":0.000959},"@typescript-eslint/adjacent-overload-signatures":{"total":0.00275},"@typescript-eslint/no-empty-function":{"total":0.0045},"@typescript-eslint/no-inferrable-types":{"total":0.003916},"@typescript-eslint/no-empty-interface":{"total":0.002166},"@nx/enforce-module-boundaries":{"total":0.050001000000000004}},"fix":{"total":0},"total":2.881125}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/lib/merge-cpuprofile-files.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":1.1655},"rules":{"for-direction":{"total":0.002209},"no-async-promise-executor":{"total":0.000375},"no-case-declarations":{"total":0.000208},"no-compare-neg-zero":{"total":0.001},"no-cond-assign":{"total":0.001041},"no-constant-binary-expression":{"total":0.000292},"no-constant-condition":{"total":0.001},"no-control-regex":{"total":0.005416000000000001},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.000208},"no-dupe-else-if":{"total":0.000542},"no-duplicate-case":{"total":0.000333},"no-empty":{"total":0.0011249999999999997},"no-empty-character-class":{"total":0.000209},"no-empty-pattern":{"total":0.00075},"no-empty-static-block":{"total":0.00025},"no-ex-assign":{"total":0.00025},"no-extra-boolean-cast":{"total":0.003667000000000001},"no-fallthrough":{"total":0.005292000000000001},"no-global-assign":{"total":0.022875},"no-invalid-regexp":{"total":0.0033740000000000007},"no-irregular-whitespace":{"total":0.004},"no-loss-of-precision":{"total":0.011043},"no-misleading-character-class":{"total":0.011290999999999999},"no-nonoctal-decimal-escape":{"total":0.004126},"no-octal":{"total":0.0032910000000000014},"no-prototype-builtins":{"total":0.004249},"no-regex-spaces":{"total":0.018000000000000006},"no-self-assign":{"total":0.000458},"no-shadow-restricted-names":{"total":0.006919000000000001},"no-sparse-arrays":{"total":0.000333},"no-unsafe-finally":{"total":0.001416},"no-unsafe-optional-chaining":{"total":0.006959999999999997},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.000375},"no-useless-backreference":{"total":0.004542},"no-useless-catch":{"total":0.000208},"no-useless-escape":{"total":0.006665999999999998},"require-yield":{"total":0.0005},"use-isnan":{"total":0.001042},"valid-typeof":{"total":0.001542},"no-var":{"total":0.0012500000000000002},"prefer-const":{"total":0.0020829999999999998},"prefer-rest-params":{"total":0.000291},"prefer-spread":{"total":0.004084000000000001},"@typescript-eslint/ban-ts-comment":{"total":0.009666999999999999},"@typescript-eslint/no-array-constructor":{"total":0.004833},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001292},"@typescript-eslint/no-empty-object-type":{"total":0.003333},"@typescript-eslint/no-explicit-any":{"total":0.002708},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000875},"@typescript-eslint/no-misused-new":{"total":0.000875},"@typescript-eslint/no-namespace":{"total":0.001833},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000917},"@typescript-eslint/no-this-alias":{"total":0.00225},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.005709},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001208},"@typescript-eslint/no-unsafe-function-type":{"total":0.000917},"@typescript-eslint/no-unused-expressions":{"total":0.012164},"@typescript-eslint/no-unused-vars":{"total":0.549666},"@typescript-eslint/no-wrapper-object-types":{"total":0.001084},"@typescript-eslint/prefer-as-const":{"total":0.0019160000000000002},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000791},"@typescript-eslint/triple-slash-reference":{"total":0.009918},"@typescript-eslint/no-non-null-assertion":{"total":0.000791},"@typescript-eslint/adjacent-overload-signatures":{"total":0.008083},"@typescript-eslint/no-empty-function":{"total":0.015251},"@typescript-eslint/no-inferrable-types":{"total":0.005249000000000001},"@typescript-eslint/no-empty-interface":{"total":0.00175},"@nx/enforce-module-boundaries":{"total":0.07166700000000001}},"fix":{"total":0},"total":3.059958}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/lib/merge-cpuprofile-files.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":1.261875},"rules":{"for-direction":{"total":0.002166},"no-async-promise-executor":{"total":0.000333},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.006126},"no-cond-assign":{"total":0.001584},"no-constant-binary-expression":{"total":0.012124000000000001},"no-constant-condition":{"total":0.007166},"no-control-regex":{"total":0.003999},"no-debugger":{"total":0.000208},"no-delete-var":{"total":0.000292},"no-dupe-else-if":{"total":0.005499},"no-duplicate-case":{"total":0.000334},"no-empty":{"total":0.0015420000000000002},"no-empty-character-class":{"total":0.00025},"no-empty-pattern":{"total":0.000542},"no-empty-static-block":{"total":0.000416},"no-ex-assign":{"total":0.00025},"no-extra-boolean-cast":{"total":0.003915},"no-fallthrough":{"total":0.011501000000000003},"no-global-assign":{"total":0.020459},"no-invalid-regexp":{"total":0.0032070000000000006},"no-irregular-whitespace":{"total":0.005042},"no-loss-of-precision":{"total":0.010624},"no-misleading-character-class":{"total":0.012541},"no-nonoctal-decimal-escape":{"total":0.003375000000000001},"no-octal":{"total":0.003334000000000001},"no-prototype-builtins":{"total":0.004375},"no-regex-spaces":{"total":0.016209},"no-self-assign":{"total":0.000584},"no-shadow-restricted-names":{"total":0.008209000000000001},"no-sparse-arrays":{"total":0.000209},"no-unsafe-finally":{"total":0.005125000000000001},"no-unsafe-optional-chaining":{"total":0.009168999999999998},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.000334},"no-useless-backreference":{"total":0.0032500000000000003},"no-useless-catch":{"total":0.00025},"no-useless-escape":{"total":0.007332},"require-yield":{"total":0.000833},"use-isnan":{"total":0.07849900000000001},"valid-typeof":{"total":0.001416},"no-var":{"total":0.0014170000000000003},"prefer-const":{"total":0.0022500000000000003},"prefer-rest-params":{"total":0.001417},"prefer-spread":{"total":0.00425},"@typescript-eslint/ban-ts-comment":{"total":0.010666},"@typescript-eslint/no-array-constructor":{"total":0.0042910000000000005},"@typescript-eslint/no-duplicate-enum-values":{"total":0.000958},"@typescript-eslint/no-empty-object-type":{"total":0.003125},"@typescript-eslint/no-explicit-any":{"total":0.002167},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000875},"@typescript-eslint/no-misused-new":{"total":0.001},"@typescript-eslint/no-namespace":{"total":0.00175},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000958},"@typescript-eslint/no-this-alias":{"total":0.001958},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.005084},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.00125},"@typescript-eslint/no-unsafe-function-type":{"total":0.001915},"@typescript-eslint/no-unused-expressions":{"total":0.009958},"@typescript-eslint/no-unused-vars":{"total":0.418208},"@typescript-eslint/no-wrapper-object-types":{"total":0.002334},"@typescript-eslint/prefer-as-const":{"total":0.010666},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000791},"@typescript-eslint/triple-slash-reference":{"total":0.007332999999999999},"@typescript-eslint/no-non-null-assertion":{"total":0.000792},"@typescript-eslint/adjacent-overload-signatures":{"total":0.012457},"@typescript-eslint/no-empty-function":{"total":0.020458999999999998},"@typescript-eslint/no-inferrable-types":{"total":0.009664},"@typescript-eslint/no-empty-interface":{"total":0.001667},"@nx/enforce-module-boundaries":{"total":0.064376}},"fix":{"total":0},"total":3.209333}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/lib/profile-selection.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":1.791917},"rules":{"for-direction":{"total":0.003584},"no-async-promise-executor":{"total":0.000375},"no-case-declarations":{"total":0.000292},"no-compare-neg-zero":{"total":0.001},"no-cond-assign":{"total":0.001417},"no-constant-binary-expression":{"total":0.000292},"no-constant-condition":{"total":0.001459},"no-control-regex":{"total":0.007831},"no-debugger":{"total":0.000292},"no-delete-var":{"total":0.00025},"no-dupe-else-if":{"total":0.000583},"no-duplicate-case":{"total":0.000459},"no-empty":{"total":0.0015010000000000002},"no-empty-character-class":{"total":0.00025},"no-empty-pattern":{"total":0.000708},"no-empty-static-block":{"total":0.000292},"no-ex-assign":{"total":0.000375},"no-extra-boolean-cast":{"total":0.008791000000000002},"no-fallthrough":{"total":0.009129},"no-global-assign":{"total":0.023416},"no-invalid-regexp":{"total":0.015460000000000003},"no-irregular-whitespace":{"total":0.006},"no-loss-of-precision":{"total":0.04654000000000002},"no-misleading-character-class":{"total":0.015833},"no-nonoctal-decimal-escape":{"total":0.006377},"no-octal":{"total":0.010038000000000002},"no-prototype-builtins":{"total":0.007159000000000002},"no-regex-spaces":{"total":0.03058800000000001},"no-self-assign":{"total":0.000666},"no-shadow-restricted-names":{"total":0.014253000000000002},"no-sparse-arrays":{"total":0.001792},"no-unsafe-finally":{"total":0.000333},"no-unsafe-optional-chaining":{"total":0.012207000000000004},"no-unused-labels":{"total":0.000459},"no-unused-private-class-members":{"total":0.0005},"no-useless-backreference":{"total":0.008459},"no-useless-catch":{"total":0.000209},"no-useless-escape":{"total":0.010165},"require-yield":{"total":0.000459},"use-isnan":{"total":0.00125},"valid-typeof":{"total":0.001583},"no-var":{"total":0.005001},"prefer-const":{"total":0.002875000000000001},"prefer-rest-params":{"total":0.000375},"prefer-spread":{"total":0.006792999999999999},"@typescript-eslint/ban-ts-comment":{"total":0.017208},"@typescript-eslint/no-array-constructor":{"total":0.006832},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001292},"@typescript-eslint/no-empty-object-type":{"total":0.004458},"@typescript-eslint/no-explicit-any":{"total":0.003583},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001083},"@typescript-eslint/no-misused-new":{"total":0.001084},"@typescript-eslint/no-namespace":{"total":0.002458},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000958},"@typescript-eslint/no-this-alias":{"total":0.003},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.011416},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001458},"@typescript-eslint/no-unsafe-function-type":{"total":0.001375},"@typescript-eslint/no-unused-expressions":{"total":0.023125000000000003},"@typescript-eslint/no-unused-vars":{"total":0.39616799999999996},"@typescript-eslint/no-wrapper-object-types":{"total":0.0021669999999999997},"@typescript-eslint/prefer-as-const":{"total":0.0041670000000000006},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000875},"@typescript-eslint/triple-slash-reference":{"total":0.00954},"@typescript-eslint/no-non-null-assertion":{"total":0.001},"@typescript-eslint/adjacent-overload-signatures":{"total":0.009706999999999999},"@typescript-eslint/no-empty-function":{"total":0.028043},"@typescript-eslint/no-inferrable-types":{"total":0.011373999999999999},"@typescript-eslint/no-empty-interface":{"total":0.002416},"@nx/enforce-module-boundaries":{"total":0.10883400000000001}},"fix":{"total":0},"total":3.993875}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/lib/profile-selection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.845459},"rules":{"for-direction":{"total":0.003916},"no-async-promise-executor":{"total":0.000416},"no-case-declarations":{"total":0.000291},"no-compare-neg-zero":{"total":0.004749},"no-cond-assign":{"total":0.0027080000000000003},"no-constant-binary-expression":{"total":0.008708},"no-constant-condition":{"total":0.010625},"no-control-regex":{"total":0.0025830000000000002},"no-debugger":{"total":0.000334},"no-delete-var":{"total":0.000375},"no-dupe-else-if":{"total":0.007792},"no-duplicate-case":{"total":0.000458},"no-empty":{"total":0.002084},"no-empty-character-class":{"total":0.00025},"no-empty-pattern":{"total":0.000708},"no-empty-static-block":{"total":0.000375},"no-ex-assign":{"total":0.000375},"no-extra-boolean-cast":{"total":0.003833},"no-fallthrough":{"total":0.012084000000000004},"no-global-assign":{"total":0.023126},"no-invalid-regexp":{"total":0.003167},"no-irregular-whitespace":{"total":0.0037920000000000002},"no-loss-of-precision":{"total":0.002375},"no-misleading-character-class":{"total":0.015917},"no-nonoctal-decimal-escape":{"total":0.002125},"no-octal":{"total":0.002625},"no-prototype-builtins":{"total":0.001292},"no-regex-spaces":{"total":0.005333},"no-self-assign":{"total":0.000625},"no-shadow-restricted-names":{"total":0.004542000000000001},"no-sparse-arrays":{"total":0.000417},"no-unsafe-finally":{"total":0.008793},"no-unsafe-optional-chaining":{"total":0.005334999999999999},"no-unused-labels":{"total":0.0005},"no-unused-private-class-members":{"total":0.0005},"no-useless-backreference":{"total":0.00475},"no-useless-catch":{"total":0.000292},"no-useless-escape":{"total":0.0038320000000000003},"require-yield":{"total":0.001625},"use-isnan":{"total":0.020708999999999998},"valid-typeof":{"total":0.002083},"no-var":{"total":0.000333},"prefer-const":{"total":0.0022500000000000003},"prefer-rest-params":{"total":0.002041},"prefer-spread":{"total":0.00125},"@typescript-eslint/ban-ts-comment":{"total":0.009500000000000001},"@typescript-eslint/no-array-constructor":{"total":0.002499},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001333},"@typescript-eslint/no-empty-object-type":{"total":0.004292},"@typescript-eslint/no-explicit-any":{"total":0.003875},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001},"@typescript-eslint/no-misused-new":{"total":0.001083},"@typescript-eslint/no-namespace":{"total":0.003125},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001041},"@typescript-eslint/no-this-alias":{"total":0.003209},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.0075},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001292},"@typescript-eslint/no-unsafe-function-type":{"total":0.002418},"@typescript-eslint/no-unused-expressions":{"total":0.010375},"@typescript-eslint/no-unused-vars":{"total":0.32991600000000004},"@typescript-eslint/no-wrapper-object-types":{"total":0.006999999999999999},"@typescript-eslint/prefer-as-const":{"total":0.001},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000875},"@typescript-eslint/triple-slash-reference":{"total":0.013708},"@typescript-eslint/no-non-null-assertion":{"total":0.000875},"@typescript-eslint/adjacent-overload-signatures":{"total":0.014875000000000001},"@typescript-eslint/no-empty-function":{"total":0.030832},"@typescript-eslint/no-inferrable-types":{"total":0.007208},"@typescript-eslint/no-empty-interface":{"total":0.002583},"@nx/enforce-module-boundaries":{"total":0.049041}},"fix":{"total":0},"total":4.617792}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/lib/reduce-trace.integration.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'afterEach' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  describe,\n  expect,\n  it,\n  vi,\n  beforeEach,\n  afterEach,\n  beforeAll,\n  afterAll,\n} from 'vitest';\nimport { mkdir, rm } from 'fs/promises';\nimport { join } from 'path';\nimport { fileURLToPath } from 'url';\n\n// Mock fs module at the top level\nvi.mock('fs', async () => {\n  const actual = await vi.importActual('fs');\n  return {\n    ...actual,\n    readFileSync: vi.fn(),\n    writeFileSync: vi.fn(),\n  };\n});\n\nimport { reduceTraceFile } from './reduce-trace';\nimport * as fs from 'fs';\n\ndescribe('reduceTraceFile (integration)', () => {\n  const __dirname = fileURLToPath(new URL('.', import.meta.url));\n  const tmpDir = join(__dirname, '../../../tmp/reduce-trace-test');\n  const mockInputFile = join(tmpDir, 'input.json');\n  const mockOutputFile = join(tmpDir, 'output.json');\n\n  beforeAll(async () => {\n    await rm(tmpDir, { recursive: true, force: true });\n    await mkdir(tmpDir, { recursive: true });\n  });\n\n  afterAll(async () => {\n    await rm(tmpDir, { recursive: true, force: true });\n  });\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  it('should read input file, process trace data, and write output file', () => {\n    vi.mocked(fs.readFileSync).mockReturnValue(\n      JSON.stringify({\n        traceEvents: [\n          { name: 'Regular' },\n          { name: 'ResourceSendRequest', cat: 'netlog' },\n        ],\n      })\n    );\n\n    const result = reduceTraceFile(mockInputFile, mockOutputFile, {\n      filterNetwork: true,\n    });\n\n    expect(fs.readFileSync).toHaveBeenCalledWith(mockInputFile, 'utf8');\n    expect(fs.writeFileSync).toHaveBeenCalledWith(\n      mockOutputFile,\n      expect.stringContaining('Regular'),\n      'utf8'\n    );\n    expect(result.inputFile).toBe(mockInputFile);\n    expect(result.outputFile).toBe(mockOutputFile);\n    expect(result.originalEventCount).toBe(2);\n    expect(result.filteredEventCount).toBe(1);\n  });\n\n  it('should use default filter options when none provided', () => {\n    vi.mocked(fs.readFileSync).mockReturnValue(\n      JSON.stringify({\n        traceEvents: [{ name: 'Regular' }],\n      })\n    );\n\n    const result = reduceTraceFile(mockInputFile, mockOutputFile);\n\n    expect(result.originalEventCount).toBe(1);\n    expect(result.filteredEventCount).toBe(1);\n  });\n});\n","stats":{"times":{"passes":[{"parse":{"total":1.761916},"rules":{"for-direction":{"total":0.003083},"no-async-promise-executor":{"total":0.000375},"no-case-declarations":{"total":0.000541},"no-compare-neg-zero":{"total":0.001125},"no-cond-assign":{"total":0.002292},"no-constant-binary-expression":{"total":0.000333},"no-constant-condition":{"total":0.00125},"no-control-regex":{"total":0.018584},"no-debugger":{"total":0.000292},"no-delete-var":{"total":0.000209},"no-dupe-else-if":{"total":0.000459},"no-duplicate-case":{"total":0.000458},"no-empty":{"total":0.0017080000000000003},"no-empty-character-class":{"total":0.000292},"no-empty-pattern":{"total":0.000625},"no-empty-static-block":{"total":0.000292},"no-ex-assign":{"total":0.00025},"no-extra-boolean-cast":{"total":0.007625000000000001},"no-fallthrough":{"total":0.013917000000000006},"no-global-assign":{"total":0.022208000000000002},"no-invalid-regexp":{"total":0.008125000000000002},"no-irregular-whitespace":{"total":0.005666999999999999},"no-loss-of-precision":{"total":0.026001},"no-misleading-character-class":{"total":0.015292},"no-nonoctal-decimal-escape":{"total":0.0060009999999999985},"no-octal":{"total":0.009668000000000001},"no-prototype-builtins":{"total":0.022668},"no-regex-spaces":{"total":0.044584000000000026},"no-self-assign":{"total":0.000625},"no-shadow-restricted-names":{"total":0.009166},"no-sparse-arrays":{"total":0.0012920000000000002},"no-unsafe-finally":{"total":0.0022500000000000003},"no-unsafe-optional-chaining":{"total":0.015451000000000003},"no-unused-labels":{"total":0.0005},"no-unused-private-class-members":{"total":0.000375},"no-useless-backreference":{"total":0.004334},"no-useless-catch":{"total":0.000292},"no-useless-escape":{"total":0.009250000000000001},"require-yield":{"total":0.000458},"use-isnan":{"total":0.001209},"valid-typeof":{"total":0.001625},"no-var":{"total":0.0038339999999999997},"prefer-const":{"total":0.002417},"prefer-rest-params":{"total":0.000333},"prefer-spread":{"total":0.010334000000000003},"@typescript-eslint/ban-ts-comment":{"total":0.01475},"@typescript-eslint/no-array-constructor":{"total":0.009212},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001375},"@typescript-eslint/no-empty-object-type":{"total":0.004542},"@typescript-eslint/no-explicit-any":{"total":0.00275},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001},"@typescript-eslint/no-misused-new":{"total":0.001458},"@typescript-eslint/no-namespace":{"total":0.002625},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001},"@typescript-eslint/no-this-alias":{"total":0.007416},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.007542},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001291},"@typescript-eslint/no-unsafe-function-type":{"total":0.001125},"@typescript-eslint/no-unused-expressions":{"total":0.022499000000000005},"@typescript-eslint/no-unused-vars":{"total":1.5817910000000002},"@typescript-eslint/no-wrapper-object-types":{"total":0.00125},"@typescript-eslint/prefer-as-const":{"total":0.002125},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000958},"@typescript-eslint/triple-slash-reference":{"total":0.008459000000000003},"@typescript-eslint/no-non-null-assertion":{"total":0.001042},"@typescript-eslint/adjacent-overload-signatures":{"total":0.012750000000000001},"@typescript-eslint/no-empty-function":{"total":0.028127},"@typescript-eslint/no-inferrable-types":{"total":0.007497},"@typescript-eslint/no-empty-interface":{"total":0.002},"@nx/enforce-module-boundaries":{"total":0.09758300000000002}},"fix":{"total":0},"total":5.234167}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/lib/reduce-trace.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":7.751166},"rules":{"for-direction":{"total":0.003209},"no-async-promise-executor":{"total":0.000292},"no-case-declarations":{"total":0.000292},"no-compare-neg-zero":{"total":0.016084},"no-cond-assign":{"total":0.009957000000000002},"no-constant-binary-expression":{"total":0.14995299999999995},"no-constant-condition":{"total":0.05958100000000003},"no-control-regex":{"total":0.028676000000000024},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.004168},"no-dupe-else-if":{"total":0.14412600000000003},"no-duplicate-case":{"total":0.000375},"no-empty":{"total":0.006958999999999998},"no-empty-character-class":{"total":0.000291},"no-empty-pattern":{"total":0.001167},"no-empty-static-block":{"total":0.000292},"no-ex-assign":{"total":0.000292},"no-extra-boolean-cast":{"total":0.07879300000000002},"no-fallthrough":{"total":0.09520300000000007},"no-global-assign":{"total":0.030667},"no-invalid-regexp":{"total":0.016039000000000008},"no-irregular-whitespace":{"total":0.0175},"no-loss-of-precision":{"total":0.03662400000000002},"no-misleading-character-class":{"total":0.013583999999999999},"no-nonoctal-decimal-escape":{"total":0.02316700000000001},"no-octal":{"total":0.01825100000000001},"no-prototype-builtins":{"total":0.028167000000000015},"no-regex-spaces":{"total":0.10887300000000008},"no-self-assign":{"total":0.058917000000000004},"no-shadow-restricted-names":{"total":0.025206000000000006},"no-sparse-arrays":{"total":0.001208},"no-unsafe-finally":{"total":0.02887600000000002},"no-unsafe-optional-chaining":{"total":0.07766200000000005},"no-unused-labels":{"total":0.000417},"no-unused-private-class-members":{"total":0.000417},"no-useless-backreference":{"total":0.003584},"no-useless-catch":{"total":0.00025},"no-useless-escape":{"total":0.032792000000000016},"require-yield":{"total":0.005501000000000001},"use-isnan":{"total":0.017082000000000007},"valid-typeof":{"total":0.00525},"no-var":{"total":0.003750000000000002},"prefer-const":{"total":0.015125000000000001},"prefer-rest-params":{"total":0.008919000000000002},"prefer-spread":{"total":0.026087000000000016},"@typescript-eslint/ban-ts-comment":{"total":0.0305},"@typescript-eslint/no-array-constructor":{"total":0.01799800000000001},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001292},"@typescript-eslint/no-empty-object-type":{"total":0.005459},"@typescript-eslint/no-explicit-any":{"total":0.002875},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000958},"@typescript-eslint/no-misused-new":{"total":0.000958},"@typescript-eslint/no-namespace":{"total":0.002291},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000917},"@typescript-eslint/no-this-alias":{"total":0.002416},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.007083},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.004167},"@typescript-eslint/no-unsafe-function-type":{"total":0.006417999999999998},"@typescript-eslint/no-unused-expressions":{"total":0.01679},"@typescript-eslint/no-unused-vars":{"total":1.387209},"@typescript-eslint/no-wrapper-object-types":{"total":0.013168000000000006},"@typescript-eslint/prefer-as-const":{"total":0.00671},"@typescript-eslint/prefer-namespace-keyword":{"total":0.001083},"@typescript-eslint/triple-slash-reference":{"total":0.012418},"@typescript-eslint/no-non-null-assertion":{"total":0.001166},"@typescript-eslint/adjacent-overload-signatures":{"total":0.055080000000000025},"@typescript-eslint/no-empty-function":{"total":0.18974700000000003},"@typescript-eslint/no-inferrable-types":{"total":0.023917000000000008},"@typescript-eslint/no-empty-interface":{"total":0.003792},"@nx/enforce-module-boundaries":{"total":0.061249}},"fix":{"total":0},"total":16.04325}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/lib/reduce-trace.unit.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'beforeEach' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'afterEach' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'beforeAll' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'afterAll' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mkdir' is defined but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'rm' is defined but never used.","line":11,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'join' is defined but never used.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fileURLToPath' is defined but never used.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FilterOptions' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TraceReductionStats' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'reduceTraceFile' is defined but never used.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fs' is defined but never used.","line":48,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  describe,\n  expect,\n  it,\n  vi,\n  beforeEach,\n  afterEach,\n  beforeAll,\n  afterAll,\n} from 'vitest';\nimport { mkdir, rm } from 'fs/promises';\nimport { join } from 'path';\nimport { fileURLToPath } from 'url';\n\n// Mock fs module at the top level\nvi.mock('fs', async () => {\n  const actual = await vi.importActual('fs');\n  return {\n    ...actual,\n    readFileSync: vi.fn(),\n    writeFileSync: vi.fn(),\n  };\n});\n\nimport {\n  DEFAULT_FILTER_OPTIONS,\n  FilterOptions,\n  TraceReductionStats,\n  isNetworkEvent,\n  isAnimationEvent,\n  isGPUEvent,\n  isStreamingCompileEvent,\n  extractThreadPoolThreads,\n  isEventFromThreadPoolThread,\n  createThreadPoolEventFilter,\n  isThreadPoolEvent,\n  shouldFilterByDuration,\n  shouldFilterByTimestamp,\n  filterTraceEvents,\n  reduceTrace,\n  reduceTraceFile,\n} from './reduce-trace';\nimport {\n  TraceEvent,\n  CompleteEvent,\n  ThreadNameEvent,\n} from './traceprofile.types';\nimport * as fs from 'fs';\n\ndescribe('reduce-trace', () => {\n  describe('DEFAULT_FILTER_OPTIONS', () => {\n    it('should have expected default filter settings', () => {\n      expect(DEFAULT_FILTER_OPTIONS).toEqual({\n        filterNetwork: true,\n        filterAnimation: true,\n        filterGPU: true,\n        filterThreadPool: true,\n        filterStreamingCompile: true,\n        excludeNames: [\n          'ResourceReceivedData',\n          'UpdateCounters',\n          'v8.evaluateModule',\n        ],\n        excludeCats: ['v8.compile'],\n        durMin: 10000,\n      });\n    });\n  });\n\n  describe('isNetworkEvent', () => {\n    it.each([['netlog'], ['loading']])(\n      'should return true for %s category events',\n      (cat) => {\n        const event = { cat } as CompleteEvent;\n        expect(isNetworkEvent(event)).toBe(true);\n      }\n    );\n\n    it.each([['ResourceSendRequest'], ['fetch']])(\n      'should return true for %s name events',\n      (name) => {\n        const event = { name } as CompleteEvent;\n        expect(isNetworkEvent(event)).toBe(true);\n      }\n    );\n\n    it('should return false for non-network events', () => {\n      const event = {\n        name: 'Layout',\n        cat: 'devtools.timeline',\n      } as CompleteEvent;\n      expect(isNetworkEvent(event)).toBe(false);\n    });\n\n    it('should return false for events with no category or name', () => {\n      const event = {} as CompleteEvent;\n      expect(isNetworkEvent(event)).toBe(false);\n    });\n  });\n\n  describe('isAnimationEvent', () => {\n    it.each([['animation'], ['blink.animations']])(\n      'should return true for %s category events',\n      (cat) => {\n        const event = { cat } as CompleteEvent;\n        expect(isAnimationEvent(event)).toBe(true);\n      }\n    );\n\n    it.each([['Animation'], ['RequestAnimationFrame']])(\n      'should return true for %s name events',\n      (name) => {\n        const event = { name } as CompleteEvent;\n        expect(isAnimationEvent(event)).toBe(true);\n      }\n    );\n\n    it('should return false for non-animation events', () => {\n      const event = {\n        name: 'Layout',\n        cat: 'devtools.timeline',\n      } as CompleteEvent;\n      expect(isAnimationEvent(event)).toBe(false);\n    });\n  });\n\n  describe('isGPUEvent', () => {\n    it.each([['gpu'], ['cc']])(\n      'should return true for %s category events',\n      (cat) => {\n        const event = { cat } as CompleteEvent;\n        expect(isGPUEvent(event)).toBe(true);\n      }\n    );\n\n    it.each([['GPUTask'], ['Compositor']])(\n      'should return true for %s name events',\n      (name) => {\n        const event = { name } as CompleteEvent;\n        expect(isGPUEvent(event)).toBe(true);\n      }\n    );\n\n    it('should return false for non-GPU events', () => {\n      const event = {\n        name: 'Layout',\n        cat: 'devtools.timeline',\n      } as CompleteEvent;\n      expect(isGPUEvent(event)).toBe(false);\n    });\n  });\n\n  describe('isStreamingCompileEvent', () => {\n    it.each([['StreamCompileTask'], ['CompileTask']])(\n      'should return true for %s name events',\n      (name) => {\n        const event = { name } as CompleteEvent;\n        expect(isStreamingCompileEvent(event)).toBe(true);\n      }\n    );\n\n    it('should return true for v8.wasm category with Streaming name', () => {\n      const event = { cat: 'v8.wasm', name: 'Streaming' } as CompleteEvent;\n      expect(isStreamingCompileEvent(event)).toBe(true);\n    });\n\n    it('should return false for non-streaming compile events', () => {\n      const event = {\n        name: 'Layout',\n        cat: 'devtools.timeline',\n      } as CompleteEvent;\n      expect(isStreamingCompileEvent(event)).toBe(false);\n    });\n  });\n\n  describe('extractThreadPoolThreads', () => {\n    it('should extract thread pool threads from metadata events', () => {\n      const events: TraceEvent[] = [\n        {\n          ph: 'M',\n          name: 'thread_name',\n          args: { name: 'ThreadPoolBackgroundWorker' },\n          pid: 1,\n          tid: 100,\n        } as unknown as ThreadNameEvent,\n        {\n          ph: 'M',\n          name: 'thread_name',\n          args: { name: 'CrRendererMain' },\n          pid: 1,\n          tid: 200,\n        } as unknown as ThreadNameEvent,\n        {\n          ph: 'M',\n          name: 'thread_name',\n          args: { name: 'WorkerThread' },\n          pid: 2,\n          tid: 300,\n        } as unknown as ThreadNameEvent,\n      ];\n\n      const result = extractThreadPoolThreads(events);\n\n      expect(result).toBeInstanceOf(Set);\n      expect(result.has('1-100')).toBe(true);\n      expect(result.has('2-300')).toBe(true);\n      expect(result.has('1-200')).toBe(false);\n    });\n\n    it('should return empty set when no thread pool threads found', () => {\n      const events: TraceEvent[] = [\n        {\n          ph: 'M',\n          name: 'thread_name',\n          args: { name: 'CrRendererMain' },\n          pid: 1,\n          tid: 1,\n        } as unknown as ThreadNameEvent,\n      ];\n\n      const result = extractThreadPoolThreads(events);\n\n      expect(result.size).toBe(0);\n    });\n\n    it('should handle events without required fields gracefully', () => {\n      const events: TraceEvent[] = [\n        {\n          ph: 'M',\n          name: 'thread_name',\n          pid: 1,\n          tid: 1,\n        } as unknown as ThreadNameEvent, // Missing args\n        {\n          ph: 'X',\n          name: 'RegularEvent',\n          pid: 1,\n          tid: 1,\n        } as unknown as CompleteEvent, // Wrong event type\n      ];\n\n      const result = extractThreadPoolThreads(events);\n\n      expect(result.size).toBe(0);\n    });\n  });\n\n  describe('isEventFromThreadPoolThread', () => {\n    it('should return true for events from thread pool threads', () => {\n      const threadPoolThreads = new Set(['1-100', '2-200']);\n      const event = { pid: 1, tid: 100 } as CompleteEvent;\n\n      expect(isEventFromThreadPoolThread(event, threadPoolThreads)).toBe(true);\n    });\n\n    it('should return false for events not from thread pool threads', () => {\n      const threadPoolThreads = new Set(['1-100', '2-200']);\n      const event = { pid: 1, tid: 300 } as CompleteEvent;\n\n      expect(isEventFromThreadPoolThread(event, threadPoolThreads)).toBe(false);\n    });\n\n    it('should return false for events without pid or tid', () => {\n      const threadPoolThreads = new Set(['1-100']);\n      const event = {} as CompleteEvent;\n\n      expect(isEventFromThreadPoolThread(event, threadPoolThreads)).toBe(false);\n    });\n  });\n\n  describe('createThreadPoolEventFilter', () => {\n    it('should create a filter function that identifies thread pool events', () => {\n      const events: TraceEvent[] = [\n        {\n          ph: 'M',\n          name: 'thread_name',\n          args: { name: 'ThreadPoolBackgroundWorker' },\n          pid: 1,\n          tid: 100,\n        } as unknown as ThreadNameEvent,\n      ];\n\n      const filter = createThreadPoolEventFilter(events);\n      const threadPoolEvent = { pid: 1, tid: 100 } as CompleteEvent;\n      const regularEvent = { pid: 1, tid: 200 } as CompleteEvent;\n\n      expect(filter(threadPoolEvent)).toBe(true);\n      expect(filter(regularEvent)).toBe(false);\n    });\n  });\n\n  describe('isThreadPoolEvent (deprecated)', () => {\n    it.each([['ThreadPoolForegroundWorker'], ['BackgroundProcessor::DoWork']])(\n      'should return true for %s name events',\n      (name) => {\n        const event = { name } as CompleteEvent;\n        expect(isThreadPoolEvent(event)).toBe(true);\n      }\n    );\n\n    it('should return true for thread pool category events', () => {\n      const event = { cat: 'thread pool' } as CompleteEvent;\n      expect(isThreadPoolEvent(event)).toBe(true);\n    });\n\n    it('should return true for threadpool in args', () => {\n      const event = {\n        args: { type: 'threadpool' },\n      } as unknown as CompleteEvent;\n      expect(isThreadPoolEvent(event)).toBe(true);\n    });\n\n    it('should return false for non-thread pool events', () => {\n      const event = {\n        name: 'Layout',\n        cat: 'devtools.timeline',\n      } as CompleteEvent;\n      expect(isThreadPoolEvent(event)).toBe(false);\n    });\n  });\n\n  describe('shouldFilterByDuration', () => {\n    it('should return false for events without duration', () => {\n      const event = { ph: 'M', name: 'thread_name' } as ThreadNameEvent; // Metadata events don't have duration\n      expect(shouldFilterByDuration(event, 1000, 5000)).toBe(false);\n    });\n\n    it('should return true for events shorter than minimum duration', () => {\n      const event = { dur: 500 } as CompleteEvent;\n      expect(shouldFilterByDuration(event, 1000)).toBe(true);\n    });\n\n    it('should return true for events longer than maximum duration', () => {\n      const event = { dur: 6000 } as CompleteEvent;\n      expect(shouldFilterByDuration(event, undefined, 5000)).toBe(true);\n    });\n\n    it('should return false for events within duration range', () => {\n      const event = { dur: 3000 } as CompleteEvent;\n      expect(shouldFilterByDuration(event, 1000, 5000)).toBe(false);\n    });\n\n    it('should return false when no duration limits provided', () => {\n      const event = { dur: 3000 } as CompleteEvent;\n      expect(shouldFilterByDuration(event)).toBe(false);\n    });\n  });\n\n  describe('shouldFilterByTimestamp', () => {\n    it('should return false for metadata events regardless of timestamp', () => {\n      const event = { ph: 'M', ts: 500 } as ThreadNameEvent;\n      expect(shouldFilterByTimestamp(event, 1000, 5000)).toBe(false);\n    });\n\n    it('should return false for events without timestamp', () => {\n      const event = {} as CompleteEvent;\n      expect(shouldFilterByTimestamp(event, 1000, 5000)).toBe(false);\n    });\n\n    it('should return true for events earlier than minimum timestamp', () => {\n      const event = { ts: 500 } as CompleteEvent;\n      expect(shouldFilterByTimestamp(event, 1000)).toBe(true);\n    });\n\n    it('should return true for events later than maximum timestamp', () => {\n      const event = { ts: 6000 } as CompleteEvent;\n      expect(shouldFilterByTimestamp(event, undefined, 5000)).toBe(true);\n    });\n\n    it('should return false for events within timestamp range', () => {\n      const event = { ts: 3000 } as CompleteEvent;\n      expect(shouldFilterByTimestamp(event, 1000, 5000)).toBe(false);\n    });\n  });\n\n  describe('filterTraceEvents', () => {\n    it('should filter network events when filterNetwork is true', () => {\n      expect(\n        filterTraceEvents(\n          [\n            {\n              name: 'ResourceSendRequest',\n              cat: 'netlog',\n            } as unknown as CompleteEvent,\n            {\n              name: 'Regular',\n            } as unknown as CompleteEvent,\n          ],\n          { filterNetwork: true }\n        )\n      ).toStrictEqual([expect.objectContaining({ name: 'Regular' })]);\n    });\n\n    it('should filter animation events when filterAnimation is true', () => {\n      expect(\n        filterTraceEvents(\n          [\n            {\n              name: 'Animation',\n              cat: 'blink.animations',\n            } as unknown as CompleteEvent,\n            {\n              name: 'Regular',\n            } as unknown as CompleteEvent,\n          ],\n          { filterAnimation: true }\n        )\n      ).toStrictEqual([expect.objectContaining({ name: 'Regular' })]);\n    });\n\n    it('should filter GPU events when filterGPU is true', () => {\n      expect(\n        filterTraceEvents(\n          [\n            {\n              name: 'GPUTask',\n              cat: 'gpu',\n            } as unknown as CompleteEvent,\n            {\n              name: 'Regular',\n            } as unknown as CompleteEvent,\n          ],\n          { filterGPU: true }\n        )\n      ).toStrictEqual([expect.objectContaining({ name: 'Regular' })]);\n    });\n\n    it('should filter thread pool events when filterThreadPool is true', () => {\n      expect(\n        filterTraceEvents(\n          [\n            {\n              ph: 'M',\n              name: 'thread_name',\n              args: { name: 'worker' },\n              pid: 1,\n              tid: 100,\n            } as unknown as CompleteEvent,\n            {\n              pid: 1,\n              tid: 100,\n            } as unknown as CompleteEvent,\n            {\n              pid: 1,\n              tid: 1,\n            } as unknown as CompleteEvent,\n          ],\n          { filterThreadPool: true }\n        )\n      ).toStrictEqual([\n        expect.objectContaining({ ph: 'M' }),\n        expect.objectContaining({ pid: 1, tid: 1 }),\n      ]);\n    });\n\n    it('should filter streaming compile events when filterStreamingCompile is true', () => {\n      expect(\n        filterTraceEvents(\n          [\n            {\n              name: 'StreamCompileTask',\n            } as unknown as CompleteEvent,\n            {\n              name: 'Regular',\n            } as unknown as CompleteEvent,\n          ],\n          { filterStreamingCompile: true }\n        )\n      ).toStrictEqual([expect.objectContaining({ name: 'Regular' })]);\n    });\n\n    it('should filter by duration when durMin is provided', () => {\n      expect(\n        filterTraceEvents(\n          [\n            {\n              name: 'ShortDuration',\n              dur: 5000,\n            } as unknown as CompleteEvent,\n            {\n              name: 'LongDuration',\n              dur: 15000,\n            } as unknown as CompleteEvent,\n          ],\n          { durMin: 10000 }\n        )\n      ).toStrictEqual([expect.objectContaining({ name: 'LongDuration' })]);\n    });\n\n    it('should return all events when no filters are applied', () => {\n      expect(\n        filterTraceEvents(\n          [\n            { name: 'Event1' } as unknown as CompleteEvent,\n            { name: 'Event2' } as unknown as CompleteEvent,\n          ],\n          {}\n        )\n      ).toStrictEqual([\n        expect.objectContaining({ name: 'Event1' }),\n        expect.objectContaining({ name: 'Event2' }),\n      ]);\n    });\n  });\n\n  describe('reduceTrace', () => {\n    it('should reduce trace data and return filtered data with stats', () => {\n      const result = reduceTrace(\n        JSON.stringify({\n          traceEvents: [\n            { name: 'Regular' },\n            { name: 'ResourceSendRequest', cat: 'netlog' },\n            { name: 'Animation', cat: 'blink.animations' },\n          ],\n          displayTimeUnit: 'ms',\n        }),\n        {\n          filterNetwork: true,\n          filterAnimation: true,\n        }\n      );\n\n      expect(result.stats.originalEventCount).toBe(3);\n      expect(result.stats.filteredEventCount).toBe(1);\n      expect(result.stats.removedEventCount).toBe(2);\n      expect(result.stats.originalSize).toBeGreaterThan(0);\n      expect(result.stats.cleanedSize).toBeGreaterThan(0);\n      expect(result.filteredTraceData).toContain('Regular');\n      expect(result.filteredTraceData).not.toContain('ResourceSendRequest');\n    });\n\n    it('should handle array format trace data', () => {\n      const result = reduceTrace(JSON.stringify([{ name: 'Regular' }]), {}); // Use empty options to avoid default filters\n\n      expect(result.stats.originalEventCount).toBe(1);\n      expect(result.stats.filteredEventCount).toBe(1);\n    });\n\n    it('should throw error for invalid trace data structure', () => {\n      expect(() => reduceTrace(JSON.stringify({ invalidField: [] }))).toThrow(\n        'traceEvents array not found in the trace file'\n      );\n    });\n\n    it('should apply default filter options when none provided', () => {\n      const result = reduceTrace(\n        JSON.stringify({\n          traceEvents: [{ name: 'ResourceSendRequest', cat: 'netlog' }],\n        })\n      );\n\n      expect(result.stats.filteredEventCount).toBe(0); // Network event filtered by default\n    });\n  });\n});\n","stats":{"times":{"passes":[{"parse":{"total":9.726709},"rules":{"for-direction":{"total":0.003584},"no-async-promise-executor":{"total":0.000417},"no-case-declarations":{"total":0.000291},"no-compare-neg-zero":{"total":0.001375},"no-cond-assign":{"total":0.00125},"no-constant-binary-expression":{"total":0.0005},"no-constant-condition":{"total":0.001417},"no-control-regex":{"total":0.05450000000000004},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.000208},"no-dupe-else-if":{"total":0.000541},"no-duplicate-case":{"total":0.000417},"no-empty":{"total":0.009456000000000004},"no-empty-character-class":{"total":0.00025},"no-empty-pattern":{"total":0.000959},"no-empty-static-block":{"total":0.000333},"no-ex-assign":{"total":0.000334},"no-extra-boolean-cast":{"total":0.04437800000000003},"no-fallthrough":{"total":0.05116000000000003},"no-global-assign":{"total":0.020917},"no-invalid-regexp":{"total":0.03907700000000002},"no-irregular-whitespace":{"total":0.026708},"no-loss-of-precision":{"total":0.20978599999999964},"no-misleading-character-class":{"total":0.014041},"no-nonoctal-decimal-escape":{"total":0.04400200000000003},"no-octal":{"total":0.03851100000000004},"no-prototype-builtins":{"total":0.05308100000000003},"no-regex-spaces":{"total":0.17613199999999887},"no-self-assign":{"total":0.000667},"no-shadow-restricted-names":{"total":0.041044000000000025},"no-sparse-arrays":{"total":0.010582000000000003},"no-unsafe-finally":{"total":0.002166},"no-unsafe-optional-chaining":{"total":0.07074500000000004},"no-unused-labels":{"total":0.000458},"no-unused-private-class-members":{"total":0.000416},"no-useless-backreference":{"total":0.003666},"no-useless-catch":{"total":0.00025},"no-useless-escape":{"total":0.05887300000000004},"require-yield":{"total":0.000417},"use-isnan":{"total":0.001125},"valid-typeof":{"total":0.0016250000000000001},"no-var":{"total":0.006457000000000004},"prefer-const":{"total":0.008253000000000003},"prefer-rest-params":{"total":0.000333},"prefer-spread":{"total":0.05011600000000003},"@typescript-eslint/ban-ts-comment":{"total":0.015917},"@typescript-eslint/no-array-constructor":{"total":0.04012400000000002},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001208},"@typescript-eslint/no-empty-object-type":{"total":0.004125},"@typescript-eslint/no-explicit-any":{"total":0.003417},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001167},"@typescript-eslint/no-misused-new":{"total":0.001},"@typescript-eslint/no-namespace":{"total":0.002542},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001},"@typescript-eslint/no-this-alias":{"total":0.002583},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.007291},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001417},"@typescript-eslint/no-unsafe-function-type":{"total":0.011379000000000002},"@typescript-eslint/no-unused-expressions":{"total":0.07045300000000004},"@typescript-eslint/no-unused-vars":{"total":2.970416},"@typescript-eslint/no-wrapper-object-types":{"total":0.013626000000000006},"@typescript-eslint/prefer-as-const":{"total":0.03587800000000002},"@typescript-eslint/prefer-namespace-keyword":{"total":0.001},"@typescript-eslint/triple-slash-reference":{"total":0.010336000000000003},"@typescript-eslint/no-non-null-assertion":{"total":0.001125},"@typescript-eslint/adjacent-overload-signatures":{"total":0.05841800000000004},"@typescript-eslint/no-empty-function":{"total":0.23058399999999993},"@typescript-eslint/no-inferrable-types":{"total":0.027044000000000016},"@typescript-eslint/no-empty-interface":{"total":0.003583},"@nx/enforce-module-boundaries":{"total":0.08754200000000001}},"fix":{"total":0},"total":18.104167}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/lib/traceprofile.types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[916,919],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[916,919],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1284,1287],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1284,1287],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1348,1351],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1348,1351],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1537,1540],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1537,1540],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":147,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3801,3804],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3801,3804],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":290,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":290,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6567,6570],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6567,6570],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":300,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":300,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6844,6847],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6844,6847],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":315,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":315,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7094,7097],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7094,7097],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":344,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":344,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7671,7674],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7671,7674],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":351,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":351,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7809,7812],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7809,7812],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// TypeScript definitions for Chrome DevTools Trace Event format\n\nimport { CPUProfile } from './cpuprofile.types';\n\nexport type TraceFile = TraceEvent[] | TraceEventContainer;\n\nexport interface TraceEventContainer {\n  traceEvents: TraceEvent[];\n  displayTimeUnit?: 'ms' | 'ns';\n  systemTraceEvents?: string;\n  metadata?: TraceMetadata;\n  stackFrames?: Record<string, StackFrame>;\n  samples?: Sample[];\n  controllerTraceDataKey?: string;\n  powerTraceAsString?: string;\n}\n\n/**\n * Top-level metadata for a trace, as found in `.cpuprofile` and DevTools exports.\n */\nexport interface TraceMetadata {\n  source: string; // e.g. \"DevTools\"\n  startTime: string; // ISO timestamp when trace recorded\n  hardwareConcurrency?: number; // Number of logical processors\n  dataOrigin?: string; // Origin of trace events, e.g. \"TraceEvents\"\n  modifications?: Modifications; // Details of any UI or data modifications\n  [key: string]: any; // Allow additional custom metadata\n}\n\n/**\n * Modifications made to trace data or UI in DevTools export\n */\nexport interface Modifications {\n  entriesModifications: EntriesModifications;\n  initialBreadcrumb: InitialBreadcrumb;\n  annotations: Annotations;\n}\n\n/** Hidden or expandable entries information */\nexport interface EntriesModifications {\n  hiddenEntries: any[]; // IDs or indexes of hidden entries\n  expandableEntries: any[]; // IDs or indexes of expandable entries\n}\n\n/** Initial breadcrumb information for time ranges and window */\nexport interface InitialBreadcrumb {\n  window: BreadcrumbWindow;\n  child: any | null;\n}\n\n/** Time window bounds (min, max) in trace time units (e.g. microseconds) */\nexport interface BreadcrumbWindow {\n  min: number;\n  max: number;\n  range: number;\n}\n\n/**\n * Custom label for a specific trace entry\n */\nexport interface EntryLabel {\n  entryId: number | string; // ID or index of the trace entry\n  label: string; // Label text for the entry\n  color?: string; // Optional display color for the label\n}\n\n/**\n * A time range annotated with a label\n */\nexport interface LabelledTimeRange {\n  startTime: number; // Start timestamp of the range (microseconds)\n  endTime: number; // End timestamp of the range (microseconds)\n  label: string; // Annotation label for the time range\n  color?: string; // Optional display color for the range\n}\n\n/**\n * Link or relation between two trace entries\n */\nexport interface EntryLink {\n  fromEntryId: number | string; // Source entry ID for the link\n  toEntryId: number | string; // Target entry ID for the link\n  linkType?: string; // Optional type or description of the link\n}\n\n/** Annotations such as labels and links between entries */\nexport interface Annotations {\n  entryLabels: EntryLabel[]; // Custom labels for entries\n  labelledTimeRanges: LabelledTimeRange[]; // Time ranges annotated with labels\n  linksBetweenEntries: EntryLink[]; // Links or relations between entries\n}\n\nexport type Phase =\n  // Duration events (begin/end) and complete events:\n  | 'B'\n  | 'E'\n  | 'X'\n  // Instant events:\n  | 'i'\n  // Counter events:\n  | 'C'\n  // Async events (nestable):\n  | 'b'\n  | 'n'\n  | 'e'\n  // Flow events:\n  | 's'\n  | 't'\n  | 'f'\n  // Sample events:\n  | 'P'\n  // Object events:\n  | 'N'\n  | 'O'\n  | 'D'\n  // Metadata events:\n  | 'M'\n  // Memory dump events:\n  | 'V'\n  | 'v'\n  // Mark events:\n  | 'R'\n  // Clock sync events:\n  | 'c'\n  // Context events:\n  | '('\n  | ')'\n  // ID linking events:\n  | '=';\n\n/** Scope values for instant events (ph='i') */\nexport type InstantScope = 't' | 'p' | 'g';\n\n/** Category string for trace events */\nexport type Category<T extends string = string> = `${\n  | 'disabled-by-default-'\n  | ''}${T}`;\n\nexport interface TraceEventBase {\n  ph: Phase;\n  name?: string;\n  cat?: Category;\n  pid?: number;\n  tid?: number;\n  ts: number;\n  tts?: number;\n  args?: Record<string, any>;\n  dur?: number;\n  tdur?: number;\n  sf?: string | number;\n  stack?: Array<string | number>;\n  cname?: string;\n}\n\n/** Event identifier (for async, object, flow events, etc.) */\nexport type EventID = string | number;\n\nexport interface EventID2 {\n  local?: string;\n  global?: string;\n}\n\nexport interface DurationBeginEvent extends TraceEventBase {\n  ph: 'B';\n  name: string;\n}\n\nexport interface DurationEndEvent extends TraceEventBase {\n  ph: 'E';\n}\n\nexport interface CompleteEvent extends TraceEventBase {\n  ph: 'X';\n  name: string;\n  dur: number;\n  tdur?: number;\n}\n\nexport interface InstantEvent extends TraceEventBase {\n  ph: 'i';\n  dur: 0;\n  name: string;\n  s?: InstantScope;\n}\n\nexport interface CounterEvent extends TraceEventBase {\n  ph: 'C';\n  name: string;\n  id?: EventID;\n  args: Record<string, number>;\n}\n\nexport interface AsyncBeginEvent extends TraceEventBase {\n  ph: 'b';\n  name: string;\n  id?: EventID;\n  id2?: EventID2;\n  scope?: string;\n}\n\nexport interface AsyncInstantEvent extends TraceEventBase {\n  ph: 'n';\n  name: string;\n  id?: EventID;\n  id2?: EventID2;\n  scope?: string;\n}\n\nexport interface AsyncEndEvent extends TraceEventBase {\n  ph: 'e';\n  name?: string;\n  id?: EventID;\n  id2?: EventID2;\n  scope?: string;\n}\n\nexport interface FlowStartEvent extends TraceEventBase {\n  ph: 's';\n  name: string;\n  id?: EventID;\n  id2?: EventID2;\n}\n\nexport interface FlowStepEvent extends TraceEventBase {\n  ph: 't';\n  name: string;\n  id?: EventID;\n  id2?: EventID2;\n}\n\nexport interface FlowEndEvent extends TraceEventBase {\n  ph: 'f';\n  name: string;\n  id?: EventID;\n}\n\nexport interface SampleEvent extends TraceEventBase {\n  ph: 'P';\n  name: string;\n  id?: EventID;\n}\n\n/**\n * Frame information for TracingStartedInBrowserEvent\n */\nexport interface Frame {\n  frame: string;\n  isInPrimaryMainFrame: boolean;\n  isOutermostMainFrame: boolean;\n  name: string;\n  processId: number;\n  url: string;\n}\n\n/**\n * Event marking that tracing has started in the browser.\n */\nexport interface TracingStartedInBrowserEvent extends TraceEventBase {\n  ph: 'i';\n  cat: Category<'devtools.timeline'>;\n  name: 'TracingStartedInBrowser';\n  pid: number;\n  tid: number;\n  ts: number;\n  s: InstantScope;\n  args: {\n    data: {\n      frameTreeNodeId: number;\n      frames: Frame[];\n      persistentIds: true;\n    };\n  };\n}\n\nexport interface CpuProfilerStartProfilingEvent extends InstantEvent {\n  cat: Category<'v8'>;\n  name: 'CpuProfiler::StartProfiling';\n  ts: number;\n}\n\nexport interface CpuProfilerStopProfilingEvent extends InstantEvent {\n  cat: Category<'v8'>;\n  name: 'CpuProfiler::StopProfiling';\n  ts: number;\n}\n\nexport interface ProfileEvent extends SampleEvent {\n  cat: Category<'v8.cpu_profiler'>;\n  name: 'Profile';\n  args: { data: { startTime: number; [key: string]: any } };\n}\n\nexport interface ProfileChunkEvent extends SampleEvent {\n  cat: Category<'v8.cpu_profiler'>;\n  name: 'ProfileChunk';\n  args: {\n    data: {\n      cpuProfile: Omit<CPUProfile, 'timeDeltas' | 'startTime' | 'endTime'>;\n      timeDeltas?: number[];\n      [key: string]: any;\n    };\n  };\n}\n\nexport interface ObjectCreatedEvent extends TraceEventBase {\n  ph: 'N';\n  name: string;\n  id: EventID;\n}\n\nexport interface ObjectSnapshotEvent extends TraceEventBase {\n  ph: 'O';\n  name: string;\n  id: EventID;\n  args: { snapshot: any };\n}\n\nexport interface ObjectDestroyedEvent extends TraceEventBase {\n  ph: 'D';\n  name: string;\n  id: EventID;\n}\n\ninterface MetadataEventBase extends TraceEventBase {\n  ph: 'M';\n  cat: '__metadata';\n  pid: number;\n  tid: number;\n}\n\nexport interface ProcessNameEvent extends MetadataEventBase {\n  name: 'process_name';\n  args: { name: string };\n}\n\nexport interface ThreadNameEvent extends MetadataEventBase {\n  name: 'thread_name';\n  args: { name: string };\n}\n\nexport interface GlobalMemoryDumpEvent extends TraceEventBase {\n  ph: 'V';\n  id: EventID;\n  args: Record<string, any>;\n}\n\nexport interface ProcessMemoryDumpEvent extends TraceEventBase {\n  ph: 'v';\n  pid: number;\n  id: EventID;\n  args: Record<string, any>;\n}\n\nexport interface MarkEvent extends TraceEventBase {\n  ph: 'R';\n  name: string;\n}\n\nexport interface ClockSyncEvent extends TraceEventBase {\n  ph: 'c';\n  name: 'clock_sync';\n  args: { sync_id: string; issue_ts?: number };\n}\n\nexport interface ContextEnterEvent extends TraceEventBase {\n  ph: '(';\n  name: string;\n  id: EventID;\n}\n\nexport interface ContextLeaveEvent extends TraceEventBase {\n  ph: ')';\n  name: string;\n  id: EventID;\n}\n\nexport interface IDLinkEvent extends TraceEventBase {\n  ph: '=';\n  name?: string;\n  id: EventID;\n  args: { linked_id: EventID };\n}\n\nexport interface ProcessLabelsEvent extends MetadataEventBase {\n  name: 'process_labels';\n  args: { labels: string };\n}\n\nexport interface ProcessSortIndexEvent extends MetadataEventBase {\n  name: 'process_sort_index';\n  args: { sort_index: number };\n}\n\nexport interface ThreadSortIndexEvent extends MetadataEventBase {\n  name: 'thread_sort_index';\n  args: { sort_index: number };\n}\n\nexport type TraceEvent =\n  | DurationBeginEvent\n  | DurationEndEvent\n  | CompleteEvent\n  | InstantEvent\n  | CounterEvent\n  | AsyncBeginEvent\n  | AsyncInstantEvent\n  | AsyncEndEvent\n  | FlowStartEvent\n  | FlowStepEvent\n  | FlowEndEvent\n  | SampleEvent\n  | TracingStartedInBrowserEvent\n  | CpuProfilerStartProfilingEvent\n  | CpuProfilerStopProfilingEvent\n  | ProfileEvent\n  | ProfileChunkEvent\n  | ObjectCreatedEvent\n  | ObjectSnapshotEvent\n  | ObjectDestroyedEvent\n  | ProcessNameEvent\n  | ProcessLabelsEvent\n  | ProcessSortIndexEvent\n  | ThreadNameEvent\n  | ThreadSortIndexEvent\n  | GlobalMemoryDumpEvent\n  | ProcessMemoryDumpEvent\n  | MarkEvent\n  | ClockSyncEvent\n  | ContextEnterEvent\n  | ContextLeaveEvent\n  | IDLinkEvent;\n\nexport interface StackFrame {\n  name?: string;\n  category?: string;\n  file?: string;\n  line?: number;\n  column?: number;\n  parent?: string;\n}\n\nexport interface Sample {\n  cpu?: number;\n  name: string;\n  ts: number;\n  pid: number;\n  tid: number;\n  weight?: number;\n  sf?: string;\n  stack?: string[];\n}\n","stats":{"times":{"passes":[{"parse":{"total":6.526625},"rules":{"for-direction":{"total":0.002875},"no-async-promise-executor":{"total":0.000459},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.001},"no-cond-assign":{"total":0.001208},"no-constant-binary-expression":{"total":0.000333},"no-constant-condition":{"total":0.001333},"no-control-regex":{"total":0.014250000000000006},"no-debugger":{"total":0.000334},"no-delete-var":{"total":0.00025},"no-dupe-else-if":{"total":0.000625},"no-duplicate-case":{"total":0.0005},"no-empty":{"total":0.000709},"no-empty-character-class":{"total":0.00025},"no-empty-pattern":{"total":0.000625},"no-empty-static-block":{"total":0.000375},"no-ex-assign":{"total":0.000292},"no-extra-boolean-cast":{"total":0.00125},"no-fallthrough":{"total":0.0034159999999999998},"no-global-assign":{"total":0.023334},"no-invalid-regexp":{"total":0.001},"no-irregular-whitespace":{"total":0.016},"no-loss-of-precision":{"total":0.011209000000000007},"no-misleading-character-class":{"total":0.011708},"no-nonoctal-decimal-escape":{"total":0.012460000000000004},"no-octal":{"total":0.010037000000000003},"no-prototype-builtins":{"total":0.0005},"no-regex-spaces":{"total":0.009792000000000004},"no-self-assign":{"total":0.00075},"no-shadow-restricted-names":{"total":0.002208},"no-sparse-arrays":{"total":0.000292},"no-unsafe-finally":{"total":0.000292},"no-unsafe-optional-chaining":{"total":0.000958},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.000417},"no-useless-backreference":{"total":0.003417},"no-useless-catch":{"total":0.00025},"no-useless-escape":{"total":0.022412},"require-yield":{"total":0.000416},"use-isnan":{"total":0.001125},"valid-typeof":{"total":0.001751},"no-var":{"total":0.000292},"prefer-const":{"total":0.001625},"prefer-rest-params":{"total":0.000416},"prefer-spread":{"total":0.000417},"@typescript-eslint/ban-ts-comment":{"total":0.104125},"@typescript-eslint/no-array-constructor":{"total":0.001792},"@typescript-eslint/no-duplicate-enum-values":{"total":0.00125},"@typescript-eslint/no-empty-object-type":{"total":0.105163},"@typescript-eslint/no-explicit-any":{"total":0.13129399999999997},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001125},"@typescript-eslint/no-misused-new":{"total":0.001208},"@typescript-eslint/no-namespace":{"total":0.002334},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000959},"@typescript-eslint/no-this-alias":{"total":0.002458},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.042040999999999995},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.042583000000000024},"@typescript-eslint/no-unsafe-function-type":{"total":0.030042000000000013},"@typescript-eslint/no-unused-expressions":{"total":0.009833},"@typescript-eslint/no-unused-vars":{"total":2.168459},"@typescript-eslint/no-wrapper-object-types":{"total":0.029546000000000017},"@typescript-eslint/prefer-as-const":{"total":0.001041},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000959},"@typescript-eslint/triple-slash-reference":{"total":0.011041},"@typescript-eslint/no-non-null-assertion":{"total":0.001},"@typescript-eslint/adjacent-overload-signatures":{"total":0.07633100000000005},"@typescript-eslint/no-empty-function":{"total":0.004458},"@typescript-eslint/no-inferrable-types":{"total":0.004125},"@typescript-eslint/no-empty-interface":{"total":0.009583000000000003},"@nx/enforce-module-boundaries":{"total":0.046585}},"fix":{"total":0},"total":11.426958}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/lib/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.397},"rules":{"for-direction":{"total":0.002791},"no-async-promise-executor":{"total":0.000333},"no-case-declarations":{"total":0.000334},"no-compare-neg-zero":{"total":0.000958},"no-cond-assign":{"total":0.001167},"no-constant-binary-expression":{"total":0.000292},"no-constant-condition":{"total":0.001208},"no-control-regex":{"total":0.00075},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.00025},"no-dupe-else-if":{"total":0.000458},"no-duplicate-case":{"total":0.000333},"no-empty":{"total":0.000584},"no-empty-character-class":{"total":0.000416},"no-empty-pattern":{"total":0.00075},"no-empty-static-block":{"total":0.000416},"no-ex-assign":{"total":0.00025},"no-extra-boolean-cast":{"total":0.00125},"no-fallthrough":{"total":0.002708},"no-global-assign":{"total":0.02125},"no-invalid-regexp":{"total":0.00075},"no-irregular-whitespace":{"total":0.002584},"no-loss-of-precision":{"total":0.001},"no-misleading-character-class":{"total":0.010791},"no-nonoctal-decimal-escape":{"total":0.00075},"no-octal":{"total":0.000625},"no-prototype-builtins":{"total":0.000458},"no-regex-spaces":{"total":0.000624},"no-self-assign":{"total":0.000584},"no-shadow-restricted-names":{"total":0.001833},"no-sparse-arrays":{"total":0.000333},"no-unsafe-finally":{"total":0.000334},"no-unsafe-optional-chaining":{"total":0.000958},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.000375},"no-useless-backreference":{"total":0.00325},"no-useless-catch":{"total":0.00025},"no-useless-escape":{"total":0.002125},"require-yield":{"total":0.000375},"use-isnan":{"total":0.001291},"valid-typeof":{"total":0.001708},"no-var":{"total":0.000333},"prefer-const":{"total":0.0011250000000000001},"prefer-rest-params":{"total":0.000292},"prefer-spread":{"total":0.000292},"@typescript-eslint/ban-ts-comment":{"total":0.011458},"@typescript-eslint/no-array-constructor":{"total":0.0015},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001167},"@typescript-eslint/no-empty-object-type":{"total":0.004458},"@typescript-eslint/no-explicit-any":{"total":0.002833},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.000959},"@typescript-eslint/no-misused-new":{"total":0.001},"@typescript-eslint/no-namespace":{"total":0.002083},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001},"@typescript-eslint/no-this-alias":{"total":0.002},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.00475},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.005916},"@typescript-eslint/no-unsafe-function-type":{"total":0.001542},"@typescript-eslint/no-unused-expressions":{"total":0.008542},"@typescript-eslint/no-unused-vars":{"total":0.232126},"@typescript-eslint/no-wrapper-object-types":{"total":0.002042},"@typescript-eslint/prefer-as-const":{"total":0.000958},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000916},"@typescript-eslint/triple-slash-reference":{"total":0.006458},"@typescript-eslint/no-non-null-assertion":{"total":0.000875},"@typescript-eslint/adjacent-overload-signatures":{"total":0.004917},"@typescript-eslint/no-empty-function":{"total":0.004416},"@typescript-eslint/no-inferrable-types":{"total":0.004},"@typescript-eslint/no-empty-interface":{"total":0.002417},"@nx/enforce-module-boundaries":{"total":0.033292}},"fix":{"total":0},"total":1.635}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/lib/utils.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":28,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":17},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":28,"column":19,"nodeType":"BlockStatement","messageId":"unexpected","endLine":28,"endColumn":21,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[947,947],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":56,"column":38,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":56,"endColumn":40},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":279,"column":14,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":279,"endColumn":33,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[9336,9337],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { afterAll, beforeEach, describe, expect, it } from 'vitest';\nimport {\n  execWithCpuProf,\n  getCpuProfileName,\n  parseCpuProfileName,\n} from './utils';\nimport { join } from 'path';\nimport { readdir, readFile, rm } from 'fs/promises';\nimport { execSync } from 'node:child_process';\nimport { statSync } from 'node:fs';\nimport { CPUProfile } from './cpuprofile.types';\nimport { mkdir } from 'node:fs/promises';\n\nconst PACKAGE_ROOT = join(__dirname, '..');\nconst PROJECT_ROOT = join(PACKAGE_ROOT, '../..');\nconst TMP_DIR = join(PROJECT_ROOT, 'tmp');\nconst MOCKS_DIR = join(PACKAGE_ROOT, 'mocks');\n\ndescribe.todo(\n  'CPU profile file name generation - This is here to test the official docs and our assumptions',\n  () => {\n    const profGenDir = join(TMP_DIR, 'generate');\n    beforeAll(async () => {\n      try {\n        if (statSync(profGenDir).isDirectory()) {\n          await rm(profGenDir, { recursive: true });\n        }\n      } catch (e) {}\n    });\n\n    afterAll(async () => rm(profGenDir, { recursive: true }));\n\n    it('date in filename is start date (within 1s)', async () => {\n      const outDir = join(profGenDir, 'filename-date-is-start-date');\n      await mkdir(outDir, { recursive: true });\n      const startDate = new Date();\n      const profileDur = 2000;\n\n      // Fire off a very short profile so test doesn't actually wait 10s\n      expect(() =>\n        execSync(\n          `node --cpu-prof --cpu-prof-dir=${outDir} -e \"setTimeout(() => process.exit(0), ${profileDur})\"`\n        )\n      ).not.toThrow();\n\n      const files = await readdir(outDir);\n      expect(files).toHaveLength(1);\n\n      const file = files[0];\n      // Filename pattern: CPU.YYYYMMDD.HHMMSS.PID.TID.N.cpuprofile\n      const m = file.match(\n        /^CPU\\.(\\d{8})\\.(\\d{6})\\.(\\d+)\\.(\\d+)\\.(\\d+)\\.cpuprofile$/\n      );\n      expect(m).not.toBeNull();\n\n      const [, datePart, timePart] = m!;\n\n      // Build a Date from the filename parts (using local time):\n      //  datePart = \"20250510\" → YYYY=2025, MM=05, DD=10\n      //  timePart = \"134625\" →  hh=13, mm=46, ss=25\n      const fileDate = new Date(\n        +datePart.slice(0, 4), // year\n        +datePart.slice(4, 6) - 1, // monthIndex\n        +datePart.slice(6, 8), // day\n        +timePart.slice(0, 2), // hour\n        +timePart.slice(2, 4), // minute\n        +timePart.slice(4, 6) // second\n      );\n\n      const profilePath = join(outDir, file);\n      const profile: Required<CPUProfile> = JSON.parse(\n        (await readFile(profilePath)).toString()\n      );\n      const profileDurMs = (profile.endTime - profile.startTime) / 1000;\n\n      //Check that the duration is correct\n      expect(profileDurMs).toBeGreaterThan(profileDur - 1);\n      expect(profileDurMs).toBeLessThanOrEqual(profileDur + 20);\n\n      const deltaFilenameToStartMs = Math.abs(\n        fileDate.getTime() - startDate.getTime()\n      );\n\n      // Check that the filename date is within 1000ms of the profile start time\n      expect(deltaFilenameToStartMs).toBeLessThanOrEqual(1000);\n      const stats = statSync(profilePath);\n\n      // check the difference from file birthtimeMs and filename date is close to profile duration\n      // this means the date in the file name is younger than the file creating date\n      expect(stats.birthtimeMs - fileDate.getTime()).toBeGreaterThanOrEqual(\n        profileDur\n      );\n      expect(stats.birthtimeMs - fileDate.getTime()).toBeLessThan(\n        profileDur + 1000\n      );\n    });\n  }\n);\n\ndescribe('getCpuProfileName', () => {\n  const sequenceMap = new Map();\n  const testDate = new Date(2025, 4, 10, 13, 46, 25); // May 10, 2025, 13:46:25\n\n  beforeEach(() => {\n    sequenceMap.clear();\n  });\n\n  it('should create a CPU profile name in format PREFIX.YYYYMMDD.HHMMSS.PID.TID.SEQ.EXT', async () => {\n    expect(\n      getCpuProfileName(\n        {\n          prefix: 'CPU',\n          pid: 51430,\n          tid: 0,\n          date: testDate,\n        },\n        sequenceMap\n      )\n    ).toBe('CPU.20250510.134625.51430.0.001.cpuprofile');\n  });\n\n  it('should increment sequence number for same PID-TID combination', () => {\n    expect(\n      getCpuProfileName({ pid: 12345, tid: 0, date: testDate }, sequenceMap)\n    ).toBe('CPU.20250510.134625.12345.0.001.cpuprofile');\n    expect(\n      getCpuProfileName({ pid: 12345, tid: 0, date: testDate }, sequenceMap)\n    ).toBe('CPU.20250510.134625.12345.0.002.cpuprofile');\n    expect(\n      getCpuProfileName({ pid: 12345, tid: 0, date: testDate }, sequenceMap)\n    ).toBe('CPU.20250510.134625.12345.0.003.cpuprofile');\n  });\n\n  it('should not increment sequence number for different PID combination', () => {\n    expect(\n      getCpuProfileName({ pid: 12345, tid: 0, date: testDate }, sequenceMap)\n    ).toBe('CPU.20250510.134625.12345.0.001.cpuprofile');\n    expect(\n      getCpuProfileName({ pid: 12346, tid: 0, date: testDate }, sequenceMap)\n    ).toBe('CPU.20250510.134625.12346.0.001.cpuprofile');\n    expect(\n      getCpuProfileName({ pid: 12347, tid: 0, date: testDate }, sequenceMap)\n    ).toBe('CPU.20250510.134625.12347.0.001.cpuprofile');\n  });\n\n  it('should not increment sequence number for different TID combination', () => {\n    expect(\n      getCpuProfileName({ pid: 12345, tid: 1, date: testDate }, sequenceMap)\n    ).toBe('CPU.20250510.134625.12345.1.001.cpuprofile');\n    expect(\n      getCpuProfileName({ pid: 12345, tid: 2, date: testDate }, sequenceMap)\n    ).toBe('CPU.20250510.134625.12345.2.001.cpuprofile');\n    expect(\n      getCpuProfileName({ pid: 12345, tid: 3, date: testDate }, sequenceMap)\n    ).toBe('CPU.20250510.134625.12345.3.001.cpuprofile');\n  });\n\n  it('should support custom file extensions', () => {\n    const customExt = getCpuProfileName(\n      {\n        pid: 12345,\n        date: testDate,\n        extension: 'profile',\n      },\n      sequenceMap\n    );\n    expect(customExt).toBe('CPU.20250510.134625.12345.0.001.profile');\n  });\n\n  it('should support custom prefix extensions', () => {\n    const customExt = getCpuProfileName(\n      {\n        pid: 12345,\n        date: testDate,\n        prefix: 'PROF',\n      },\n      sequenceMap\n    );\n    expect(customExt).toBe('PROF.20250510.134625.12345.0.001.cpuprofile');\n  });\n});\n\ndescribe('parseCpuProfileName', () => {\n  const VALID_PROFILE_NAME = 'CPU.20250510.134625.12345.0.001.cpuprofile';\n\n  it('should parse prefix of standard CPU profile name', () => {\n    expect(parseCpuProfileName(VALID_PROFILE_NAME)).toStrictEqual(\n      expect.objectContaining({ prefix: 'CPU' })\n    );\n  });\n\n  it('should parse date of standard CPU profile name', () => {\n    const expected = new Date(2025, 4, 10, 13, 46, 25); // May 10, 2025, 13:46:25\n    expect(parseCpuProfileName(VALID_PROFILE_NAME)).toStrictEqual(\n      expect.objectContaining({ date: expected })\n    );\n  });\n\n  it('should parse PID of standard CPU profile name', () => {\n    expect(parseCpuProfileName(VALID_PROFILE_NAME)).toStrictEqual(\n      expect.objectContaining({ pid: 12345 })\n    );\n  });\n\n  it('should parse TID of standard CPU profile name', () => {\n    expect(parseCpuProfileName(VALID_PROFILE_NAME)).toStrictEqual(\n      expect.objectContaining({ tid: 0 })\n    );\n  });\n\n  it('should parse sequence of standard CPU profile name', () => {\n    expect(parseCpuProfileName(VALID_PROFILE_NAME)).toStrictEqual(\n      expect.objectContaining({ seq: 1 })\n    );\n  });\n\n  it('should parse extension of standard CPU profile name', () => {\n    expect(parseCpuProfileName(VALID_PROFILE_NAME)).toStrictEqual(\n      expect.objectContaining({ extension: 'cpuprofile' })\n    );\n  });\n\n  it('should throw error for malformed profile name', () => {\n    expect(() => parseCpuProfileName('invalid.profile.name')).toThrow();\n  });\n});\n\ndescribe('execWithCpuProf', () => {\n  const mergeTmp = join(TMP_DIR, 'cpu-profiling/merge');\n\n  beforeEach(async () => {\n    await rm(mergeTmp, { recursive: true, force: true });\n  });\n\n  afterAll(async () => {\n    await rm(mergeTmp, { recursive: true, force: true });\n  });\n\n  it.each([\n    ['fork', join(MOCKS_DIR, 'program', 'fork-children.mjs')],\n    ['spawn', join(MOCKS_DIR, 'program', 'spawn-children.mjs')],\n    ['worker', join(MOCKS_DIR, 'program', 'worker-children.mjs')],\n  ])(\n    'should create CPU profiles for %s processes',\n    async (caseName, scriptPath) => {\n      const testCaseDir = join(mergeTmp, caseName);\n\n      const result = await execWithCpuProf({\n        scriptPath,\n        outputDir: testCaseDir,\n        cpuProfOptions: {\n          interval: 100,\n        },\n      });\n\n      expect(result.stdout).toContain('PID');\n      expect(result.stderr).toBe('');\n\n      const files = await readdir(testCaseDir);\n      const cpuProfiles = files.filter(\n        (f) => f.startsWith('CPU.') && f.endsWith('.cpuprofile')\n      );\n      expect(cpuProfiles).toHaveLength(3);\n\n      const profilePath = join(testCaseDir, cpuProfiles[0]);\n      const profileContent = await readFile(profilePath, 'utf8');\n      const profile: CPUProfile = JSON.parse(profileContent);\n\n      expect(profile).toMatchObject({\n        nodes: expect.any(Array),\n        samples: expect.any(Array),\n        timeDeltas: expect.any(Array),\n        startTime: expect.any(Number),\n        endTime: expect.any(Number),\n      });\n\n      // Ensure timeDeltas exists before calculating average\n      expect(profile.timeDeltas).toBeDefined();\n      expect(profile.timeDeltas!.length).toBeGreaterThan(0);\n    }\n  );\n\n  it('should respect custom CPU profiling options', async () => {\n    const testCaseDir = join(mergeTmp, 'custom-options');\n\n    await execWithCpuProf({\n      scriptPath: '-e \"console.log(\\'Hello, world!\\')\"',\n      outputDir: testCaseDir,\n      cpuProfOptions: {\n        interval: 500,\n        name: 'custom-profile.cpuprofile',\n      },\n    });\n\n    const files = await readdir(testCaseDir);\n    expect(files).toContain('custom-profile.cpuprofile');\n  });\n\n  it('should create output directory if it does not exist', async () => {\n    const testCaseDir = join(mergeTmp, 'new-dir/subdir');\n\n    await execWithCpuProf({\n      scriptPath: '-e \"console.log(\\'Hello, world!\\')\"',\n      outputDir: testCaseDir,\n    });\n\n    const files = await readdir(testCaseDir);\n    expect(files.length).toBeGreaterThan(0);\n  });\n\n  it('should throw on invalid script path', async () => {\n    await expect(\n      execWithCpuProf({\n        scriptPath: 'non-existent.js',\n        outputDir: mergeTmp,\n      })\n    ).rejects.toThrow();\n  });\n\n  it('should throw on timeout', async () => {\n    const scriptPath = join(MOCKS_DIR, 'program', 'fork-children.mjs');\n\n    await expect(\n      execWithCpuProf({\n        scriptPath,\n        outputDir: mergeTmp,\n        timeoutMs: 1,\n      })\n    ).rejects.toThrow();\n  });\n\n  it('should handle disabled profiling', async () => {\n    const testCaseDir = join(mergeTmp, 'disabled');\n\n    await execWithCpuProf({\n      scriptPath: '-e \"console.log(\\'Hello, world!\\')\"',\n      outputDir: testCaseDir,\n      cpuProfOptions: {\n        enabled: false,\n      },\n    });\n\n    const files = await readdir(testCaseDir);\n    expect(files.filter((f) => f.endsWith('.cpuprofile'))).toHaveLength(0);\n  });\n});\n","stats":{"times":{"passes":[{"parse":{"total":5.445542},"rules":{"for-direction":{"total":0.003875},"no-async-promise-executor":{"total":0.0005},"no-case-declarations":{"total":0.000375},"no-compare-neg-zero":{"total":0.004417},"no-cond-assign":{"total":0.001667},"no-constant-binary-expression":{"total":0.010541},"no-constant-condition":{"total":0.003},"no-control-regex":{"total":0.125834},"no-debugger":{"total":0.000292},"no-delete-var":{"total":0.0013320000000000003},"no-dupe-else-if":{"total":0.002292},"no-duplicate-case":{"total":0.0005},"no-empty":{"total":0.12200100000000001},"no-empty-character-class":{"total":0.001709},"no-empty-pattern":{"total":0.016166},"no-empty-static-block":{"total":0.000333},"no-ex-assign":{"total":0.003041},"no-extra-boolean-cast":{"total":0.038281000000000016},"no-fallthrough":{"total":0.03408700000000002},"no-global-assign":{"total":0.022583},"no-invalid-regexp":{"total":0.030462000000000024},"no-irregular-whitespace":{"total":0.012750000000000001},"no-loss-of-precision":{"total":0.15170499999999965},"no-misleading-character-class":{"total":0.181167},"no-nonoctal-decimal-escape":{"total":0.02733100000000002},"no-octal":{"total":0.024791000000000014},"no-prototype-builtins":{"total":0.050160000000000024},"no-regex-spaces":{"total":0.1827059999999992},"no-self-assign":{"total":0.000625},"no-shadow-restricted-names":{"total":0.04534100000000003},"no-sparse-arrays":{"total":0.001374},"no-unsafe-finally":{"total":0.000333},"no-unsafe-optional-chaining":{"total":0.07225500000000006},"no-unused-labels":{"total":0.000417},"no-unused-private-class-members":{"total":0.000583},"no-useless-backreference":{"total":0.077457},"no-useless-catch":{"total":0.000959},"no-useless-escape":{"total":0.20336899999999966},"require-yield":{"total":0.000417},"use-isnan":{"total":0.0034180000000000005},"valid-typeof":{"total":0.003291},"no-var":{"total":0.005917000000000002},"prefer-const":{"total":0.007042000000000002},"prefer-rest-params":{"total":0.000334},"prefer-spread":{"total":0.042120000000000025},"@typescript-eslint/ban-ts-comment":{"total":0.02275},"@typescript-eslint/no-array-constructor":{"total":0.034924000000000024},"@typescript-eslint/no-duplicate-enum-values":{"total":0.001333},"@typescript-eslint/no-empty-object-type":{"total":0.004625},"@typescript-eslint/no-explicit-any":{"total":0.00375},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001166},"@typescript-eslint/no-misused-new":{"total":0.001041},"@typescript-eslint/no-namespace":{"total":0.002875},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.000958},"@typescript-eslint/no-this-alias":{"total":0.003042},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.007542},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001375},"@typescript-eslint/no-unsafe-function-type":{"total":0.002584},"@typescript-eslint/no-unused-expressions":{"total":0.06512600000000003},"@typescript-eslint/no-unused-vars":{"total":1.755332},"@typescript-eslint/no-wrapper-object-types":{"total":0.002792},"@typescript-eslint/prefer-as-const":{"total":0.010834000000000002},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000916},"@typescript-eslint/triple-slash-reference":{"total":0.012917},"@typescript-eslint/no-non-null-assertion":{"total":0.152126},"@typescript-eslint/adjacent-overload-signatures":{"total":0.05000100000000002},"@typescript-eslint/no-empty-function":{"total":0.13716700000000007},"@typescript-eslint/no-inferrable-types":{"total":0.026078},"@typescript-eslint/no-empty-interface":{"total":0.028209},"@nx/enforce-module-boundaries":{"total":0.10520800000000001}},"fix":{"total":0},"total":12.355583}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/src/lib/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":192,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":192,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4991,4994],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4991,4994],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { exec } from 'child_process';\nimport { mkdir, rm } from 'fs/promises';\nimport { promisify } from 'util';\nimport { TraceEvent } from './traceprofile.types';\n\nconst execAsync = promisify(exec);\n\nexport type CpuProfileNameOptions = {\n  prefix?: string;\n  pid?: number;\n  tid?: number;\n  date?: Date;\n  extension?: string;\n  seq?: number;\n};\n\nconst cpuProfileSeqMap = new Map();\n\n/**\n * Generates a CPU profile filename like:\n * PREFIX.YYYYMMDD.HHMMSS.PID.TID.SEQ.cpuprofile\n */\nexport function getCpuProfileName(\n  {\n    prefix = 'CPU',\n    pid,\n    tid = 0,\n    date = new Date(),\n    extension = 'cpuprofile',\n  }: CpuProfileNameOptions,\n  sequenceMap = cpuProfileSeqMap\n) {\n  const pad = (n: number, width = 2) => String(n).padStart(width, '0');\n\n  // Build date/time segments\n  const year = date.getFullYear();\n  const month = pad(date.getMonth() + 1);\n  const day = pad(date.getDate());\n  const hours = pad(date.getHours());\n  const minutes = pad(date.getMinutes());\n  const seconds = pad(date.getSeconds());\n\n  const datePart = `${year}${month}${day}`;\n  const timePart = `${hours}${minutes}${seconds}`;\n\n  // Get and increment the sequence for this PID-TID\n  const key = `${pid}-${tid}`;\n  const currentSeq = sequenceMap.get(key) || 0;\n  const nextSeq = currentSeq + 1;\n  sequenceMap.set(key, nextSeq);\n  const seqPart = pad(nextSeq, 3);\n\n  // Remove leading dot from extension if present\n  const cleanExtension = extension.startsWith('.')\n    ? extension.slice(1)\n    : extension;\n\n  return `${prefix}.${datePart}.${timePart}.${pid}.${tid}.${seqPart}.${cleanExtension}`;\n}\n\n/**\n * Parses a CPU profile filename and extracts its components.\n *\n * @param {string} file - Filename in the format:\n *   {prefix}.{YYYYMMDD}.{HHMMSS}.{pid}.{tid}.{seq}.{extension}\n * @returns {object} Parsed details including:\n *   prefix, pid, tid, seq, date (Date object), extension, isMain\n * @throws {Error} If the filename doesn't match the expected pattern.\n *\n * @example\n * const info = parseCpuProfileName('CPU.20250510.134625.51430.1.1.cpuprofile');\n *  info = {\n *    prefix: 'CPU',\n *    pid: 51430,\n *    tid: 1,\n *    seq: 1,\n *    date: Date('2025-05-10T13:46:25'),\n *    extension: 'cpuprofile',\n *    isMain: true\n *  }\n */\nexport function parseCpuProfileName(\n  file: string\n): Required<Omit<CpuProfileNameOptions, 'prefix' | 'extension'>> &\n  Pick<CpuProfileNameOptions, 'prefix' | 'extension'> {\n  const pattern =\n    /^(?<prefix>[^.]+)\\.(?<ymd>\\d{8})\\.(?<hms>\\d{6})\\.(?<pid>\\d+)\\.(?<tid>\\d+)\\.(?<seq>\\d+)(?:\\.(?<ext>.*))?$/;\n  const match = file.match(pattern);\n  if (!match?.groups) {\n    throw new Error(`Invalid CPU profile filename: ${file}`);\n  }\n\n  const {\n    prefix,\n    ymd,\n    hms,\n    pid = 0,\n    tid = 0,\n    seq,\n    ext: extension = '',\n  } = match.groups;\n\n  const year = +ymd.slice(0, 4);\n  const month = +ymd.slice(4, 6) - 1;\n  const day = +ymd.slice(6, 8);\n  const hours = +hms.slice(0, 2);\n  const minutes = +hms.slice(2, 4);\n  const seconds = +hms.slice(4, 6);\n\n  return {\n    prefix,\n    pid: Number(pid),\n    tid: Number(tid),\n    seq: Number(seq),\n    date: new Date(year, month, day, hours, minutes, seconds),\n    extension,\n  };\n}\n\nexport interface CpuProfOptions {\n  /** Enable the V8 CPU profiler */\n  enabled?: boolean; // default: true\n\n  /** Directory to write .cpuprofile files */\n  dir?: string;\n\n  /** Filename pattern (supports %P, %T, %D, %H) */\n  name?: string;\n\n  /** Sampling interval in microseconds (default: 1000) */\n  interval?: number;\n}\n\nexport interface ExecWithCpuProfConfig {\n  scriptPath: string;\n  outputDir: string;\n  timeoutMs?: number;\n  cpuProfOptions?: CpuProfOptions;\n  sampleProfInterval?: string;\n}\n\nexport async function execWithCpuProf(\n  config: ExecWithCpuProfConfig\n): Promise<{ stdout: string; stderr: string }> {\n  const {\n    scriptPath,\n    outputDir,\n    timeoutMs = 5000,\n    cpuProfOptions = {},\n    sampleProfInterval,\n  } = config;\n\n  const {\n    enabled = true,\n    interval = 1000,\n    dir = outputDir,\n    name,\n  } = cpuProfOptions;\n\n  // Prepare output directory\n  await rm(dir, { recursive: true, force: true });\n  await mkdir(dir, { recursive: true });\n\n  // Build profiling flags\n  const profFlags: string[] = [];\n\n  if (enabled) {\n    profFlags.push('--cpu-prof');\n    if (interval) profFlags.push(`--cpu-prof-interval=${interval}`);\n    if (dir) profFlags.push(`--cpu-prof-dir=\"${dir}\"`);\n    if (name) profFlags.push(`--cpu-prof-name=\"${name}\"`);\n  }\n\n  if (sampleProfInterval) {\n    profFlags.push(`--sample-prof-interval=${sampleProfInterval}`);\n  }\n\n  // Handle -e flag differently than file paths\n  const isEvalScript = scriptPath.startsWith('-e');\n  const formattedScript = isEvalScript\n    ? scriptPath // Keep the -e command exactly as provided\n    : `\"${scriptPath}\"`;\n\n  const command = `node ${profFlags.join(' ')} ${formattedScript}`;\n\n  try {\n    const result = await execAsync(\n      command,\n      timeoutMs ? { timeout: timeoutMs } : {}\n    );\n    return result;\n  } catch (error: any) {\n    throw new Error(`CPU profile execution failed: ${error.message || error}`);\n  }\n}\n\nexport function microsecondsToDate(microseconds: number): Date {\n  return new Date(microseconds / 1000);\n}\n\n/**\n * Helper function to coerce string array arguments from CLI input\n */\nexport function coerceStringArray(\n  arg: string[] | string | boolean\n): string[] | undefined {\n  if (arg === false || arg === undefined) {\n    return undefined;\n  }\n  if (typeof arg === 'string') {\n    return arg.split(',').map((item: string) => item.trim());\n  }\n  if (Array.isArray(arg)) {\n    return arg.flatMap((item: string) =>\n      item.split(',').map((s: string) => s.trim())\n    );\n  }\n  return undefined;\n}\n\n/**\n * Helper function to coerce number array arguments from CLI input\n */\nexport function coerceNumberArray(\n  arg: string[] | string | boolean,\n  type: 'PID' | 'TID'\n): number[] | undefined {\n  if (arg === false || arg === undefined) {\n    return undefined;\n  }\n  const values =\n    typeof arg === 'string'\n      ? arg.split(',')\n      : Array.isArray(arg)\n      ? arg.flatMap((item: string) => item.split(','))\n      : [];\n  return values.map((id: string) => {\n    const numId = parseInt(id.trim(), 10);\n    if (isNaN(numId)) {\n      throw new Error(`Invalid ${type}: ${id}. ${type}s must be numbers.`);\n    }\n    return numId;\n  });\n}\n\n/**\n * Helper function to coerce string array arguments with default values\n */\nexport function coerceStringArrayWithDefaults(\n  arg: string[] | string | boolean,\n  defaults: string[] = []\n): string[] {\n  // Handle yargs negation (--no-exclude-*)\n  if (arg === false || arg === undefined) {\n    return [];\n  }\n\n  if (typeof arg === 'string') {\n    const userValues = arg.split(',').map((item: string) => item.trim());\n    return [...new Set([...defaults, ...userValues])];\n  }\n  if (Array.isArray(arg)) {\n    const userValues = arg.flatMap((item: string) =>\n      item.split(',').map((s: string) => s.trim())\n    );\n    return [...new Set([...defaults, ...userValues])];\n  }\n  return defaults;\n}\n\nexport function sortTraceEvents(rawEvents: TraceEvent[]): TraceEvent[] {\n  const metaOnly = rawEvents.filter((e) => e.ph === 'M');\n  const eventsOnly = rawEvents.filter((e) => e.ph !== 'M');\n  metaOnly.sort((a, b) => a.ts - b.ts);\n  eventsOnly.sort((a, b) => a.ts - b.ts);\n  return [...metaOnly, ...eventsOnly];\n}\n","stats":{"times":{"passes":[{"parse":{"total":5.6205},"rules":{"for-direction":{"total":0.002834},"no-async-promise-executor":{"total":0.000375},"no-case-declarations":{"total":0.00025},"no-compare-neg-zero":{"total":0.013164},"no-cond-assign":{"total":0.005914999999999999},"no-constant-binary-expression":{"total":0.15500299999999992},"no-constant-condition":{"total":0.02412700000000001},"no-control-regex":{"total":1.2239999999999995},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.003083},"no-dupe-else-if":{"total":0.009416},"no-duplicate-case":{"total":0.000416},"no-empty":{"total":0.0045400000000000015},"no-empty-character-class":{"total":0.001667},"no-empty-pattern":{"total":0.001959},"no-empty-static-block":{"total":0.000333},"no-ex-assign":{"total":0.0034999999999999996},"no-extra-boolean-cast":{"total":0.016204000000000007},"no-fallthrough":{"total":0.05694800000000004},"no-global-assign":{"total":0.021459000000000002},"no-invalid-regexp":{"total":0.013707000000000006},"no-irregular-whitespace":{"total":0.014209},"no-loss-of-precision":{"total":0.07204300000000002},"no-misleading-character-class":{"total":0.576416},"no-nonoctal-decimal-escape":{"total":0.012502000000000008},"no-octal":{"total":0.011417000000000002},"no-prototype-builtins":{"total":0.022252000000000015},"no-regex-spaces":{"total":0.07737700000000004},"no-self-assign":{"total":0.000625},"no-shadow-restricted-names":{"total":0.03811700000000001},"no-sparse-arrays":{"total":0.0027929999999999995},"no-unsafe-finally":{"total":0.015666},"no-unsafe-optional-chaining":{"total":0.04549700000000003},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.000417},"no-useless-backreference":{"total":0.313374},"no-useless-catch":{"total":0.001167},"no-useless-escape":{"total":1.1020819999999996},"require-yield":{"total":0.004041},"use-isnan":{"total":0.014750000000000001},"valid-typeof":{"total":0.006878},"no-var":{"total":0.005667000000000001},"prefer-const":{"total":0.0074160000000000025},"prefer-rest-params":{"total":0.006501},"prefer-spread":{"total":0.018583000000000006},"@typescript-eslint/ban-ts-comment":{"total":0.020791},"@typescript-eslint/no-array-constructor":{"total":0.014880000000000006},"@typescript-eslint/no-duplicate-enum-values":{"total":0.00125},"@typescript-eslint/no-empty-object-type":{"total":0.005458000000000001},"@typescript-eslint/no-explicit-any":{"total":0.027875},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001208},"@typescript-eslint/no-misused-new":{"total":0.001167},"@typescript-eslint/no-namespace":{"total":0.002916},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001208},"@typescript-eslint/no-this-alias":{"total":0.002667},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.00625},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.008957999999999999},"@typescript-eslint/no-unsafe-function-type":{"total":0.004208000000000001},"@typescript-eslint/no-unused-expressions":{"total":0.018289},"@typescript-eslint/no-unused-vars":{"total":2.489209},"@typescript-eslint/no-wrapper-object-types":{"total":0.004999999999999999},"@typescript-eslint/prefer-as-const":{"total":0.009207000000000003},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000875},"@typescript-eslint/triple-slash-reference":{"total":0.008957000000000001},"@typescript-eslint/no-non-null-assertion":{"total":0.00125},"@typescript-eslint/adjacent-overload-signatures":{"total":0.05362400000000001},"@typescript-eslint/no-empty-function":{"total":0.10679000000000004},"@typescript-eslint/no-inferrable-types":{"total":0.02341800000000001},"@typescript-eslint/no-empty-interface":{"total":0.003},"@nx/enforce-module-boundaries":{"total":0.058542000000000004}},"fix":{"total":0},"total":14.894459}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/tsconfig.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.158291},"rules":{"@nx/dependency-checks":{"total":0.029417}},"fix":{"total":0},"total":0.900375}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/tsconfig.lib.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.185},"rules":{"@nx/dependency-checks":{"total":0.140291}},"fix":{"total":0},"total":1.059834}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/tsconfig.spec.json","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.101375},"rules":{"@nx/dependency-checks":{"total":0.023792}},"fix":{"total":0},"total":0.770833}]},"fixPasses":0},"usedDeprecatedRules":[]},{"filePath":"/Users/michael_hladky/WebstormProjects/nx-advanced-perf-logging/packages/cpu-profiling/vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"stats":{"times":{"passes":[{"parse":{"total":0.629125},"rules":{"for-direction":{"total":0.002208},"no-async-promise-executor":{"total":0.000375},"no-case-declarations":{"total":0.000292},"no-compare-neg-zero":{"total":0.000917},"no-cond-assign":{"total":0.001125},"no-constant-binary-expression":{"total":0.000292},"no-constant-condition":{"total":0.001459},"no-control-regex":{"total":0.0030430000000000006},"no-debugger":{"total":0.00025},"no-delete-var":{"total":0.00025},"no-dupe-else-if":{"total":0.000583},"no-duplicate-case":{"total":0.0005},"no-empty":{"total":0.000708},"no-empty-character-class":{"total":0.000208},"no-empty-pattern":{"total":0.000834},"no-empty-static-block":{"total":0.000333},"no-ex-assign":{"total":0.000291},"no-extra-boolean-cast":{"total":0.002125},"no-fallthrough":{"total":0.004332000000000001},"no-global-assign":{"total":0.021958000000000002},"no-invalid-regexp":{"total":0.001209},"no-irregular-whitespace":{"total":0.003624},"no-loss-of-precision":{"total":0.002750000000000001},"no-misleading-character-class":{"total":0.012542000000000001},"no-nonoctal-decimal-escape":{"total":0.003082},"no-octal":{"total":0.0021260000000000003},"no-prototype-builtins":{"total":0.0011250000000000001},"no-regex-spaces":{"total":0.004333000000000001},"no-self-assign":{"total":0.000792},"no-shadow-restricted-names":{"total":0.0023339999999999997},"no-sparse-arrays":{"total":0.001583},"no-unsafe-finally":{"total":0.000292},"no-unsafe-optional-chaining":{"total":0.0016679999999999998},"no-unused-labels":{"total":0.000375},"no-unused-private-class-members":{"total":0.000416},"no-useless-backreference":{"total":0.003376},"no-useless-catch":{"total":0.00025},"no-useless-escape":{"total":0.004918},"require-yield":{"total":0.0005},"use-isnan":{"total":0.001292},"valid-typeof":{"total":0.001708},"no-var":{"total":0.000375},"prefer-const":{"total":0.0017499999999999998},"prefer-rest-params":{"total":0.000458},"prefer-spread":{"total":0.000958},"@typescript-eslint/ban-ts-comment":{"total":0.011959000000000001},"@typescript-eslint/no-array-constructor":{"total":0.0019169999999999999},"@typescript-eslint/no-duplicate-enum-values":{"total":0.0015},"@typescript-eslint/no-empty-object-type":{"total":0.003792},"@typescript-eslint/no-explicit-any":{"total":0.003208},"@typescript-eslint/no-extra-non-null-assertion":{"total":0.001083},"@typescript-eslint/no-misused-new":{"total":0.001},"@typescript-eslint/no-namespace":{"total":0.002542},"@typescript-eslint/no-non-null-asserted-optional-chain":{"total":0.001042},"@typescript-eslint/no-this-alias":{"total":0.002541},"@typescript-eslint/no-unnecessary-type-constraint":{"total":0.006291},"@typescript-eslint/no-unsafe-declaration-merging":{"total":0.001292},"@typescript-eslint/no-unsafe-function-type":{"total":0.0017499999999999998},"@typescript-eslint/no-unused-expressions":{"total":0.009125},"@typescript-eslint/no-unused-vars":{"total":0.315208},"@typescript-eslint/no-wrapper-object-types":{"total":0.002041},"@typescript-eslint/prefer-as-const":{"total":0.004918},"@typescript-eslint/prefer-namespace-keyword":{"total":0.000875},"@typescript-eslint/triple-slash-reference":{"total":0.008499},"@typescript-eslint/no-non-null-assertion":{"total":0.000958},"@typescript-eslint/adjacent-overload-signatures":{"total":0.004333},"@typescript-eslint/no-empty-function":{"total":0.012333},"@typescript-eslint/no-inferrable-types":{"total":0.004543},"@typescript-eslint/no-empty-interface":{"total":0.002125},"@nx/enforce-module-boundaries":{"total":0.36375}},"fix":{"total":0},"total":2.341334}]},"fixPasses":0},"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]}]