import {CpuProfile} from './cpuprofile.types'
/**
 * Full Trace Event JSON envelope as used by Chrome DevTools Tracing.
 */
export interface TraceFile {
    /** Metadata about the trace recording */
    metadata: Metadata;
    /** Array of trace events (timeline slices, instant events, profiler data, etc.) */
    traceEvents: TraceEvent[];
    displayTimeUnit?: string
}

/** Metadata block at the top of a trace file */
export interface Metadata {
    /** Should be "DevTools" when generated by Chrome/Node DevTools */
    source: string;
    /** ISO timestamp when tracing started, e.g. "2025-05-13T17:27:35.897Z" */
    startTime: string;
    /** Number of logical CPU cores on the recording machine */
    hardwareConcurrency: number;
    /** Always "TraceEvents" for JSON‐based traces */
    dataOrigin: string;
    modifications?: {
        entriesModifications?: {
            hiddenEntries: [],
            expandableEntries: []
        },
        initialBreadcrumb?: {
            window?: {
                min: number,
                max: number
            }
        }
    }
}

/** Discriminated union of all supported trace event phases */
export type TraceEvent =
    | MetadataEvent
    | InstantEvent
    | CompleteEvent
    | ProfileEvent
    | ProfileChunkEvent
// … add other phases as needed (CounterEvent, AsyncEvent, etc.)
    ;

/** "M" phase: metadata events like thread_name, process_name, etc. */
export interface MetadataEvent {
    ph: 'M';
    cat: string;         // e.g. "__metadata"
    name: string;       // e.g. "thread_name"
    pid: number;        // process id
    tid: number;        // thread id
    ts: number;         // timestamp (μs since trace zero)
    args: Record<string, any>;
}

/** "I" phase: instant events (no duration) */
export interface InstantEvent {
    ph: 'I';
    cat: string;        // e.g. "disabled-by-default-devtools.timeline"
    name: string;       // e.g. "TracingStartedInBrowser"
    pid: number;
    tid: number;
    ts: number;
    /** scope: 't' (thread), 'p' (process), or 'g' (global) */
    s?: 't' | 'p' | 'g';
    args: any;
}

/** "X" phase: complete (duration) events */
export interface CompleteEvent {
    ph: 'X';
    cat: string;        // category namespace
    name: string;       // descriptive name, e.g. "EvaluateScript"
    pid: number;
    tid: number;
    ts: number;         // start time (μs)
    dur: number;        // wall-clock duration (μs)
    /** Optional thread-clock duration (μs), showing CPU time consumed */
    tdur?: number;
    args: any;
}

/** "P" phase: single full CPU profile */
export interface ProfileEvent {
    ph: 'P';
    cat: 'disabled-by-default-v8.cpu_profiler';
    name: 'Profile';    // indicates a complete CPUProfile payload
    id: string,
    pid: number;
    tid: number;
    ts: number;         // usually cpuProfile.startTime (μs)
    args: {
        data: {
            startTime?: number,
            cpuProfile?: CpuProfile;
        };
    };
}

/** "P" phase: streamed CPU profile chunk */
export interface ProfileChunkEvent {
    ph: 'P';
    cat: 'disabled-by-default-v8.cpu_profiler';
    name: 'ProfileChunk';
    id: string;         // profile session identifier, e.g. "0x1"
    pid: number;
    tid: number;
    ts: number;         // timestamp of chunk (μs)
    args: {
        data: {
            cpuProfile?: Partial<Pick<CpuProfile, 'samples' | 'nodes'>>; // may omit 'nodes' if chunks later provide them
            timeDeltas?: number[];            // intervals between samples (μs)
        };
    };
}
